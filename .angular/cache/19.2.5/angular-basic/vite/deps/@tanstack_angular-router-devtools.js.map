{
  "version": 3,
  "sources": ["../../../../../../packages/router-devtools-core/src/TanStackRouterDevtoolsCore.tsx", "../../../../../../packages/angular-router-devtools/src/router-devtools.ts", "../../../../../../packages/angular-router-devtools/src/tanstack-angular-router-devtools.ts"],
  "sourcesContent": ["import { createSignal, lazy } from 'solid-js'\nimport { render } from 'solid-js/web'\nimport type { AnyRouter } from '@tanstack/router-core'\nimport type { Signal } from 'solid-js'\n\ninterface DevtoolsOptions {\n  /**\n   * Set this true if you want the dev tools to default to being open\n   */\n  initialIsOpen?: boolean\n  /**\n   * Use this to add props to the panel. For example, you can add class, style (merge and override default style), etc.\n   */\n  panelProps?: any & {\n    ref?: any\n  }\n  /**\n   * Use this to add props to the close button. For example, you can add class, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  closeButtonProps?: any & {\n    ref?: any\n  }\n  /**\n   * Use this to add props to the toggle button. For example, you can add class, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  toggleButtonProps?: any & {\n    ref?: any\n  }\n  /**\n   * The position of the TanStack Router logo to open and close the devtools panel.\n   * Defaults to 'bottom-left'.\n   */\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n  /**\n   * Use this to render the devtools inside a different type of container element for a11y purposes.\n   * Any string which corresponds to a valid intrinsic JSX element is allowed.\n   * Defaults to 'footer'.\n   */\n  containerElement?: string | any\n  /**\n   * A boolean variable indicating if the \"lite\" version of the library is being used\n   */\n  router: AnyRouter\n  routerState: any\n  /**\n   * Use this to attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n}\n\nclass TanStackRouterDevtoolsCore {\n  #router: Signal<AnyRouter>\n  #routerState: Signal<any>\n  #position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n  #initialIsOpen: boolean\n  #shadowDOMTarget?: ShadowRoot\n\n  #panelProps: any\n  #closeButtonProps: any\n  #toggleButtonProps: any\n\n  #isMounted = false\n  #Component: any\n  #dispose?: () => void\n\n  constructor(config: DevtoolsOptions) {\n    this.#router = createSignal(config.router)\n    this.#routerState = createSignal(config.routerState)\n    this.#position = config.position ?? 'bottom-left'\n    this.#initialIsOpen = config.initialIsOpen ?? false\n    this.#shadowDOMTarget = config.shadowDOMTarget\n\n    this.#panelProps = config.panelProps\n    this.#closeButtonProps = config.closeButtonProps\n    this.#toggleButtonProps = config.toggleButtonProps\n  }\n\n  mount<T extends HTMLElement>(el: T) {\n    if (this.#isMounted) {\n      throw new Error('Devtools is already mounted')\n    }\n\n    const dispose = render(() => {\n      const [router] = this.#router\n      const [routerState] = this.#routerState\n      const position = this.#position\n      const initialIsOpen = this.#initialIsOpen\n      const shadowDOMTarget = this.#shadowDOMTarget\n\n      const panelProps = this.#panelProps\n      const closeButtonProps = this.#closeButtonProps\n      const toggleButtonProps = this.#toggleButtonProps\n\n      let Devtools\n\n      if (this.#Component) {\n        Devtools = this.#Component\n      } else {\n        Devtools = lazy(() => import('./FloatingTanStackRouterDevtools'))\n        this.#Component = Devtools\n      }\n\n      return (\n        <Devtools\n          position={position}\n          initialIsOpen={initialIsOpen}\n          shadowDOMTarget={shadowDOMTarget}\n          router={router}\n          routerState={routerState}\n          panelProps={panelProps}\n          closeButtonProps={closeButtonProps}\n          toggleButtonProps={toggleButtonProps}\n        />\n      )\n    }, el)\n\n    this.#isMounted = true\n    this.#dispose = dispose\n  }\n\n  unmount() {\n    if (!this.#isMounted) {\n      throw new Error('Devtools is not mounted')\n    }\n    this.#dispose?.()\n    this.#isMounted = false\n  }\n\n  setRouter(router: AnyRouter) {\n    this.#router[1](router)\n  }\n\n  setRouterState(routerState: any) {\n    this.#routerState[1](routerState)\n  }\n\n  setOptions(options: Partial<DevtoolsOptions>) {\n    if (options.position !== undefined) {\n      this.#position = options.position\n    }\n\n    if (options.initialIsOpen !== undefined) {\n      this.#initialIsOpen = options.initialIsOpen\n    }\n\n    if (options.shadowDOMTarget !== undefined) {\n      this.#shadowDOMTarget = options.shadowDOMTarget\n    }\n  }\n}\n\nexport { TanStackRouterDevtoolsCore }\n", "import {\n  Directive,\n  ElementRef,\n  NgZone,\n  afterNextRender,\n  booleanAttribute,\n  effect,\n  inject,\n  input,\n  signal,\n  untracked,\n} from '@angular/core'\nimport { TanStackRouterDevtoolsCore } from '@tanstack/router-devtools-core'\nimport { injectRouter, isDevMode } from '@tanstack/angular-router'\n\n@Directive({\n  selector: 'tanstack-router-devtools,TanstackRouterDevtools',\n  host: { style: 'display: block;' },\n})\nexport class RouterDevtools {\n  private injectedRouter = injectRouter()\n  private host = inject<ElementRef<HTMLDivElement>>(ElementRef)\n  private ngZone = inject(NgZone)\n\n  router = input(this.injectedRouter)\n  show = input(isDevMode(), { transform: booleanAttribute })\n  initialIsOpen = input(undefined, { transform: booleanAttribute })\n  panelOptions = input<Partial<HTMLDivElement>>({})\n  closeButtonOptions = input<Partial<HTMLButtonElement>>({})\n  toggleButtonOptions = input<Partial<HTMLButtonElement>>({})\n  shadowDOMTarget = input<ShadowRoot>()\n  containerElement = input<string | HTMLElement>()\n  position = input<'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'>()\n\n  private devtools = signal<TanStackRouterDevtoolsCore | null>(null)\n\n  constructor() {\n    afterNextRender(() => {\n      const show = this.show()\n      if (!show) return\n\n      const router = untracked(this.router)\n      const [\n        initialIsOpen,\n        panelOptions,\n        closeButtonOptions,\n        toggleButtonOptions,\n        shadowDOMTarget,\n        containerElement,\n        position,\n        activeRouterState,\n      ] = [\n        untracked(this.initialIsOpen),\n        untracked(this.panelOptions),\n        untracked(this.closeButtonOptions),\n        untracked(this.toggleButtonOptions),\n        untracked(this.shadowDOMTarget),\n        untracked(this.containerElement),\n        untracked(this.position),\n        router.state,\n      ]\n\n      // initial devTools\n      this.devtools.set(\n        new TanStackRouterDevtoolsCore({\n          router,\n          routerState: activeRouterState,\n          initialIsOpen,\n          position,\n          panelProps: panelOptions,\n          closeButtonProps: closeButtonOptions,\n          toggleButtonProps: toggleButtonOptions,\n          shadowDOMTarget,\n          containerElement,\n        }),\n      )\n    })\n\n    effect(() => {\n      const devtools = this.devtools()\n      if (!devtools) return\n      this.ngZone.runOutsideAngular(() => devtools.setRouter(this.router()))\n    })\n\n    effect((onCleanup) => {\n      const devtools = this.devtools()\n      if (!devtools) return\n      this.ngZone.runOutsideAngular(() => {\n        const unsub = untracked(this.router).__store.subscribe(\n          ({ currentVal }) => {\n            devtools.setRouterState(currentVal)\n          },\n        )\n        onCleanup(() => unsub())\n      })\n    })\n\n    effect(() => {\n      const devtools = this.devtools()\n      if (!devtools) return\n\n      this.ngZone.runOutsideAngular(() => {\n        devtools.setOptions({\n          initialIsOpen: this.initialIsOpen(),\n          panelProps: this.panelOptions(),\n          closeButtonProps: this.closeButtonOptions(),\n          toggleButtonProps: this.toggleButtonOptions(),\n          position: this.position(),\n          containerElement: this.containerElement(),\n          shadowDOMTarget: this.shadowDOMTarget(),\n        })\n      })\n    })\n\n    effect((onCleanup) => {\n      const devtools = this.devtools()\n      if (!devtools) return\n      this.ngZone.runOutsideAngular(() =>\n        devtools.mount(this.host.nativeElement),\n      )\n      onCleanup(() => {\n        this.ngZone.runOutsideAngular(() => devtools.unmount())\n      })\n    })\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["TanStackRouterDevtoolsCore", "constructor", "config", "__privateAdd", "_router", "_routerState", "_position", "_initialIsOpen", "_shadowDOMTarget", "_panelProps", "_closeButtonProps", "_toggleButtonProps", "_isMounted", "_Component", "_dispose", "__privateSet", "createSignal", "router", "routerState", "position", "initialIsOpen", "shadowDOMTarget", "panelProps", "closeButtonProps", "toggleButtonProps", "mount", "el", "__privateGet", "Error", "dispose", "render", "Devtools", "lazy", "createComponent", "unmount", "_a", "call", "setRouter", "setRouterState", "setOptions", "options", "WeakMap", "_router", "WeakMap", "_routerState", "_shadowDOMTarget", "_isMounted", "_setIsOpen", "_dispose", "_Component", "RouterDevtools", "injectedRouter", "injectRouter", "host", "inject", "ElementRef", "ngZone", "NgZone", "router", "input", "show", "isDevMode", "transform", "booleanAttribute", "initialIsOpen", "undefined", "panelOptions", "closeButtonOptions", "toggleButtonOptions", "shadowDOMTarget", "containerElement", "position", "devtools", "signal", "constructor", "afterNextRender", "untracked", "activeRouterState", "state", "set", "TanStackRouterDevtoolsCore", "routerState", "panelProps", "closeButtonProps", "toggleButtonProps", "effect", "runOutsideAngular", "setRouter", "onCleanup", "unsub", "__store", "subscribe", "currentVal", "setRouterState", "setOptions", "mount", "nativeElement", "unmount", "selectors", "hostAttrs", "inputs", "Directive", "args", "selector", "style"]
}
