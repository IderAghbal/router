{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/tiny-invariant@1.3.3/node_modules/tiny-invariant/dist/esm/tiny-invariant.js", "../../../../../../packages/history/src/index.ts", "../../../../../../packages/router-core/src/utils.ts", "../../../../../../packages/router-core/src/path.ts", "../../../../../../packages/router-core/src/not-found.ts", "../../../../../../packages/router-core/src/qss.ts", "../../../../../../packages/router-core/src/searchParams.ts", "../../../../../../packages/router-core/src/root.ts", "../../../../../../packages/router-core/src/redirect.ts", "../../../../../../node_modules/.pnpm/@tanstack+store@0.7.0/node_modules/@tanstack/store/dist/esm/scheduler.js", "../../../../../../node_modules/.pnpm/@tanstack+store@0.7.0/node_modules/@tanstack/store/dist/esm/store.js", "../../../../../../node_modules/.pnpm/@tanstack+store@0.7.0/node_modules/@tanstack/store/dist/esm/derived.js", "../../../../../../packages/router-core/src/scroll-restoration.ts", "../../../../../../packages/router-core/src/router.ts", "../../../../../../packages/router-core/src/defer.ts", "../../../../../../packages/router-core/src/link.ts", "../../../../../../packages/router-core/src/Matches.ts", "../../../../../../packages/router-core/src/route.ts", "../../../../../../packages/router-core/src/searchMiddleware.ts"],
  "sourcesContent": ["var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  if (isProduction) {\n    throw new Error(prefix);\n  }\n  var provided = typeof message === 'function' ? message() : message;\n  var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n  throw new Error(value);\n}\nexport { invariant as default };", "// While the public API was clearly inspired by the \"history\" npm package,\n// This implementation attempts to be more lightweight by\n// making assumptions about the way TanStack Router works\n\nexport interface NavigateOptions {\n  ignoreBlocker?: boolean\n}\n\ntype SubscriberHistoryAction =\n  | {\n      type: Exclude<HistoryAction, 'GO'>\n    }\n  | {\n      type: 'GO'\n      index: number\n    }\n\ntype SubscriberArgs = {\n  location: HistoryLocation\n  action: SubscriberHistoryAction\n}\n\nexport interface RouterHistory {\n  location: HistoryLocation\n  length: number\n  subscribers: Set<(opts: SubscriberArgs) => void>\n  subscribe: (cb: (opts: SubscriberArgs) => void) => () => void\n  push: (path: string, state?: any, navigateOpts?: NavigateOptions) => void\n  replace: (path: string, state?: any, navigateOpts?: NavigateOptions) => void\n  go: (index: number, navigateOpts?: NavigateOptions) => void\n  back: (navigateOpts?: NavigateOptions) => void\n  forward: (navigateOpts?: NavigateOptions) => void\n  canGoBack: () => boolean\n  createHref: (href: string) => string\n  block: (blocker: NavigationBlocker) => () => void\n  flush: () => void\n  destroy: () => void\n  notify: (action: SubscriberHistoryAction) => void\n  _ignoreSubscribers?: boolean\n}\n\nexport interface HistoryLocation extends ParsedPath {\n  state: ParsedHistoryState\n}\n\nexport interface ParsedPath {\n  href: string\n  pathname: string\n  search: string\n  hash: string\n}\n\nexport interface HistoryState {}\n\nexport type ParsedHistoryState = HistoryState & {\n  key?: string\n  __TSR_index: number\n}\n\ntype ShouldAllowNavigation = any\n\nexport type HistoryAction = 'PUSH' | 'REPLACE' | 'FORWARD' | 'BACK' | 'GO'\n\nexport type BlockerFnArgs = {\n  currentLocation: HistoryLocation\n  nextLocation: HistoryLocation\n  action: HistoryAction\n}\n\nexport type BlockerFn = (\n  args: BlockerFnArgs,\n) => Promise<ShouldAllowNavigation> | ShouldAllowNavigation\n\nexport type NavigationBlocker = {\n  blockerFn: BlockerFn\n  enableBeforeUnload?: (() => boolean) | boolean\n}\n\ntype TryNavigateArgs = {\n  task: () => void\n  type: 'PUSH' | 'REPLACE' | 'BACK' | 'FORWARD' | 'GO'\n  navigateOpts?: NavigateOptions\n} & (\n  | {\n      type: 'PUSH' | 'REPLACE'\n      path: string\n      state: any\n    }\n  | {\n      type: 'BACK' | 'FORWARD' | 'GO'\n    }\n)\n\nconst stateIndexKey = '__TSR_index'\nconst popStateEvent = 'popstate'\nconst beforeUnloadEvent = 'beforeunload'\n\nexport function createHistory(opts: {\n  getLocation: () => HistoryLocation\n  getLength: () => number\n  pushState: (path: string, state: any) => void\n  replaceState: (path: string, state: any) => void\n  go: (n: number) => void\n  back: (ignoreBlocker: boolean) => void\n  forward: (ignoreBlocker: boolean) => void\n  createHref: (path: string) => string\n  flush?: () => void\n  destroy?: () => void\n  onBlocked?: () => void\n  getBlockers?: () => Array<NavigationBlocker>\n  setBlockers?: (blockers: Array<NavigationBlocker>) => void\n  // Avoid notifying on forward/back/go, used for browser history as we already get notified by the popstate event\n  notifyOnIndexChange?: boolean\n}): RouterHistory {\n  let location = opts.getLocation()\n  const subscribers = new Set<(opts: SubscriberArgs) => void>()\n\n  const notify = (action: SubscriberHistoryAction) => {\n    location = opts.getLocation()\n    subscribers.forEach((subscriber) => subscriber({ location, action }))\n  }\n\n  const handleIndexChange = (action: SubscriberHistoryAction) => {\n    if (opts.notifyOnIndexChange ?? true) notify(action)\n    else location = opts.getLocation()\n  }\n\n  const tryNavigation = async ({\n    task,\n    navigateOpts,\n    ...actionInfo\n  }: TryNavigateArgs) => {\n    const ignoreBlocker = navigateOpts?.ignoreBlocker ?? false\n    if (ignoreBlocker) {\n      task()\n      return\n    }\n\n    const blockers = opts.getBlockers?.() ?? []\n    const isPushOrReplace =\n      actionInfo.type === 'PUSH' || actionInfo.type === 'REPLACE'\n    if (typeof document !== 'undefined' && blockers.length && isPushOrReplace) {\n      for (const blocker of blockers) {\n        const nextLocation = parseHref(actionInfo.path, actionInfo.state)\n        const isBlocked = await blocker.blockerFn({\n          currentLocation: location,\n          nextLocation,\n          action: actionInfo.type,\n        })\n        if (isBlocked) {\n          opts.onBlocked?.()\n          return\n        }\n      }\n    }\n\n    task()\n  }\n\n  return {\n    get location() {\n      return location\n    },\n    get length() {\n      return opts.getLength()\n    },\n    subscribers,\n    subscribe: (cb: (opts: SubscriberArgs) => void) => {\n      subscribers.add(cb)\n\n      return () => {\n        subscribers.delete(cb)\n      }\n    },\n    push: (path, state, navigateOpts) => {\n      const currentIndex = location.state[stateIndexKey]\n      state = assignKeyAndIndex(currentIndex + 1, state)\n      tryNavigation({\n        task: () => {\n          opts.pushState(path, state)\n          notify({ type: 'PUSH' })\n        },\n        navigateOpts,\n        type: 'PUSH',\n        path,\n        state,\n      })\n    },\n    replace: (path, state, navigateOpts) => {\n      const currentIndex = location.state[stateIndexKey]\n      state = assignKeyAndIndex(currentIndex, state)\n      tryNavigation({\n        task: () => {\n          opts.replaceState(path, state)\n          notify({ type: 'REPLACE' })\n        },\n        navigateOpts,\n        type: 'REPLACE',\n        path,\n        state,\n      })\n    },\n    go: (index, navigateOpts) => {\n      tryNavigation({\n        task: () => {\n          opts.go(index)\n          handleIndexChange({ type: 'GO', index })\n        },\n        navigateOpts,\n        type: 'GO',\n      })\n    },\n    back: (navigateOpts) => {\n      tryNavigation({\n        task: () => {\n          opts.back(navigateOpts?.ignoreBlocker ?? false)\n          handleIndexChange({ type: 'BACK' })\n        },\n        navigateOpts,\n        type: 'BACK',\n      })\n    },\n    forward: (navigateOpts) => {\n      tryNavigation({\n        task: () => {\n          opts.forward(navigateOpts?.ignoreBlocker ?? false)\n          handleIndexChange({ type: 'FORWARD' })\n        },\n        navigateOpts,\n        type: 'FORWARD',\n      })\n    },\n    canGoBack: () => location.state[stateIndexKey] !== 0,\n    createHref: (str) => opts.createHref(str),\n    block: (blocker) => {\n      if (!opts.setBlockers) return () => {}\n      const blockers = opts.getBlockers?.() ?? []\n      opts.setBlockers([...blockers, blocker])\n\n      return () => {\n        const blockers = opts.getBlockers?.() ?? []\n        opts.setBlockers?.(blockers.filter((b) => b !== blocker))\n      }\n    },\n    flush: () => opts.flush?.(),\n    destroy: () => opts.destroy?.(),\n    notify,\n  }\n}\n\nfunction assignKeyAndIndex(index: number, state: HistoryState | undefined) {\n  if (!state) {\n    state = {} as HistoryState\n  }\n  return {\n    ...state,\n    key: createRandomKey(),\n    [stateIndexKey]: index,\n  } as ParsedHistoryState\n}\n\n/**\n * Creates a history object that can be used to interact with the browser's\n * navigation. This is a lightweight API wrapping the browser's native methods.\n * It is designed to work with TanStack Router, but could be used as a standalone API as well.\n * IMPORTANT: This API implements history throttling via a microtask to prevent\n * excessive calls to the history API. In some browsers, calling history.pushState or\n * history.replaceState in quick succession can cause the browser to ignore subsequent\n * calls. This API smooths out those differences and ensures that your application\n * state will *eventually* match the browser state. In most cases, this is not a problem,\n * but if you need to ensure that the browser state is up to date, you can use the\n * `history.flush` method to immediately flush all pending state changes to the browser URL.\n * @param opts\n * @param opts.getHref A function that returns the current href (path + search + hash)\n * @param opts.createHref A function that takes a path and returns a href (path + search + hash)\n * @returns A history instance\n */\nexport function createBrowserHistory(opts?: {\n  parseLocation?: () => HistoryLocation\n  createHref?: (path: string) => string\n  window?: any\n}): RouterHistory {\n  const win =\n    opts?.window ??\n    (typeof document !== 'undefined' ? window : (undefined as any))\n\n  const originalPushState = win.history.pushState\n  const originalReplaceState = win.history.replaceState\n\n  let blockers: Array<NavigationBlocker> = []\n  const _getBlockers = () => blockers\n  const _setBlockers = (newBlockers: Array<NavigationBlocker>) =>\n    (blockers = newBlockers)\n\n  const createHref = opts?.createHref ?? ((path) => path)\n  const parseLocation =\n    opts?.parseLocation ??\n    (() =>\n      parseHref(\n        `${win.location.pathname}${win.location.search}${win.location.hash}`,\n        win.history.state,\n      ))\n\n  // Ensure there is always a key to start\n  if (!win.history.state?.key) {\n    win.history.replaceState(\n      {\n        [stateIndexKey]: 0,\n        key: createRandomKey(),\n      },\n      '',\n    )\n  }\n\n  let currentLocation = parseLocation()\n  let rollbackLocation: HistoryLocation | undefined\n\n  let nextPopIsGo = false\n  let ignoreNextPop = false\n  let skipBlockerNextPop = false\n  let ignoreNextBeforeUnload = false\n\n  const getLocation = () => currentLocation\n\n  let next:\n    | undefined\n    | {\n        // This is the latest location that we were attempting to push/replace\n        href: string\n        // This is the latest state that we were attempting to push/replace\n        state: any\n        // This is the latest type that we were attempting to push/replace\n        isPush: boolean\n      }\n\n  // We need to track the current scheduled update to prevent\n  // multiple updates from being scheduled at the same time.\n  let scheduled: Promise<void> | undefined\n\n  // This function flushes the next update to the browser history\n  const flush = () => {\n    if (!next) {\n      return\n    }\n\n    // We need to ignore any updates to the subscribers while we update the browser history\n    history._ignoreSubscribers = true\n\n    // Update the browser history\n    ;(next.isPush ? win.history.pushState : win.history.replaceState)(\n      next.state,\n      '',\n      next.href,\n    )\n\n    // Stop ignoring subscriber updates\n    history._ignoreSubscribers = false\n\n    // Reset the nextIsPush flag and clear the scheduled update\n    next = undefined\n    scheduled = undefined\n    rollbackLocation = undefined\n  }\n\n  // This function queues up a call to update the browser history\n  const queueHistoryAction = (\n    type: 'push' | 'replace',\n    destHref: string,\n    state: any,\n  ) => {\n    const href = createHref(destHref)\n\n    if (!scheduled) {\n      rollbackLocation = currentLocation\n    }\n\n    // Update the location in memory\n    currentLocation = parseHref(destHref, state)\n\n    // Keep track of the next location we need to flush to the URL\n    next = {\n      href,\n      state,\n      isPush: next?.isPush || type === 'push',\n    }\n\n    if (!scheduled) {\n      // Schedule an update to the browser history\n      scheduled = Promise.resolve().then(() => flush())\n    }\n  }\n\n  // NOTE: this function can probably be removed\n  const onPushPop = (type: 'PUSH' | 'REPLACE') => {\n    currentLocation = parseLocation()\n    history.notify({ type })\n  }\n\n  const onPushPopEvent = async () => {\n    if (ignoreNextPop) {\n      ignoreNextPop = false\n      return\n    }\n\n    const nextLocation = parseLocation()\n    const delta =\n      nextLocation.state[stateIndexKey] - currentLocation.state[stateIndexKey]\n    const isForward = delta === 1\n    const isBack = delta === -1\n    const isGo = (!isForward && !isBack) || nextPopIsGo\n    nextPopIsGo = false\n\n    const action = isGo ? 'GO' : isBack ? 'BACK' : 'FORWARD'\n    const notify: SubscriberHistoryAction = isGo\n      ? {\n          type: 'GO',\n          index: delta,\n        }\n      : {\n          type: isBack ? 'BACK' : 'FORWARD',\n        }\n\n    if (skipBlockerNextPop) {\n      skipBlockerNextPop = false\n    } else {\n      const blockers = _getBlockers()\n      if (typeof document !== 'undefined' && blockers.length) {\n        for (const blocker of blockers) {\n          const isBlocked = await blocker.blockerFn({\n            currentLocation,\n            nextLocation,\n            action,\n          })\n          if (isBlocked) {\n            ignoreNextPop = true\n            win.history.go(1)\n            history.notify(notify)\n            return\n          }\n        }\n      }\n    }\n\n    currentLocation = parseLocation()\n    history.notify(notify)\n  }\n\n  const onBeforeUnload = (e: BeforeUnloadEvent) => {\n    if (ignoreNextBeforeUnload) {\n      ignoreNextBeforeUnload = false\n      return\n    }\n\n    let shouldBlock = false\n\n    // If one blocker has a non-disabled beforeUnload, we should block\n    const blockers = _getBlockers()\n    if (typeof document !== 'undefined' && blockers.length) {\n      for (const blocker of blockers) {\n        const shouldHaveBeforeUnload = blocker.enableBeforeUnload ?? true\n        if (shouldHaveBeforeUnload === true) {\n          shouldBlock = true\n          break\n        }\n\n        if (\n          typeof shouldHaveBeforeUnload === 'function' &&\n          shouldHaveBeforeUnload() === true\n        ) {\n          shouldBlock = true\n          break\n        }\n      }\n    }\n\n    if (shouldBlock) {\n      e.preventDefault()\n      return (e.returnValue = '')\n    }\n    return\n  }\n\n  const history = createHistory({\n    getLocation,\n    getLength: () => win.history.length,\n    pushState: (href, state) => queueHistoryAction('push', href, state),\n    replaceState: (href, state) => queueHistoryAction('replace', href, state),\n    back: (ignoreBlocker) => {\n      if (ignoreBlocker) skipBlockerNextPop = true\n      ignoreNextBeforeUnload = true\n      return win.history.back()\n    },\n    forward: (ignoreBlocker) => {\n      if (ignoreBlocker) skipBlockerNextPop = true\n      ignoreNextBeforeUnload = true\n      win.history.forward()\n    },\n    go: (n) => {\n      nextPopIsGo = true\n      win.history.go(n)\n    },\n    createHref: (href) => createHref(href),\n    flush,\n    destroy: () => {\n      win.history.pushState = originalPushState\n      win.history.replaceState = originalReplaceState\n      win.removeEventListener(beforeUnloadEvent, onBeforeUnload, {\n        capture: true,\n      })\n      win.removeEventListener(popStateEvent, onPushPopEvent)\n    },\n    onBlocked: () => {\n      // If a navigation is blocked, we need to rollback the location\n      // that we optimistically updated in memory.\n      if (rollbackLocation && currentLocation !== rollbackLocation) {\n        currentLocation = rollbackLocation\n      }\n    },\n    getBlockers: _getBlockers,\n    setBlockers: _setBlockers,\n    notifyOnIndexChange: false,\n  })\n\n  win.addEventListener(beforeUnloadEvent, onBeforeUnload, { capture: true })\n  win.addEventListener(popStateEvent, onPushPopEvent)\n\n  win.history.pushState = function (...args: Array<any>) {\n    const res = originalPushState.apply(win.history, args as any)\n    if (!history._ignoreSubscribers) onPushPop('PUSH')\n    return res\n  }\n\n  win.history.replaceState = function (...args: Array<any>) {\n    const res = originalReplaceState.apply(win.history, args as any)\n    if (!history._ignoreSubscribers) onPushPop('REPLACE')\n    return res\n  }\n\n  return history\n}\n\nexport function createHashHistory(opts?: { window?: any }): RouterHistory {\n  const win =\n    opts?.window ??\n    (typeof document !== 'undefined' ? window : (undefined as any))\n  return createBrowserHistory({\n    window: win,\n    parseLocation: () => {\n      const hashSplit = win.location.hash.split('#').slice(1)\n      const pathPart = hashSplit[0] ?? '/'\n      const searchPart = win.location.search\n      const hashEntries = hashSplit.slice(1)\n      const hashPart =\n        hashEntries.length === 0 ? '' : `#${hashEntries.join('#')}`\n      const hashHref = `${pathPart}${searchPart}${hashPart}`\n      return parseHref(hashHref, win.history.state)\n    },\n    createHref: (href) =>\n      `${win.location.pathname}${win.location.search}#${href}`,\n  })\n}\n\nexport function createMemoryHistory(\n  opts: {\n    initialEntries: Array<string>\n    initialIndex?: number\n  } = {\n    initialEntries: ['/'],\n  },\n): RouterHistory {\n  const entries = opts.initialEntries\n  let index = opts.initialIndex\n    ? Math.min(Math.max(opts.initialIndex, 0), entries.length - 1)\n    : entries.length - 1\n  const states = entries.map((_entry, index) =>\n    assignKeyAndIndex(index, undefined),\n  )\n\n  const getLocation = () => parseHref(entries[index]!, states[index])\n\n  return createHistory({\n    getLocation,\n    getLength: () => entries.length,\n    pushState: (path, state) => {\n      // Removes all subsequent entries after the current index to start a new branch\n      if (index < entries.length - 1) {\n        entries.splice(index + 1)\n        states.splice(index + 1)\n      }\n      states.push(state)\n      entries.push(path)\n      index = Math.max(entries.length - 1, 0)\n    },\n    replaceState: (path, state) => {\n      states[index] = state\n      entries[index] = path\n    },\n    back: () => {\n      index = Math.max(index - 1, 0)\n    },\n    forward: () => {\n      index = Math.min(index + 1, entries.length - 1)\n    },\n    go: (n) => {\n      index = Math.min(Math.max(index + n, 0), entries.length - 1)\n    },\n    createHref: (path) => path,\n  })\n}\n\nexport function parseHref(\n  href: string,\n  state: ParsedHistoryState | undefined,\n): HistoryLocation {\n  const hashIndex = href.indexOf('#')\n  const searchIndex = href.indexOf('?')\n\n  return {\n    href,\n    pathname: href.substring(\n      0,\n      hashIndex > 0\n        ? searchIndex > 0\n          ? Math.min(hashIndex, searchIndex)\n          : hashIndex\n        : searchIndex > 0\n          ? searchIndex\n          : href.length,\n    ),\n    hash: hashIndex > -1 ? href.substring(hashIndex) : '',\n    search:\n      searchIndex > -1\n        ? href.slice(searchIndex, hashIndex === -1 ? undefined : hashIndex)\n        : '',\n    state: state || { [stateIndexKey]: 0, key: createRandomKey() },\n  }\n}\n\n// Thanks co-pilot!\nfunction createRandomKey() {\n  return (Math.random() + 1).toString(36).substring(7)\n}\n", "import type { RouteIds } from './routeInfo'\nimport type { AnyRouter } from './router'\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\nexport type IsAny<TValue, TYesResult, TNoResult = TValue> = 1 extends 0 & TValue\n  ? TYesResult\n  : TNoResult\n\nexport type PickAsRequired<TValue, TKey extends keyof TValue> = Omit<\n  TValue,\n  TKey\n> &\n  Required<Pick<TValue, TKey>>\n\nexport type PickRequired<T> = {\n  [K in keyof T as undefined extends T[K] ? never : K]: T[K]\n}\n\nexport type PickOptional<T> = {\n  [K in keyof T as undefined extends T[K] ? K : never]: T[K]\n}\n\n// from https://stackoverflow.com/a/76458160\nexport type WithoutEmpty<T> = T extends any ? ({} extends T ? never : T) : never\n\nexport type Expand<T> = T extends object\n  ? T extends infer O\n    ? O extends Function\n      ? O\n      : { [K in keyof O]: O[K] }\n    : never\n  : T\n\nexport type DeepPartial<T> = T extends object\n  ? {\n      [P in keyof T]?: DeepPartial<T[P]>\n    }\n  : T\n\nexport type MakeDifferenceOptional<TLeft, TRight> = Omit<\n  TRight,\n  keyof TLeft\n> & {\n  [K in keyof TLeft & keyof TRight]?: TRight[K]\n}\n\n// from https://stackoverflow.com/a/53955431\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : never\n) extends false\n  ? false\n  : true\n\nexport type IsNonEmptyObject<T> = T extends object\n  ? keyof T extends never\n    ? false\n    : true\n  : false\n\nexport type Assign<TLeft, TRight> = TLeft extends any\n  ? TRight extends any\n    ? IsNonEmptyObject<TLeft> extends false\n      ? TRight\n      : IsNonEmptyObject<TRight> extends false\n        ? TLeft\n        : keyof TLeft & keyof TRight extends never\n          ? TLeft & TRight\n          : Omit<TLeft, keyof TRight> & TRight\n    : never\n  : never\n\nexport type IntersectAssign<TLeft, TRight> = TLeft extends any\n  ? TRight extends any\n    ? IsNonEmptyObject<TLeft> extends false\n      ? TRight\n      : IsNonEmptyObject<TRight> extends false\n        ? TLeft\n        : TRight & TLeft\n    : never\n  : never\n\nexport type Timeout = ReturnType<typeof setTimeout>\n\nexport type Updater<TPrevious, TResult = TPrevious> =\n  | TResult\n  | ((prev?: TPrevious) => TResult)\n\nexport type NonNullableUpdater<TPrevious, TResult = TPrevious> =\n  | TResult\n  | ((prev: TPrevious) => TResult)\n\nexport type ExtractObjects<TUnion> = TUnion extends MergeAllPrimitive\n  ? never\n  : TUnion\n\nexport type PartialMergeAllObject<TUnion> =\n  ExtractObjects<TUnion> extends infer TObj\n    ? [TObj] extends [never]\n      ? never\n      : {\n          [TKey in TObj extends any ? keyof TObj : never]?: TObj extends any\n            ? TKey extends keyof TObj\n              ? TObj[TKey]\n              : never\n            : never\n        }\n    : never\n\nexport type MergeAllPrimitive =\n  | ReadonlyArray<any>\n  | number\n  | string\n  | bigint\n  | boolean\n  | symbol\n  | undefined\n  | null\n\nexport type ExtractPrimitives<TUnion> = TUnion extends MergeAllPrimitive\n  ? TUnion\n  : TUnion extends object\n    ? never\n    : TUnion\n\nexport type PartialMergeAll<TUnion> =\n  | ExtractPrimitives<TUnion>\n  | PartialMergeAllObject<TUnion>\n\nexport type Constrain<T, TConstraint, TDefault = TConstraint> =\n  | (T extends TConstraint ? T : never)\n  | TDefault\n\nexport type ConstrainLiteral<T, TConstraint, TDefault = TConstraint> =\n  | (T & TConstraint)\n  | TDefault\n\n/**\n * To be added to router types\n */\nexport type UnionToIntersection<T> = (\n  T extends any ? (arg: T) => any : never\n) extends (arg: infer T) => any\n  ? T\n  : never\n\n/**\n * Merges everything in a union into one object.\n * This mapped type is homomorphic which means it preserves stuff! :)\n */\nexport type MergeAllObjects<\n  TUnion,\n  TIntersected = UnionToIntersection<ExtractObjects<TUnion>>,\n> = [keyof TIntersected] extends [never]\n  ? never\n  : {\n      [TKey in keyof TIntersected]: TUnion extends any\n        ? TUnion[TKey & keyof TUnion]\n        : never\n    }\n\nexport type MergeAll<TUnion> =\n  | MergeAllObjects<TUnion>\n  | ExtractPrimitives<TUnion>\n\nexport type ValidateJSON<T> = ((...args: Array<any>) => any) extends T\n  ? unknown extends T\n    ? never\n    : 'Function is not serializable'\n  : { [K in keyof T]: ValidateJSON<T[K]> }\n\nexport function last<T>(arr: Array<T>) {\n  return arr[arr.length - 1]\n}\n\nfunction isFunction(d: any): d is Function {\n  return typeof d === 'function'\n}\n\nexport function functionalUpdate<TPrevious, TResult = TPrevious>(\n  updater: Updater<TPrevious, TResult> | NonNullableUpdater<TPrevious, TResult>,\n  previous: TPrevious,\n): TResult {\n  if (isFunction(updater)) {\n    return updater(previous)\n  }\n\n  return updater\n}\n\nexport function pick<TValue, TKey extends keyof TValue>(\n  parent: TValue,\n  keys: Array<TKey>,\n): Pick<TValue, TKey> {\n  return keys.reduce((obj: any, key: TKey) => {\n    obj[key] = parent[key]\n    return obj\n  }, {} as any)\n}\n\n/**\n * This function returns `prev` if `_next` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between immutable JSON values for example.\n * Do not use this with signals\n */\nexport function replaceEqualDeep<T>(prev: any, _next: T): T {\n  if (prev === _next) {\n    return prev\n  }\n\n  const next = _next as any\n\n  const array = isPlainArray(prev) && isPlainArray(next)\n\n  if (array || (isPlainObject(prev) && isPlainObject(next))) {\n    const prevItems = array ? prev : Object.keys(prev)\n    const prevSize = prevItems.length\n    const nextItems = array ? next : Object.keys(next)\n    const nextSize = nextItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < nextSize; i++) {\n      const key = array ? i : (nextItems[i] as any)\n      if (\n        ((!array && prevItems.includes(key)) || array) &&\n        prev[key] === undefined &&\n        next[key] === undefined\n      ) {\n        copy[key] = undefined\n        equalItems++\n      } else {\n        copy[key] = replaceEqualDeep(prev[key], next[key])\n        if (copy[key] === prev[key] && prev[key] !== undefined) {\n          equalItems++\n        }\n      }\n    }\n\n    return prevSize === nextSize && equalItems === prevSize ? prev : copy\n  }\n\n  return next\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any) {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any) {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isPlainArray(value: unknown): value is Array<unknown> {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\nfunction getObjectKeys(obj: any, ignoreUndefined: boolean) {\n  let keys = Object.keys(obj)\n  if (ignoreUndefined) {\n    keys = keys.filter((key) => obj[key] !== undefined)\n  }\n  return keys\n}\n\nexport function deepEqual(\n  a: any,\n  b: any,\n  opts?: { partial?: boolean; ignoreUndefined?: boolean },\n): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (isPlainObject(a) && isPlainObject(b)) {\n    const ignoreUndefined = opts?.ignoreUndefined ?? true\n    const aKeys = getObjectKeys(a, ignoreUndefined)\n    const bKeys = getObjectKeys(b, ignoreUndefined)\n\n    if (!opts?.partial && aKeys.length !== bKeys.length) {\n      return false\n    }\n\n    return bKeys.every((key) => deepEqual(a[key], b[key], opts))\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false\n    }\n    return !a.some((item, index) => !deepEqual(item, b[index], opts))\n  }\n\n  return false\n}\n\nexport type StringLiteral<T> = T extends string\n  ? string extends T\n    ? string\n    : T\n  : never\n\nexport type ThrowOrOptional<T, TThrow extends boolean> = TThrow extends true\n  ? T\n  : T | undefined\n\nexport type StrictOrFrom<\n  TRouter extends AnyRouter,\n  TFrom,\n  TStrict extends boolean = true,\n> = TStrict extends false\n  ? {\n      from?: never\n      strict: TStrict\n    }\n  : {\n      from: ConstrainLiteral<TFrom, RouteIds<TRouter['routeTree']>>\n      strict?: TStrict\n    }\n\nexport type ThrowConstraint<\n  TStrict extends boolean,\n  TThrow extends boolean,\n> = TStrict extends false ? (TThrow extends true ? never : TThrow) : TThrow\n\nexport type ControlledPromise<T> = Promise<T> & {\n  resolve: (value: T) => void\n  reject: (value: any) => void\n  status: 'pending' | 'resolved' | 'rejected'\n  value?: T\n}\n\nexport function createControlledPromise<T>(onResolve?: (value: T) => void) {\n  let resolveLoadPromise!: (value: T) => void\n  let rejectLoadPromise!: (value: any) => void\n\n  const controlledPromise = new Promise<T>((resolve, reject) => {\n    resolveLoadPromise = resolve\n    rejectLoadPromise = reject\n  }) as ControlledPromise<T>\n\n  controlledPromise.status = 'pending'\n\n  controlledPromise.resolve = (value: T) => {\n    controlledPromise.status = 'resolved'\n    controlledPromise.value = value\n    resolveLoadPromise(value)\n    onResolve?.(value)\n  }\n\n  controlledPromise.reject = (e) => {\n    controlledPromise.status = 'rejected'\n    rejectLoadPromise(e)\n  }\n\n  return controlledPromise\n}\n\n/**\n *\n * @deprecated use `jsesc` instead\n */\nexport function escapeJSON(jsonString: string) {\n  return jsonString\n    .replace(/\\\\/g, '\\\\\\\\') // Escape backslashes\n    .replace(/'/g, \"\\\\'\") // Escape single quotes\n    .replace(/\"/g, '\\\\\"') // Escape double quotes\n}\n\nexport function shallow<T>(objA: T, objB: T) {\n  if (Object.is(objA, objB)) {\n    return true\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false\n  }\n\n  const keysA = Object.keys(objA)\n  if (keysA.length !== Object.keys(objB).length) {\n    return false\n  }\n\n  for (const item of keysA) {\n    if (\n      !Object.prototype.hasOwnProperty.call(objB, item) ||\n      !Object.is(objA[item as keyof T], objB[item as keyof T])\n    ) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Checks if a string contains URI-encoded special characters (e.g., %3F, %20).\n *\n * @param {string} inputString The string to check.\n * @returns {boolean} True if the string contains URI-encoded characters, false otherwise.\n * @example\n * ```typescript\n * const str1 = \"foo%3Fbar\";\n * const hasEncodedChars = hasUriEncodedChars(str1); // returns true\n * ```\n */\nexport function hasUriEncodedChars(inputString: string): boolean {\n  // This regex looks for a percent sign followed by two hexadecimal digits\n  const pattern = /%[0-9A-Fa-f]{2}/\n  return pattern.test(inputString)\n}\n", "import { last } from './utils'\nimport type { MatchLocation } from './RouterProvider'\nimport type { AnyPathParams } from './route'\n\nexport interface Segment {\n  type: 'pathname' | 'param' | 'wildcard'\n  value: string\n}\n\nexport function joinPaths(paths: Array<string | undefined>) {\n  return cleanPath(\n    paths\n      .filter((val) => {\n        return val !== undefined\n      })\n      .join('/'),\n  )\n}\n\nexport function cleanPath(path: string) {\n  // remove double slashes\n  return path.replace(/\\/{2,}/g, '/')\n}\n\nexport function trimPathLeft(path: string) {\n  return path === '/' ? path : path.replace(/^\\/{1,}/, '')\n}\n\nexport function trimPathRight(path: string) {\n  return path === '/' ? path : path.replace(/\\/{1,}$/, '')\n}\n\nexport function trimPath(path: string) {\n  return trimPathRight(trimPathLeft(path))\n}\n\nexport function removeTrailingSlash(value: string, basepath: string): string {\n  if (value?.endsWith('/') && value !== '/' && value !== `${basepath}/`) {\n    return value.slice(0, -1)\n  }\n  return value\n}\n\n// intended to only compare path name\n// see the usage in the isActive under useLinkProps\n// /sample/path1 = /sample/path1/\n// /sample/path1/some <> /sample/path1\nexport function exactPathTest(\n  pathName1: string,\n  pathName2: string,\n  basepath: string,\n): boolean {\n  return (\n    removeTrailingSlash(pathName1, basepath) ===\n    removeTrailingSlash(pathName2, basepath)\n  )\n}\n\n// When resolving relative paths, we treat all paths as if they are trailing slash\n// documents. All trailing slashes are removed after the path is resolved.\n// Here are a few examples:\n//\n// /a/b/c + ./d = /a/b/c/d\n// /a/b/c + ../d = /a/b/d\n// /a/b/c + ./d/ = /a/b/c/d\n// /a/b/c + ../d/ = /a/b/d\n// /a/b/c + ./ = /a/b/c\n//\n// Absolute paths that start with `/` short circuit the resolution process to the root\n// path.\n//\n// Here are some examples:\n//\n// /a/b/c + /d = /d\n// /a/b/c + /d/ = /d\n// /a/b/c + / = /\n//\n// Non-.-prefixed paths are still treated as relative paths, resolved like `./`\n//\n// Here are some examples:\n//\n// /a/b/c + d = /a/b/c/d\n// /a/b/c + d/ = /a/b/c/d\n// /a/b/c + d/e = /a/b/c/d/e\ninterface ResolvePathOptions {\n  basepath: string\n  base: string\n  to: string\n  trailingSlash?: 'always' | 'never' | 'preserve'\n  caseSensitive?: boolean\n}\n\nexport function resolvePath({\n  basepath,\n  base,\n  to,\n  trailingSlash = 'never',\n  caseSensitive,\n}: ResolvePathOptions) {\n  base = removeBasepath(basepath, base, caseSensitive)\n  to = removeBasepath(basepath, to, caseSensitive)\n\n  let baseSegments = parsePathname(base)\n  const toSegments = parsePathname(to)\n\n  if (baseSegments.length > 1 && last(baseSegments)?.value === '/') {\n    baseSegments.pop()\n  }\n\n  toSegments.forEach((toSegment, index) => {\n    if (toSegment.value === '/') {\n      if (!index) {\n        // Leading slash\n        baseSegments = [toSegment]\n      } else if (index === toSegments.length - 1) {\n        // Trailing Slash\n        baseSegments.push(toSegment)\n      } else {\n        // ignore inter-slashes\n      }\n    } else if (toSegment.value === '..') {\n      baseSegments.pop()\n    } else if (toSegment.value === '.') {\n      // ignore\n    } else {\n      baseSegments.push(toSegment)\n    }\n  })\n\n  if (baseSegments.length > 1) {\n    if (last(baseSegments)?.value === '/') {\n      if (trailingSlash === 'never') {\n        baseSegments.pop()\n      }\n    } else if (trailingSlash === 'always') {\n      baseSegments.push({ type: 'pathname', value: '/' })\n    }\n  }\n\n  const joined = joinPaths([basepath, ...baseSegments.map((d) => d.value)])\n  return cleanPath(joined)\n}\n\nexport function parsePathname(pathname?: string): Array<Segment> {\n  if (!pathname) {\n    return []\n  }\n\n  pathname = cleanPath(pathname)\n\n  const segments: Array<Segment> = []\n\n  if (pathname.slice(0, 1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!pathname) {\n    return segments\n  }\n\n  // Remove empty segments and '.' segments\n  const split = pathname.split('/').filter(Boolean)\n\n  segments.push(\n    ...split.map((part): Segment => {\n      if (part === '$' || part === '*') {\n        return {\n          type: 'wildcard',\n          value: part,\n        }\n      }\n\n      if (part.charAt(0) === '$') {\n        return {\n          type: 'param',\n          value: part,\n        }\n      }\n\n      return {\n        type: 'pathname',\n        value: part.includes('%25')\n          ? part\n              .split('%25')\n              .map((segment) => decodeURI(segment))\n              .join('%25')\n          : decodeURI(part),\n      }\n    }),\n  )\n\n  if (pathname.slice(-1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  return segments\n}\n\ninterface InterpolatePathOptions {\n  path?: string\n  params: Record<string, unknown>\n  leaveWildcards?: boolean\n  leaveParams?: boolean\n  // Map of encoded chars to decoded chars (e.g. '%40' -> '@') that should remain decoded in path params\n  decodeCharMap?: Map<string, string>\n}\n\ntype InterPolatePathResult = {\n  interpolatedPath: string\n  usedParams: Record<string, unknown>\n}\nexport function interpolatePath({\n  path,\n  params,\n  leaveWildcards,\n  leaveParams,\n  decodeCharMap,\n}: InterpolatePathOptions): InterPolatePathResult {\n  const interpolatedPathSegments = parsePathname(path)\n\n  function encodeParam(key: string): any {\n    const value = params[key]\n    const isValueString = typeof value === 'string'\n\n    if (['*', '_splat'].includes(key)) {\n      // the splat/catch-all routes shouldn't have the '/' encoded out\n      return isValueString ? encodeURI(value) : value\n    } else {\n      return isValueString ? encodePathParam(value, decodeCharMap) : value\n    }\n  }\n\n  const usedParams: Record<string, unknown> = {}\n  const interpolatedPath = joinPaths(\n    interpolatedPathSegments.map((segment) => {\n      if (segment.type === 'wildcard') {\n        usedParams._splat = params._splat\n        const value = encodeParam('_splat')\n        if (leaveWildcards) return `${segment.value}${value ?? ''}`\n        return value\n      }\n\n      if (segment.type === 'param') {\n        const key = segment.value.substring(1)\n        usedParams[key] = params[key]\n        if (leaveParams) {\n          const value = encodeParam(segment.value)\n          return `${segment.value}${value ?? ''}`\n        }\n        return encodeParam(key) ?? 'undefined'\n      }\n\n      return segment.value\n    }),\n  )\n  return { usedParams, interpolatedPath }\n}\n\nfunction encodePathParam(value: string, decodeCharMap?: Map<string, string>) {\n  let encoded = encodeURIComponent(value)\n  if (decodeCharMap) {\n    for (const [encodedChar, char] of decodeCharMap) {\n      encoded = encoded.replaceAll(encodedChar, char)\n    }\n  }\n  return encoded\n}\n\nexport function matchPathname(\n  basepath: string,\n  currentPathname: string,\n  matchLocation: Pick<MatchLocation, 'to' | 'fuzzy' | 'caseSensitive'>,\n): AnyPathParams | undefined {\n  const pathParams = matchByPath(basepath, currentPathname, matchLocation)\n  // const searchMatched = matchBySearch(location.search, matchLocation)\n\n  if (matchLocation.to && !pathParams) {\n    return\n  }\n\n  return pathParams ?? {}\n}\n\nexport function removeBasepath(\n  basepath: string,\n  pathname: string,\n  caseSensitive: boolean = false,\n) {\n  // normalize basepath and pathname for case-insensitive comparison if needed\n  const normalizedBasepath = caseSensitive ? basepath : basepath.toLowerCase()\n  const normalizedPathname = caseSensitive ? pathname : pathname.toLowerCase()\n\n  switch (true) {\n    // default behaviour is to serve app from the root - pathname\n    // left untouched\n    case normalizedBasepath === '/':\n      return pathname\n\n    // shortcut for removing the basepath if it matches the pathname\n    case normalizedPathname === normalizedBasepath:\n      return ''\n\n    // in case pathname is shorter than basepath - there is\n    // nothing to remove\n    case pathname.length < basepath.length:\n      return pathname\n\n    // avoid matching partial segments - strict equality handled\n    // earlier, otherwise, basepath separated from pathname with\n    // separator, therefore lack of separator means partial\n    // segment match (`/app` should not match `/application`)\n    case normalizedPathname[normalizedBasepath.length] !== '/':\n      return pathname\n\n    // remove the basepath from the pathname if it starts with it\n    case normalizedPathname.startsWith(normalizedBasepath):\n      return pathname.slice(basepath.length)\n\n    // otherwise, return the pathname as is\n    default:\n      return pathname\n  }\n}\n\nexport function matchByPath(\n  basepath: string,\n  from: string,\n  matchLocation: Pick<MatchLocation, 'to' | 'caseSensitive' | 'fuzzy'>,\n): Record<string, string> | undefined {\n  // check basepath first\n  if (basepath !== '/' && !from.startsWith(basepath)) {\n    return undefined\n  }\n  // Remove the base path from the pathname\n  from = removeBasepath(basepath, from, matchLocation.caseSensitive)\n  // Default to to $ (wildcard)\n  const to = removeBasepath(\n    basepath,\n    `${matchLocation.to ?? '$'}`,\n    matchLocation.caseSensitive,\n  )\n\n  // Parse the from and to\n  const baseSegments = parsePathname(from)\n  const routeSegments = parsePathname(to)\n\n  if (!from.startsWith('/')) {\n    baseSegments.unshift({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!to.startsWith('/')) {\n    routeSegments.unshift({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  const params: Record<string, string> = {}\n\n  const isMatch = (() => {\n    for (\n      let i = 0;\n      i < Math.max(baseSegments.length, routeSegments.length);\n      i++\n    ) {\n      const baseSegment = baseSegments[i]\n      const routeSegment = routeSegments[i]\n\n      const isLastBaseSegment = i >= baseSegments.length - 1\n      const isLastRouteSegment = i >= routeSegments.length - 1\n\n      if (routeSegment) {\n        if (routeSegment.type === 'wildcard') {\n          const _splat = decodeURI(\n            joinPaths(baseSegments.slice(i).map((d) => d.value)),\n          )\n          // TODO: Deprecate *\n          params['*'] = _splat\n          params['_splat'] = _splat\n          return true\n        }\n\n        if (routeSegment.type === 'pathname') {\n          if (routeSegment.value === '/' && !baseSegment?.value) {\n            return true\n          }\n\n          if (baseSegment) {\n            if (matchLocation.caseSensitive) {\n              if (routeSegment.value !== baseSegment.value) {\n                return false\n              }\n            } else if (\n              routeSegment.value.toLowerCase() !==\n              baseSegment.value.toLowerCase()\n            ) {\n              return false\n            }\n          }\n        }\n\n        if (!baseSegment) {\n          return false\n        }\n\n        if (routeSegment.type === 'param') {\n          if (baseSegment.value === '/') {\n            return false\n          }\n          if (baseSegment.value.charAt(0) !== '$') {\n            params[routeSegment.value.substring(1)] = decodeURIComponent(\n              baseSegment.value,\n            )\n          }\n        }\n      }\n\n      if (!isLastBaseSegment && isLastRouteSegment) {\n        params['**'] = joinPaths(baseSegments.slice(i + 1).map((d) => d.value))\n        return !!matchLocation.fuzzy && routeSegment?.value !== '/'\n      }\n    }\n\n    return true\n  })()\n\n  return isMatch ? params : undefined\n}\n", "import type { RouteIds } from './routeInfo'\nimport type { RegisteredRouter } from './router'\n\nexport type NotFoundError = {\n  /**\n    @deprecated\n    Use `routeId: rootRouteId` instead\n  */\n  global?: boolean\n  /**\n    @private\n    Do not use this. It's used internally to indicate a path matching error\n  */\n  _global?: boolean\n  data?: any\n  throw?: boolean\n  routeId?: RouteIds<RegisteredRouter['routeTree']>\n  headers?: HeadersInit\n}\n\nexport function notFound(options: NotFoundError = {}) {\n  ;(options as any).isNotFound = true\n  if (options.throw) throw options\n  return options\n}\n\nexport function isNotFound(obj: any): obj is NotFoundError {\n  return !!obj?.isNotFound\n}\n", "/**\n * Program is a reimplementation of the `qss` package:\n * Copyright (c) Luke Edwards luke.edwards05@gmail.com, MIT License\n * https://github.com/lukeed/qss/blob/master/license.md\n *\n * This reimplementation uses modern browser APIs\n * (namely URLSearchParams) and TypeScript while still\n * maintaining the original functionality and interface.\n */\nimport { hasUriEncodedChars } from './utils'\n\n/**\n * Encodes an object into a query string.\n * @param obj - The object to encode into a query string.\n * @param [pfx] - An optional prefix to add before the query string.\n * @returns The encoded query string.\n * @example\n * ```\n * // Example input: encode({ token: 'foo', key: 'value' })\n * // Expected output: \"token=foo&key=value\"\n * ```\n */\nexport function encode(obj: any, pfx?: string) {\n  const normalizedObject = Object.entries(obj).flatMap(([key, value]) => {\n    if (Array.isArray(value)) {\n      return value.map((v) => [key, String(v)])\n    } else {\n      return [[key, String(value)]]\n    }\n  })\n\n  const searchParams = new URLSearchParams(normalizedObject)\n\n  return (pfx || '') + searchParams.toString()\n}\n\n/**\n * Converts a string value to its appropriate type (string, number, boolean).\n * @param mix - The string value to convert.\n * @returns The converted value.\n * @example\n * // Example input: toValue(\"123\")\n * // Expected output: 123\n */\nfunction toValue(mix: any) {\n  if (!mix) return ''\n  const str = hasUriEncodedChars(mix)\n    ? decodeURIComponent(mix)\n    : decodeURIComponent(encodeURIComponent(mix))\n\n  if (str === 'false') return false\n  if (str === 'true') return true\n  return +str * 0 === 0 && +str + '' === str ? +str : str\n}\n\n/**\n * Decodes a query string into an object.\n * @param str - The query string to decode.\n * @param [pfx] - An optional prefix to filter out from the query string.\n * @returns The decoded key-value pairs in an object format.\n * @example\n * // Example input: decode(\"token=foo&key=value\")\n * // Expected output: { \"token\": \"foo\", \"key\": \"value\" }\n */\nexport function decode(str: any, pfx?: string): any {\n  const searchParamsPart = pfx ? str.slice(pfx.length) : str\n  const searchParams = new URLSearchParams(searchParamsPart)\n\n  const entries = [...searchParams.entries()]\n\n  return entries.reduce<Record<string, unknown>>((acc, [key, value]) => {\n    const previousValue = acc[key]\n    if (previousValue == null) {\n      acc[key] = toValue(value)\n    } else {\n      acc[key] = Array.isArray(previousValue)\n        ? [...previousValue, toValue(value)]\n        : [previousValue, toValue(value)]\n    }\n\n    return acc\n  }, {})\n}\n", "import { decode, encode } from './qss'\nimport type { AnySchema } from './validators'\n\nexport const defaultParseSearch = parseSearchWith(JSON.parse)\nexport const defaultStringifySearch = stringifySearchWith(\n  JSON.stringify,\n  JSON.parse,\n)\n\nexport function parseSearchWith(parser: (str: string) => any) {\n  return (searchStr: string): AnySchema => {\n    if (searchStr.substring(0, 1) === '?') {\n      searchStr = searchStr.substring(1)\n    }\n\n    const query: Record<string, unknown> = decode(searchStr)\n\n    // Try to parse any query params that might be json\n    for (const key in query) {\n      const value = query[key]\n      if (typeof value === 'string') {\n        try {\n          query[key] = parser(value)\n        } catch (err) {\n          //\n        }\n      }\n    }\n\n    return query\n  }\n}\n\nexport function stringifySearchWith(\n  stringify: (search: any) => string,\n  parser?: (str: string) => any,\n) {\n  function stringifyValue(val: any) {\n    if (typeof val === 'object' && val !== null) {\n      try {\n        return stringify(val)\n      } catch (err) {\n        // silent\n      }\n    } else if (typeof val === 'string' && typeof parser === 'function') {\n      try {\n        // Check if it's a valid parseable string.\n        // If it is, then stringify it again.\n        parser(val)\n        return stringify(val)\n      } catch (err) {\n        // silent\n      }\n    }\n    return val\n  }\n\n  return (search: Record<string, any>) => {\n    search = { ...search }\n\n    Object.keys(search).forEach((key) => {\n      const val = search[key]\n      if (typeof val === 'undefined' || val === undefined) {\n        delete search[key]\n      } else {\n        search[key] = stringifyValue(val)\n      }\n    })\n\n    const searchStr = encode(search as Record<string, string>).toString()\n\n    return searchStr ? `?${searchStr}` : ''\n  }\n}\n\nexport type SearchSerializer = (searchObj: Record<string, any>) => string\nexport type SearchParser = (searchStr: string) => Record<string, any>\n", "export const rootRouteId = '__root__'\nexport type RootRouteId = typeof rootRouteId\n", "import type { NavigateOptions } from './link'\nimport type { RoutePaths } from './routeInfo'\nimport type { AnyRouter, RegisteredRouter } from './router'\nimport type { PickAsRequired } from './utils'\n\nexport type AnyRedirect = Redirect<any, any, any, any, any>\n\n/**\n * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType)\n */\nexport type Redirect<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> | string = '/',\n  TTo extends string | undefined = '.',\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> | string = TFrom,\n  TMaskTo extends string = '.',\n> = {\n  href?: string\n  /**\n   * @deprecated Use `statusCode` instead\n   **/\n  code?: number\n  /**\n   * The HTTP status code to use when redirecting.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType#statuscode-property)\n   */\n  statusCode?: number\n  /**\n   * If provided, will throw the redirect object instead of returning it. This can be useful in places where `throwing` in a function might cause it to have a return type of `never`. In that case, you can use `redirect({ throw: true })` to throw the redirect object instead of returning it.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType#throw-property)\n   */\n  throw?: any\n  /**\n   * The HTTP headers to use when redirecting.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType#headers-property)\n   */\n  headers?: HeadersInit\n} & NavigateOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>\n\nexport type ResolvedRedirect<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> = TFrom,\n  TMaskTo extends string = '',\n> = PickAsRequired<\n  Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>,\n  'code' | 'statusCode' | 'headers'\n> & {\n  href: string\n}\n\nexport function redirect<\n  TRouter extends RegisteredRouter,\n  const TTo extends string | undefined,\n  const TFrom extends string = string,\n  const TMaskFrom extends string = TFrom,\n  const TMaskTo extends string = '',\n>(\n  opts: Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>,\n): Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo> {\n  ;(opts as any).isRedirect = true\n  opts.statusCode = opts.statusCode || opts.code || 307\n  opts.headers = opts.headers || {}\n  if (!opts.reloadDocument) {\n    opts.reloadDocument = false\n    try {\n      new URL(`${opts.href}`)\n      opts.reloadDocument = true\n    } catch {}\n  }\n\n  if (opts.throw) {\n    throw opts\n  }\n\n  return opts\n}\n\nexport function isRedirect(obj: any): obj is AnyRedirect {\n  return !!obj?.isRedirect\n}\n\nexport function isResolvedRedirect(obj: any): obj is ResolvedRedirect {\n  return !!obj?.isRedirect && obj.href\n}\n", "import { Derived } from \"./derived.js\";\nconst __storeToDerived = /* @__PURE__ */new WeakMap();\nconst __derivedToStore = /* @__PURE__ */new WeakMap();\nconst __depsThatHaveWrittenThisTick = {\n  current: []\n};\nlet __isFlushing = false;\nlet __batchDepth = 0;\nconst __pendingUpdates = /* @__PURE__ */new Set();\nconst __initialBatchValues = /* @__PURE__ */new Map();\nfunction __flush_internals(relatedVals) {\n  const sorted = Array.from(relatedVals).sort((a, b) => {\n    if (a instanceof Derived && a.options.deps.includes(b)) return 1;\n    if (b instanceof Derived && b.options.deps.includes(a)) return -1;\n    return 0;\n  });\n  for (const derived of sorted) {\n    if (__depsThatHaveWrittenThisTick.current.includes(derived)) {\n      continue;\n    }\n    __depsThatHaveWrittenThisTick.current.push(derived);\n    derived.recompute();\n    const stores = __derivedToStore.get(derived);\n    if (stores) {\n      for (const store of stores) {\n        const relatedLinkedDerivedVals = __storeToDerived.get(store);\n        if (!relatedLinkedDerivedVals) continue;\n        __flush_internals(relatedLinkedDerivedVals);\n      }\n    }\n  }\n}\nfunction __notifyListeners(store) {\n  store.listeners.forEach(listener => listener({\n    prevVal: store.prevState,\n    currentVal: store.state\n  }));\n}\nfunction __notifyDerivedListeners(derived) {\n  derived.listeners.forEach(listener => listener({\n    prevVal: derived.prevState,\n    currentVal: derived.state\n  }));\n}\nfunction __flush(store) {\n  if (__batchDepth > 0 && !__initialBatchValues.has(store)) {\n    __initialBatchValues.set(store, store.prevState);\n  }\n  __pendingUpdates.add(store);\n  if (__batchDepth > 0) return;\n  if (__isFlushing) return;\n  try {\n    __isFlushing = true;\n    while (__pendingUpdates.size > 0) {\n      const stores = Array.from(__pendingUpdates);\n      __pendingUpdates.clear();\n      for (const store2 of stores) {\n        const prevState = __initialBatchValues.get(store2) ?? store2.prevState;\n        store2.prevState = prevState;\n        __notifyListeners(store2);\n      }\n      for (const store2 of stores) {\n        const derivedVals = __storeToDerived.get(store2);\n        if (!derivedVals) continue;\n        __depsThatHaveWrittenThisTick.current.push(store2);\n        __flush_internals(derivedVals);\n      }\n      for (const store2 of stores) {\n        const derivedVals = __storeToDerived.get(store2);\n        if (!derivedVals) continue;\n        for (const derived of derivedVals) {\n          __notifyDerivedListeners(derived);\n        }\n      }\n    }\n  } finally {\n    __isFlushing = false;\n    __depsThatHaveWrittenThisTick.current = [];\n    __initialBatchValues.clear();\n  }\n}\nfunction batch(fn) {\n  __batchDepth++;\n  try {\n    fn();\n  } finally {\n    __batchDepth--;\n    if (__batchDepth === 0) {\n      const pendingUpdateToFlush = Array.from(__pendingUpdates)[0];\n      if (pendingUpdateToFlush) {\n        __flush(pendingUpdateToFlush);\n      }\n    }\n  }\n}\nexport { __depsThatHaveWrittenThisTick, __derivedToStore, __flush, __storeToDerived, batch };\n", "import { __flush } from \"./scheduler.js\";\nclass Store {\n  constructor(initialState, options) {\n    this.listeners = /* @__PURE__ */new Set();\n    this.subscribe = listener => {\n      var _a, _b;\n      this.listeners.add(listener);\n      const unsub = (_b = (_a = this.options) == null ? void 0 : _a.onSubscribe) == null ? void 0 : _b.call(_a, listener, this);\n      return () => {\n        this.listeners.delete(listener);\n        unsub == null ? void 0 : unsub();\n      };\n    };\n    this.setState = updater => {\n      var _a, _b, _c;\n      this.prevState = this.state;\n      this.state = ((_a = this.options) == null ? void 0 : _a.updateFn) ? this.options.updateFn(this.prevState)(updater) : updater(this.prevState);\n      (_c = (_b = this.options) == null ? void 0 : _b.onUpdate) == null ? void 0 : _c.call(_b);\n      __flush(this);\n    };\n    this.prevState = initialState;\n    this.state = initialState;\n    this.options = options;\n  }\n}\nexport { Store };\n", "import { Store } from \"./store.js\";\nimport { __storeToDerived, __derivedToStore } from \"./scheduler.js\";\nclass Derived {\n  constructor(options) {\n    this.listeners = /* @__PURE__ */new Set();\n    this._subscriptions = [];\n    this.lastSeenDepValues = [];\n    this.getDepVals = () => {\n      const prevDepVals = [];\n      const currDepVals = [];\n      for (const dep of this.options.deps) {\n        prevDepVals.push(dep.prevState);\n        currDepVals.push(dep.state);\n      }\n      this.lastSeenDepValues = currDepVals;\n      return {\n        prevDepVals,\n        currDepVals,\n        prevVal: this.prevState ?? void 0\n      };\n    };\n    this.recompute = () => {\n      var _a, _b;\n      this.prevState = this.state;\n      const {\n        prevDepVals,\n        currDepVals,\n        prevVal\n      } = this.getDepVals();\n      this.state = this.options.fn({\n        prevDepVals,\n        currDepVals,\n        prevVal\n      });\n      (_b = (_a = this.options).onUpdate) == null ? void 0 : _b.call(_a);\n    };\n    this.checkIfRecalculationNeededDeeply = () => {\n      for (const dep of this.options.deps) {\n        if (dep instanceof Derived) {\n          dep.checkIfRecalculationNeededDeeply();\n        }\n      }\n      let shouldRecompute = false;\n      const lastSeenDepValues = this.lastSeenDepValues;\n      const {\n        currDepVals\n      } = this.getDepVals();\n      for (let i = 0; i < currDepVals.length; i++) {\n        if (currDepVals[i] !== lastSeenDepValues[i]) {\n          shouldRecompute = true;\n          break;\n        }\n      }\n      if (shouldRecompute) {\n        this.recompute();\n      }\n    };\n    this.mount = () => {\n      this.registerOnGraph();\n      this.checkIfRecalculationNeededDeeply();\n      return () => {\n        this.unregisterFromGraph();\n        for (const cleanup of this._subscriptions) {\n          cleanup();\n        }\n      };\n    };\n    this.subscribe = listener => {\n      var _a, _b;\n      this.listeners.add(listener);\n      const unsub = (_b = (_a = this.options).onSubscribe) == null ? void 0 : _b.call(_a, listener, this);\n      return () => {\n        this.listeners.delete(listener);\n        unsub == null ? void 0 : unsub();\n      };\n    };\n    this.options = options;\n    this.state = options.fn({\n      prevDepVals: void 0,\n      prevVal: void 0,\n      currDepVals: this.getDepVals().currDepVals\n    });\n  }\n  registerOnGraph(deps = this.options.deps) {\n    for (const dep of deps) {\n      if (dep instanceof Derived) {\n        dep.registerOnGraph();\n        this.registerOnGraph(dep.options.deps);\n      } else if (dep instanceof Store) {\n        let relatedLinkedDerivedVals = __storeToDerived.get(dep);\n        if (!relatedLinkedDerivedVals) {\n          relatedLinkedDerivedVals = /* @__PURE__ */new Set();\n          __storeToDerived.set(dep, relatedLinkedDerivedVals);\n        }\n        relatedLinkedDerivedVals.add(this);\n        let relatedStores = __derivedToStore.get(this);\n        if (!relatedStores) {\n          relatedStores = /* @__PURE__ */new Set();\n          __derivedToStore.set(this, relatedStores);\n        }\n        relatedStores.add(dep);\n      }\n    }\n  }\n  unregisterFromGraph(deps = this.options.deps) {\n    for (const dep of deps) {\n      if (dep instanceof Derived) {\n        this.unregisterFromGraph(dep.options.deps);\n      } else if (dep instanceof Store) {\n        const relatedLinkedDerivedVals = __storeToDerived.get(dep);\n        if (relatedLinkedDerivedVals) {\n          relatedLinkedDerivedVals.delete(this);\n        }\n        const relatedStores = __derivedToStore.get(this);\n        if (relatedStores) {\n          relatedStores.delete(dep);\n        }\n      }\n    }\n  }\n}\nexport { Derived };\n", "import { functionalUpdate } from './utils'\nimport type { AnyRouter } from './router'\nimport type { ParsedLocation } from './location'\nimport type { NonNullableUpdater } from './utils'\n\nexport type ScrollRestorationEntry = { scrollX: number; scrollY: number }\n\nexport type ScrollRestorationByElement = Record<string, ScrollRestorationEntry>\n\nexport type ScrollRestorationByKey = Record<string, ScrollRestorationByElement>\n\nexport type ScrollRestorationCache = {\n  state: ScrollRestorationByKey\n  set: (updater: NonNullableUpdater<ScrollRestorationByKey>) => void\n}\nexport type ScrollRestorationOptions = {\n  getKey?: (location: ParsedLocation) => string\n  scrollBehavior?: ScrollToOptions['behavior']\n}\n\nexport const storageKey = 'tsr-scroll-restoration-v1_3'\nlet sessionsStorage = false\ntry {\n  sessionsStorage =\n    typeof window !== 'undefined' && typeof window.sessionStorage === 'object'\n} catch {}\nconst throttle = (fn: (...args: Array<any>) => void, wait: number) => {\n  let timeout: any\n  return (...args: Array<any>) => {\n    if (!timeout) {\n      timeout = setTimeout(() => {\n        fn(...args)\n        timeout = null\n      }, wait)\n    }\n  }\n}\nexport const scrollRestorationCache: ScrollRestorationCache = sessionsStorage\n  ? (() => {\n      const state: ScrollRestorationByKey =\n        JSON.parse(window.sessionStorage.getItem(storageKey) || 'null') || {}\n\n      return {\n        state,\n        // This setter is simply to make sure that we set the sessionStorage right\n        // after the state is updated. It doesn't necessarily need to be a functional\n        // update.\n        set: (updater) => (\n          (scrollRestorationCache.state =\n            functionalUpdate(updater, scrollRestorationCache.state) ||\n            scrollRestorationCache.state),\n          window.sessionStorage.setItem(\n            storageKey,\n            JSON.stringify(scrollRestorationCache.state),\n          )\n        ),\n      }\n    })()\n  : (undefined as any)\n/**\n * The default `getKey` function for `useScrollRestoration`.\n * It returns the `key` from the location state or the `href` of the location.\n *\n * The `location.href` is used as a fallback to support the use case where the location state is not available like the initial render.\n */\n\nexport const defaultGetScrollRestorationKey = (location: ParsedLocation) => {\n  return location.state.key! || location.href\n}\n\nexport function getCssSelector(el: any): string {\n  const path = []\n  let parent\n  while ((parent = el.parentNode)) {\n    path.unshift(\n      `${el.tagName}:nth-child(${([].indexOf as any).call(parent.children, el) + 1})`,\n    )\n    el = parent\n  }\n  return `${path.join(' > ')}`.toLowerCase()\n}\n\nlet ignoreScroll = false\n\n// NOTE: This function must remain pure and not use any outside variables\n// unless they are passed in as arguments. Why? Because we need to be able to\n// toString() it into a script tag to execute as early as possible in the browser\n// during SSR. Additionally, we also call it from within the router lifecycle\nexport function restoreScroll(\n  storageKey: string,\n  key: string | undefined,\n  behavior: ScrollToOptions['behavior'] | undefined,\n  shouldScrollRestoration: boolean | undefined,\n  scrollToTopSelectors: Array<string> | undefined,\n) {\n  let byKey: ScrollRestorationByKey\n\n  try {\n    byKey = JSON.parse(sessionStorage.getItem(storageKey) || '{}')\n  } catch (error: any) {\n    console.error(error)\n    return\n  }\n\n  const resolvedKey = key || window.history.state?.key\n  const elementEntries = byKey[resolvedKey]\n\n  //\n  ignoreScroll = true\n\n  //\n  ;(() => {\n    // If we have a cached entry for this location state,\n    // we always need to prefer that over the hash scroll.\n    if (shouldScrollRestoration && elementEntries) {\n      for (const elementSelector in elementEntries) {\n        const entry = elementEntries[elementSelector]!\n        if (elementSelector === 'window') {\n          window.scrollTo({\n            top: entry.scrollY,\n            left: entry.scrollX,\n            behavior,\n          })\n        } else if (elementSelector) {\n          const element = document.querySelector(elementSelector)\n          if (element) {\n            element.scrollLeft = entry.scrollX\n            element.scrollTop = entry.scrollY\n          }\n        }\n      }\n\n      return\n    }\n\n    // If we don't have a cached entry for the hash,\n    // Which means we've never seen this location before,\n    // we need to check if there is a hash in the URL.\n    // If there is, we need to scroll it's ID into view.\n    const hash = window.location.hash.split('#')[1]\n\n    if (hash) {\n      const hashScrollIntoViewOptions =\n        (window.history.state || {}).__hashScrollIntoViewOptions ?? true\n\n      if (hashScrollIntoViewOptions) {\n        const el = document.getElementById(hash)\n        if (el) {\n          el.scrollIntoView(hashScrollIntoViewOptions)\n        }\n      }\n\n      return\n    }\n\n    // If there is no cached entry for the hash and there is no hash in the URL,\n    // we need to scroll to the top of the page for every scrollToTop element\n    ;[\n      'window',\n      ...(scrollToTopSelectors?.filter((d) => d !== 'window') ?? []),\n    ].forEach((selector) => {\n      const element =\n        selector === 'window' ? window : document.querySelector(selector)\n      if (element) {\n        element.scrollTo({\n          top: 0,\n          left: 0,\n          behavior,\n        })\n      }\n    })\n  })()\n\n  //\n  ignoreScroll = false\n}\n\nexport function setupScrollRestoration(router: AnyRouter, force?: boolean) {\n  const shouldScrollRestoration =\n    force ?? router.options.scrollRestoration ?? false\n\n  if (shouldScrollRestoration) {\n    router.isScrollRestoring = true\n  }\n\n  if (typeof document === 'undefined' || router.isScrollRestorationSetup) {\n    return\n  }\n\n  router.isScrollRestorationSetup = true\n\n  //\n  ignoreScroll = false\n\n  const getKey =\n    router.options.getScrollRestorationKey || defaultGetScrollRestorationKey\n\n  window.history.scrollRestoration = 'manual'\n\n  // // Create a MutationObserver to monitor DOM changes\n  // const mutationObserver = new MutationObserver(() => {\n  //   ;ignoreScroll = true\n  //   requestAnimationFrame(() => {\n  //     ;ignoreScroll = false\n\n  //     // Attempt to restore scroll position on each dom\n  //     // mutation until the user scrolls. We do this\n  //     // because dynamic content may come in at different\n  //     // ticks after the initial render and we want to\n  //     // keep up with that content as much as possible.\n  //     // As soon as the user scrolls, we no longer need\n  //     // to attempt router.\n  //     // console.log('mutation observer restoreScroll')\n  //     restoreScroll(\n  //       storageKey,\n  //       getKey(router.state.location),\n  //       router.options.scrollRestorationBehavior,\n  //     )\n  //   })\n  // })\n\n  // const observeDom = () => {\n  //   // Observe changes to the entire document\n  //   mutationObserver.observe(document, {\n  //     childList: true, // Detect added or removed child nodes\n  //     subtree: true, // Monitor all descendants\n  //     characterData: true, // Detect text content changes\n  //   })\n  // }\n\n  // const unobserveDom = () => {\n  //   mutationObserver.disconnect()\n  // }\n\n  // observeDom()\n\n  const onScroll = (event: Event) => {\n    // unobserveDom()\n\n    if (ignoreScroll || !router.isScrollRestoring) {\n      return\n    }\n\n    let elementSelector = ''\n\n    if (event.target === document || event.target === window) {\n      elementSelector = 'window'\n    } else {\n      const attrId = (event.target as Element).getAttribute(\n        'data-scroll-restoration-id',\n      )\n\n      if (attrId) {\n        elementSelector = `[data-scroll-restoration-id=\"${attrId}\"]`\n      } else {\n        elementSelector = getCssSelector(event.target)\n      }\n    }\n\n    const restoreKey = getKey(router.state.location)\n\n    scrollRestorationCache.set((state) => {\n      const keyEntry = (state[restoreKey] =\n        state[restoreKey] || ({} as ScrollRestorationByElement))\n\n      const elementEntry = (keyEntry[elementSelector] =\n        keyEntry[elementSelector] || ({} as ScrollRestorationEntry))\n\n      if (elementSelector === 'window') {\n        elementEntry.scrollX = window.scrollX || 0\n        elementEntry.scrollY = window.scrollY || 0\n      } else if (elementSelector) {\n        const element = document.querySelector(elementSelector)\n        if (element) {\n          elementEntry.scrollX = element.scrollLeft || 0\n          elementEntry.scrollY = element.scrollTop || 0\n        }\n      }\n\n      return state\n    })\n  }\n\n  // Throttle the scroll event to avoid excessive updates\n  if (typeof document !== 'undefined') {\n    document.addEventListener('scroll', throttle(onScroll, 100), true)\n  }\n\n  router.subscribe('onRendered', (event) => {\n    // unobserveDom()\n\n    const cacheKey = getKey(event.toLocation)\n\n    // If the user doesn't want to restore the scroll position,\n    // we don't need to do anything.\n    if (!router.resetNextScroll) {\n      router.resetNextScroll = true\n      return\n    }\n\n    restoreScroll(\n      storageKey,\n      cacheKey,\n      router.options.scrollRestorationBehavior || undefined,\n      router.isScrollRestoring || undefined,\n      router.options.scrollToTopSelectors || undefined,\n    )\n\n    if (router.isScrollRestoring) {\n      // Mark the location as having been seen\n      scrollRestorationCache.set((state) => {\n        state[cacheKey] = state[cacheKey] || ({} as ScrollRestorationByElement)\n\n        return state\n      })\n    }\n  })\n}\n\n/**\n * @internal\n * Handles hash-based scrolling after navigation completes.\n * To be used in framework-specific <Transitioner> components during the onResolved event.\n *\n * Provides hash scrolling for programmatic navigation when default browser handling is prevented.\n * @param router The router instance containing current location and state\n */\nexport function handleHashScroll(router: AnyRouter) {\n  if (typeof document !== 'undefined' && (document as any).querySelector) {\n    const hashScrollIntoViewOptions =\n      router.state.location.state.__hashScrollIntoViewOptions ?? true\n\n    if (hashScrollIntoViewOptions && router.state.location.hash !== '') {\n      const el = document.getElementById(router.state.location.hash)\n      if (el) {\n        el.scrollIntoView(hashScrollIntoViewOptions)\n      }\n    }\n  }\n}\n", "import { Store, batch } from '@tanstack/store'\nimport {\n  createBrowserHistory,\n  createMemoryHistory,\n  parseHref,\n} from '@tanstack/history'\nimport invariant from 'tiny-invariant'\nimport {\n  createControlledPromise,\n  deepEqual,\n  functionalUpdate,\n  last,\n  pick,\n  replaceEqualDeep,\n} from './utils'\nimport {\n  cleanPath,\n  interpolatePath,\n  joinPaths,\n  matchPathname,\n  parsePathname,\n  resolvePath,\n  trimPath,\n  trimPathLeft,\n  trimPathRight,\n} from './path'\nimport { isNotFound } from './not-found'\nimport { setupScrollRestoration } from './scroll-restoration'\nimport { defaultParseSearch, defaultStringifySearch } from './searchParams'\nimport { rootRouteId } from './root'\nimport { isRedirect, isResolvedRedirect } from './redirect'\nimport type { SearchParser, SearchSerializer } from './searchParams'\nimport type { AnyRedirect, ResolvedRedirect } from './redirect'\nimport type {\n  HistoryLocation,\n  HistoryState,\n  ParsedHistoryState,\n  RouterHistory,\n} from '@tanstack/history'\nimport type {\n  ControlledPromise,\n  NoInfer,\n  NonNullableUpdater,\n  PickAsRequired,\n  Updater,\n} from './utils'\nimport type { ParsedLocation } from './location'\nimport type { DeferredPromiseState } from './defer'\nimport type {\n  AnyContext,\n  AnyRoute,\n  AnyRouteWithContext,\n  BeforeLoadContextOptions,\n  LoaderFnContext,\n  MakeRemountDepsOptionsUnion,\n  RouteContextOptions,\n  RouteMask,\n  SearchMiddleware,\n} from './route'\nimport type {\n  FullSearchSchema,\n  RouteById,\n  RoutePaths,\n  RoutesById,\n  RoutesByPath,\n} from './routeInfo'\nimport type {\n  AnyRouteMatch,\n  MakeRouteMatch,\n  MakeRouteMatchUnion,\n  MatchRouteOptions,\n} from './Matches'\nimport type {\n  BuildLocationFn,\n  CommitLocationOptions,\n  NavigateFn,\n} from './RouterProvider'\nimport type { Manifest } from './manifest'\nimport type { StartSerializer } from './serializer'\nimport type { AnySchema, AnyValidator } from './validators'\nimport type { NavigateOptions, ResolveRelativePath, ToOptions } from './link'\nimport type { NotFoundError } from './not-found'\n\ndeclare global {\n  interface Window {\n    __TSR_ROUTER__?: AnyRouter\n  }\n}\n\nexport type ControllablePromise<T = any> = Promise<T> & {\n  resolve: (value: T) => void\n  reject: (value?: any) => void\n}\n\nexport type InjectedHtmlEntry = Promise<string>\n\nexport interface Register {\n  // router: Router\n}\n\nexport type RegisteredRouter = Register extends {\n  router: infer TRouter extends AnyRouter\n}\n  ? TRouter\n  : AnyRouter\n\nexport type DefaultRemountDepsFn<TRouteTree extends AnyRoute> = (\n  opts: MakeRemountDepsOptionsUnion<TRouteTree>,\n) => any\n\nexport interface DefaultRouterOptionsExtensions {}\n\nexport interface RouterOptionsExtensions\n  extends DefaultRouterOptionsExtensions {}\n\nexport interface RouterOptions<\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption,\n  TDefaultStructuralSharingOption extends boolean = false,\n  TRouterHistory extends RouterHistory = RouterHistory,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> extends RouterOptionsExtensions {\n  /**\n   * The history object that will be used to manage the browser history.\n   *\n   * If not provided, a new createBrowserHistory instance will be created and used.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#history-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/history-types)\n   */\n  history?: TRouterHistory\n  /**\n   * A function that will be used to stringify search params when generating links.\n   *\n   * @default defaultStringifySearch\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#stringifysearch-method)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/custom-search-param-serialization)\n   */\n  stringifySearch?: SearchSerializer\n  /**\n   * A function that will be used to parse search params when parsing the current location.\n   *\n   * @default defaultParseSearch\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#parsesearch-method)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/custom-search-param-serialization)\n   */\n  parseSearch?: SearchParser\n  /**\n   * If `false`, routes will not be preloaded by default in any way.\n   *\n   * If `'intent'`, routes will be preloaded by default when the user hovers over a link or a `touchstart` event is detected on a `<Link>`.\n   *\n   * If `'viewport'`, routes will be preloaded by default when they are within the viewport.\n   *\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpreload-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/preloading)\n   */\n  defaultPreload?: false | 'intent' | 'viewport' | 'render'\n  /**\n   * The delay in milliseconds that a route must be hovered over or touched before it is preloaded.\n   *\n   * @default 50\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpreloaddelay-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/preloading#preload-delay)\n   */\n  defaultPreloadDelay?: number\n  /**\n   * The default `pendingMs` a route should use if no pendingMs is provided.\n   *\n   * @default 1000\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpendingms-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#avoiding-pending-component-flash)\n   */\n  defaultPendingMs?: number\n  /**\n   * The default `pendingMinMs` a route should use if no pendingMinMs is provided.\n   *\n   * @default 500\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpendingminms-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#avoiding-pending-component-flash)\n   */\n  defaultPendingMinMs?: number\n  /**\n   * The default `staleTime` a route should use if no staleTime is provided. This is the time in milliseconds that a route will be considered fresh.\n   *\n   * @default 0\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultstaletime-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#key-options)\n   */\n  defaultStaleTime?: number\n  /**\n   * The default `preloadStaleTime` a route should use if no preloadStaleTime is provided.\n   *\n   * @default 30_000 `(30 seconds)`\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpreloadstaletime-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/preloading)\n   */\n  defaultPreloadStaleTime?: number\n  /**\n   * The default `defaultPreloadGcTime` a route should use if no preloadGcTime is provided.\n   *\n   * @default 1_800_000 `(30 minutes)`\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpreloadgctime-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/preloading)\n   */\n  defaultPreloadGcTime?: number\n  /**\n   * If `true`, route navigations will called using `document.startViewTransition()`.\n   *\n   * If the browser does not support this api, this option will be ignored.\n   *\n   * See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document/startViewTransition) for more information on how this function works.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultviewtransition-property)\n   */\n  defaultViewTransition?: boolean | ViewTransitionOptions\n  /**\n   * The default `hashScrollIntoView` a route should use if no hashScrollIntoView is provided while navigating\n   *\n   * See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) for more information on `ScrollIntoViewOptions`.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaulthashscrollintoview-property)\n   */\n  defaultHashScrollIntoView?: boolean | ScrollIntoViewOptions\n  /**\n   * @default 'fuzzy'\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#notfoundmode-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/not-found-errors#the-notfoundmode-option)\n   */\n  notFoundMode?: 'root' | 'fuzzy'\n  /**\n   * The default `gcTime` a route should use if no gcTime is provided.\n   *\n   * @default 1_800_000 `(30 minutes)`\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultgctime-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#key-options)\n   */\n  defaultGcTime?: number\n  /**\n   * If `true`, all routes will be matched as case-sensitive.\n   *\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#casesensitive-property)\n   */\n  caseSensitive?: boolean\n  /**\n   *\n   * The route tree that will be used to configure the router instance.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#routetree-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/routing/route-trees)\n   */\n  routeTree?: TRouteTree\n  /**\n   * The basepath for then entire router. This is useful for mounting a router instance at a subpath.\n   *\n   * @default '/'\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#basepath-property)\n   */\n  basepath?: string\n  /**\n   * The root context that will be provided to all routes in the route tree.\n   *\n   * This can be used to provide a context to all routes in the tree without having to provide it to each route individually.\n   *\n   * Optional or required if the root route was created with [`createRootRouteWithContext()`](https://tanstack.com/router/latest/docs/framework/react/api/router/createRootRouteWithContextFunction).\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#context-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/router-context)\n   */\n  context?: InferRouterContext<TRouteTree>\n  /**\n   * A function that will be called when the router is dehydrated.\n   *\n   * The return value of this function will be serialized and stored in the router's dehydrated state.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#dehydrate-method)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/external-data-loading#critical-dehydrationhydration)\n   */\n  dehydrate?: () => TDehydrated\n  /**\n   * A function that will be called when the router is hydrated.\n   *\n   * The return value of this function will be serialized and stored in the router's dehydrated state.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#hydrate-method)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/external-data-loading#critical-dehydrationhydration)\n   */\n  hydrate?: (dehydrated: TDehydrated) => void\n  /**\n   * An array of route masks that will be used to mask routes in the route tree.\n   *\n   * Route masking is when you display a route at a different path than the one it is configured to match, like a modal popup that when shared will unmask to the modal's content instead of the modal's context.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#routemasks-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/route-masking)\n   */\n  routeMasks?: Array<RouteMask<TRouteTree>>\n  /**\n   * If `true`, route masks will, by default, be removed when the page is reloaded.\n   *\n   * This can be overridden on a per-mask basis by setting the `unmaskOnReload` option on the mask, or on a per-navigation basis by setting the `unmaskOnReload` option in the `Navigate` options.\n   *\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#unmaskonreload-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/route-masking#unmasking-on-page-reload)\n   */\n  unmaskOnReload?: boolean\n\n  /**\n   * Use `notFoundComponent` instead.\n   *\n   * @deprecated\n   * See https://tanstack.com/router/v1/docs/guide/not-found-errors#migrating-from-notfoundroute for more info.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#notfoundroute-property)\n   */\n  notFoundRoute?: AnyRoute\n  /**\n   * Configures how trailing slashes are treated.\n   *\n   * - `'always'` will add a trailing slash if not present\n   * - `'never'` will remove the trailing slash if present\n   * - `'preserve'` will not modify the trailing slash.\n   *\n   * @default 'never'\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#trailingslash-property)\n   */\n  trailingSlash?: TTrailingSlashOption\n  /**\n   * While usually automatic, sometimes it can be useful to force the router into a server-side state, e.g. when using the router in a non-browser environment that has access to a global.document object.\n   *\n   * @default typeof document !== 'undefined'\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#isserver-property)\n   */\n  isServer?: boolean\n\n  defaultSsr?: boolean\n\n  search?: {\n    /**\n     * Configures how unknown search params (= not returned by any `validateSearch`) are treated.\n     *\n     * @default false\n     * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#search.strict-property)\n     */\n    strict?: boolean\n  }\n\n  /**\n   * Configures whether structural sharing is enabled by default for fine-grained selectors.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultstructuralsharing-property)\n   */\n  defaultStructuralSharing?: TDefaultStructuralSharingOption\n\n  /**\n   * Configures which URI characters are allowed in path params that would ordinarily be escaped by encodeURIComponent.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#pathparamsallowedcharacters-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/path-params#allowed-characters)\n   */\n  pathParamsAllowedCharacters?: Array<\n    ';' | ':' | '@' | '&' | '=' | '+' | '$' | ','\n  >\n\n  defaultRemountDeps?: DefaultRemountDepsFn<TRouteTree>\n\n  /**\n   * If `true`, scroll restoration will be enabled\n   *\n   * @default false\n   */\n  scrollRestoration?: boolean\n\n  /**\n   * A function that will be called to get the key for the scroll restoration cache.\n   *\n   * @default (location) => location.href\n   */\n  getScrollRestorationKey?: (location: ParsedLocation) => string\n  /**\n   * The default behavior for scroll restoration.\n   *\n   * @default 'auto'\n   */\n  scrollRestorationBehavior?: ScrollBehavior\n  /**\n   * An array of selectors that will be used to scroll to the top of the page in addition to `window`\n   *\n   * @default ['window']\n   */\n  scrollToTopSelectors?: Array<string>\n}\n\nexport interface RouterState<\n  in out TRouteTree extends AnyRoute = AnyRoute,\n  in out TRouteMatch = MakeRouteMatchUnion,\n> {\n  status: 'pending' | 'idle'\n  loadedAt: number\n  isLoading: boolean\n  isTransitioning: boolean\n  matches: Array<TRouteMatch>\n  pendingMatches?: Array<TRouteMatch>\n  cachedMatches: Array<TRouteMatch>\n  location: ParsedLocation<FullSearchSchema<TRouteTree>>\n  resolvedLocation?: ParsedLocation<FullSearchSchema<TRouteTree>>\n  statusCode: number\n  redirect?: ResolvedRedirect\n}\n\nexport interface BuildNextOptions {\n  to?: string | number | null\n  params?: true | Updater<unknown>\n  search?: true | Updater<unknown>\n  hash?: true | Updater<string>\n  state?: true | NonNullableUpdater<ParsedHistoryState, HistoryState>\n  mask?: {\n    to?: string | number | null\n    params?: true | Updater<unknown>\n    search?: true | Updater<unknown>\n    hash?: true | Updater<string>\n    state?: true | NonNullableUpdater<ParsedHistoryState, HistoryState>\n    unmaskOnReload?: boolean\n  }\n  from?: string\n  _fromLocation?: ParsedLocation\n  href?: string\n}\n\ntype NavigationEventInfo = {\n  fromLocation?: ParsedLocation\n  toLocation: ParsedLocation\n  pathChanged: boolean\n  hrefChanged: boolean\n  hashChanged: boolean\n}\n\nexport type RouterEvents = {\n  onBeforeNavigate: {\n    type: 'onBeforeNavigate'\n  } & NavigationEventInfo\n  onBeforeLoad: {\n    type: 'onBeforeLoad'\n  } & NavigationEventInfo\n  onLoad: {\n    type: 'onLoad'\n  } & NavigationEventInfo\n  onResolved: {\n    type: 'onResolved'\n  } & NavigationEventInfo\n  onBeforeRouteMount: {\n    type: 'onBeforeRouteMount'\n  } & NavigationEventInfo\n  onInjectedHtml: {\n    type: 'onInjectedHtml'\n    promise: Promise<string>\n  }\n  onRendered: {\n    type: 'onRendered'\n  } & NavigationEventInfo\n}\n\nexport type RouterEvent = RouterEvents[keyof RouterEvents]\n\nexport type ListenerFn<TEvent extends RouterEvent> = (event: TEvent) => void\n\nexport type RouterListener<TRouterEvent extends RouterEvent> = {\n  eventType: TRouterEvent['type']\n  fn: ListenerFn<TRouterEvent>\n}\n\nexport interface MatchRoutesOpts {\n  preload?: boolean\n  throwOnError?: boolean\n  _buildLocation?: boolean\n  dest?: BuildNextOptions\n}\n\nexport type InferRouterContext<TRouteTree extends AnyRoute> =\n  TRouteTree['types']['routerContext']\n\nexport type RouterContextOptions<TRouteTree extends AnyRoute> =\n  AnyContext extends InferRouterContext<TRouteTree>\n    ? {\n        context?: InferRouterContext<TRouteTree>\n      }\n    : {\n        context: InferRouterContext<TRouteTree>\n      }\n\nexport type RouterConstructorOptions<\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption,\n  TDefaultStructuralSharingOption extends boolean,\n  TRouterHistory extends RouterHistory,\n  TDehydrated extends Record<string, any>,\n> = Omit<\n  RouterOptions<\n    TRouteTree,\n    TTrailingSlashOption,\n    TDefaultStructuralSharingOption,\n    TRouterHistory,\n    TDehydrated\n  >,\n  'context'\n> &\n  RouterContextOptions<TRouteTree>\n\nexport interface RouterErrorSerializer<TSerializedError> {\n  serialize: (err: unknown) => TSerializedError\n  deserialize: (err: TSerializedError) => unknown\n}\n\nexport interface MatchedRoutesResult {\n  matchedRoutes: Array<AnyRoute>\n  routeParams: Record<string, string>\n}\n\nexport type PreloadRouteFn<\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption,\n  TDefaultStructuralSharingOption extends boolean,\n  TRouterHistory extends RouterHistory,\n> = <\n  TFrom extends RoutePaths<TRouteTree> | string = string,\n  TTo extends string | undefined = undefined,\n  TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom,\n  TMaskTo extends string = '',\n>(\n  opts: NavigateOptions<\n    RouterCore<\n      TRouteTree,\n      TTrailingSlashOption,\n      TDefaultStructuralSharingOption,\n      TRouterHistory\n    >,\n    TFrom,\n    TTo,\n    TMaskFrom,\n    TMaskTo\n  >,\n) => Promise<Array<AnyRouteMatch> | undefined>\n\nexport type MatchRouteFn<\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption,\n  TDefaultStructuralSharingOption extends boolean,\n  TRouterHistory extends RouterHistory,\n> = <\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string | undefined = undefined,\n  TResolved = ResolveRelativePath<TFrom, NoInfer<TTo>>,\n>(\n  location: ToOptions<\n    RouterCore<\n      TRouteTree,\n      TTrailingSlashOption,\n      TDefaultStructuralSharingOption,\n      TRouterHistory\n    >,\n    TFrom,\n    TTo\n  >,\n  opts?: MatchRouteOptions,\n) => false | RouteById<TRouteTree, TResolved>['types']['allParams']\n\nexport type UpdateFn<\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption,\n  TDefaultStructuralSharingOption extends boolean,\n  TRouterHistory extends RouterHistory,\n  TDehydrated extends Record<string, any>,\n> = (\n  newOptions: RouterConstructorOptions<\n    TRouteTree,\n    TTrailingSlashOption,\n    TDefaultStructuralSharingOption,\n    TRouterHistory,\n    TDehydrated\n  >,\n) => void\n\nexport type InvalidateFn<TRouter extends AnyRouter> = (opts?: {\n  filter?: (d: MakeRouteMatchUnion<TRouter>) => boolean\n  sync?: boolean\n}) => Promise<void>\n\nexport type ParseLocationFn<TRouteTree extends AnyRoute> = (\n  previousLocation?: ParsedLocation<FullSearchSchema<TRouteTree>>,\n  locationToParse?: HistoryLocation,\n) => ParsedLocation<FullSearchSchema<TRouteTree>>\n\nexport type GetMatchRoutesFn = (\n  next: ParsedLocation,\n  dest?: BuildNextOptions,\n) => {\n  matchedRoutes: Array<AnyRoute>\n  routeParams: Record<string, string>\n  foundRoute: AnyRoute | undefined\n}\n\nexport type EmitFn = (routerEvent: RouterEvent) => void\n\nexport type LoadFn = (opts?: { sync?: boolean }) => Promise<void>\n\nexport type CommitLocationFn = ({\n  viewTransition,\n  ignoreBlocker,\n  ...next\n}: ParsedLocation & CommitLocationOptions) => Promise<void>\n\nexport type StartTransitionFn = (fn: () => void) => void\n\nexport type SubscribeFn = <TType extends keyof RouterEvents>(\n  eventType: TType,\n  fn: ListenerFn<RouterEvents[TType]>,\n) => () => void\n\nexport interface MatchRoutesFn {\n  (\n    pathname: string,\n    locationSearch: AnySchema,\n    opts?: MatchRoutesOpts,\n  ): Array<AnyRouteMatch>\n  (next: ParsedLocation, opts?: MatchRoutesOpts): Array<AnyRouteMatch>\n  (\n    pathnameOrNext: string | ParsedLocation,\n    locationSearchOrOpts?: AnySchema | MatchRoutesOpts,\n    opts?: MatchRoutesOpts,\n  ): Array<AnyRouteMatch>\n}\n\nexport type GetMatchFn = (matchId: string) => AnyRouteMatch | undefined\n\nexport type UpdateMatchFn = (\n  id: string,\n  updater: (match: AnyRouteMatch) => AnyRouteMatch,\n) => AnyRouteMatch\n\nexport type LoadRouteChunkFn = (route: AnyRoute) => Promise<Array<void>>\n\nexport type ResolveRedirect = (err: AnyRedirect) => ResolvedRedirect\n\nexport type ClearCacheFn<TRouter extends AnyRouter> = (opts?: {\n  filter?: (d: MakeRouteMatchUnion<TRouter>) => boolean\n}) => void\n\nexport interface ServerSrr {\n  injectedHtml: Array<InjectedHtmlEntry>\n  injectHtml: (getHtml: () => string | Promise<string>) => Promise<void>\n  injectScript: (\n    getScript: () => string | Promise<string>,\n    opts?: { logScript?: boolean },\n  ) => Promise<void>\n  streamValue: (key: string, value: any) => void\n  streamedKeys: Set<string>\n  onMatchSettled: (opts: { router: AnyRouter; match: AnyRouteMatch }) => any\n}\n\nexport type AnyRouterWithContext<TContext> = RouterCore<\n  AnyRouteWithContext<TContext>,\n  any,\n  any,\n  any,\n  any\n>\n\nexport type AnyRouter = RouterCore<any, any, any, any, any>\n\nexport interface ViewTransitionOptions {\n  types: Array<string>\n}\n\nexport function defaultSerializeError(err: unknown) {\n  if (err instanceof Error) {\n    const obj = {\n      name: err.name,\n      message: err.message,\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      ;(obj as any).stack = err.stack\n    }\n\n    return obj\n  }\n\n  return {\n    data: err,\n  }\n}\nexport interface ExtractedBaseEntry {\n  dataType: '__beforeLoadContext' | 'loaderData'\n  type: string\n  path: Array<string>\n  id: number\n  matchIndex: number\n}\n\nexport interface ExtractedStream extends ExtractedBaseEntry {\n  type: 'stream'\n  streamState: StreamState\n}\n\nexport interface ExtractedPromise extends ExtractedBaseEntry {\n  type: 'promise'\n  promiseState: DeferredPromiseState<any>\n}\n\nexport type ExtractedEntry = ExtractedStream | ExtractedPromise\n\nexport type StreamState = {\n  promises: Array<ControlledPromise<string | null>>\n}\n\nexport type TrailingSlashOption = 'always' | 'never' | 'preserve'\n\nexport function getLocationChangeInfo(routerState: {\n  resolvedLocation?: ParsedLocation\n  location: ParsedLocation\n}) {\n  const fromLocation = routerState.resolvedLocation\n  const toLocation = routerState.location\n  const pathChanged = fromLocation?.pathname !== toLocation.pathname\n  const hrefChanged = fromLocation?.href !== toLocation.href\n  const hashChanged = fromLocation?.hash !== toLocation.hash\n  return { fromLocation, toLocation, pathChanged, hrefChanged, hashChanged }\n}\n\nexport type CreateRouterFn = <\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption = 'never',\n  TDefaultStructuralSharingOption extends boolean = false,\n  TRouterHistory extends RouterHistory = RouterHistory,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n>(\n  options: undefined extends number\n    ? 'strictNullChecks must be enabled in tsconfig.json'\n    : RouterConstructorOptions<\n        TRouteTree,\n        TTrailingSlashOption,\n        TDefaultStructuralSharingOption,\n        TRouterHistory,\n        TDehydrated\n      >,\n) => RouterCore<\n  TRouteTree,\n  TTrailingSlashOption,\n  TDefaultStructuralSharingOption,\n  TRouterHistory,\n  TDehydrated\n>\n\nexport class RouterCore<\n  in out TRouteTree extends AnyRoute,\n  in out TTrailingSlashOption extends TrailingSlashOption,\n  in out TDefaultStructuralSharingOption extends boolean,\n  in out TRouterHistory extends RouterHistory = RouterHistory,\n  in out TDehydrated extends Record<string, any> = Record<string, any>,\n> {\n  // Option-independent properties\n  tempLocationKey: string | undefined = `${Math.round(\n    Math.random() * 10000000,\n  )}`\n  resetNextScroll = true\n  shouldViewTransition?: boolean | ViewTransitionOptions = undefined\n  isViewTransitionTypesSupported?: boolean = undefined\n  subscribers = new Set<RouterListener<RouterEvent>>()\n  viewTransitionPromise?: ControlledPromise<true>\n  isScrollRestoring = false\n  isScrollRestorationSetup = false\n\n  // Must build in constructor\n  __store!: Store<RouterState<TRouteTree>>\n  options!: PickAsRequired<\n    RouterOptions<\n      TRouteTree,\n      TTrailingSlashOption,\n      TDefaultStructuralSharingOption,\n      TRouterHistory,\n      TDehydrated\n    >,\n    'stringifySearch' | 'parseSearch' | 'context'\n  >\n  history!: TRouterHistory\n  latestLocation!: ParsedLocation<FullSearchSchema<TRouteTree>>\n  basepath!: string\n  routeTree!: TRouteTree\n  routesById!: RoutesById<TRouteTree>\n  routesByPath!: RoutesByPath<TRouteTree>\n  flatRoutes!: Array<AnyRoute>\n  isServer!: boolean\n  pathParamsDecodeCharMap?: Map<string, string>\n\n  /**\n   * @deprecated Use the `createRouter` function instead\n   */\n  constructor(\n    options: RouterConstructorOptions<\n      TRouteTree,\n      TTrailingSlashOption,\n      TDefaultStructuralSharingOption,\n      TRouterHistory,\n      TDehydrated\n    >,\n  ) {\n    this.update({\n      defaultPreloadDelay: 50,\n      defaultPendingMs: 1000,\n      defaultPendingMinMs: 500,\n      context: undefined!,\n      ...options,\n      caseSensitive: options.caseSensitive ?? false,\n      notFoundMode: options.notFoundMode ?? 'fuzzy',\n      stringifySearch: options.stringifySearch ?? defaultStringifySearch,\n      parseSearch: options.parseSearch ?? defaultParseSearch,\n    })\n\n    if (typeof document !== 'undefined') {\n      ;(window as any).__TSR_ROUTER__ = this\n    }\n  }\n\n  // These are default implementations that can optionally be overridden\n  // by the router provider once rendered. We provide these so that the\n  // router can be used in a non-react environment if necessary\n  startTransition: StartTransitionFn = (fn) => fn()\n\n  update: UpdateFn<\n    TRouteTree,\n    TTrailingSlashOption,\n    TDefaultStructuralSharingOption,\n    TRouterHistory,\n    TDehydrated\n  > = (newOptions) => {\n    if (newOptions.notFoundRoute) {\n      console.warn(\n        'The notFoundRoute API is deprecated and will be removed in the next major version. See https://tanstack.com/router/v1/docs/framework/react/guide/not-found-errors#migrating-from-notfoundroute for more info.',\n      )\n    }\n\n    const previousOptions = this.options\n    this.options = {\n      ...this.options,\n      ...newOptions,\n    }\n\n    this.isServer = this.options.isServer ?? typeof document === 'undefined'\n\n    this.pathParamsDecodeCharMap = this.options.pathParamsAllowedCharacters\n      ? new Map(\n          this.options.pathParamsAllowedCharacters.map((char) => [\n            encodeURIComponent(char),\n            char,\n          ]),\n        )\n      : undefined\n\n    if (\n      !this.basepath ||\n      (newOptions.basepath && newOptions.basepath !== previousOptions.basepath)\n    ) {\n      if (\n        newOptions.basepath === undefined ||\n        newOptions.basepath === '' ||\n        newOptions.basepath === '/'\n      ) {\n        this.basepath = '/'\n      } else {\n        this.basepath = `/${trimPath(newOptions.basepath)}`\n      }\n    }\n\n    if (\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      !this.history ||\n      (this.options.history && this.options.history !== this.history)\n    ) {\n      this.history =\n        this.options.history ??\n        ((this.isServer\n          ? createMemoryHistory({\n              initialEntries: [this.basepath || '/'],\n            })\n          : createBrowserHistory()) as TRouterHistory)\n      this.latestLocation = this.parseLocation()\n    }\n\n    if (this.options.routeTree !== this.routeTree) {\n      this.routeTree = this.options.routeTree as TRouteTree\n      this.buildRouteTree()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!this.__store) {\n      this.__store = new Store(getInitialRouterState(this.latestLocation), {\n        onUpdate: () => {\n          this.__store.state = {\n            ...this.state,\n            cachedMatches: this.state.cachedMatches.filter(\n              (d) => !['redirected'].includes(d.status),\n            ),\n          }\n        },\n      })\n\n      setupScrollRestoration(this)\n    }\n\n    if (\n      typeof window !== 'undefined' &&\n      'CSS' in window &&\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      typeof window.CSS?.supports === 'function'\n    ) {\n      this.isViewTransitionTypesSupported = window.CSS.supports(\n        'selector(:active-view-transition-type(a)',\n      )\n    }\n  }\n\n  get state() {\n    return this.__store.state\n  }\n\n  buildRouteTree = () => {\n    this.routesById = {} as RoutesById<TRouteTree>\n    this.routesByPath = {} as RoutesByPath<TRouteTree>\n\n    const notFoundRoute = this.options.notFoundRoute\n    if (notFoundRoute) {\n      notFoundRoute.init({\n        originalIndex: 99999999999,\n        defaultSsr: this.options.defaultSsr,\n      })\n      ;(this.routesById as any)[notFoundRoute.id] = notFoundRoute\n    }\n\n    const recurseRoutes = (childRoutes: Array<AnyRoute>) => {\n      childRoutes.forEach((childRoute, i) => {\n        childRoute.init({\n          originalIndex: i,\n          defaultSsr: this.options.defaultSsr,\n        })\n\n        const existingRoute = (this.routesById as any)[childRoute.id]\n\n        invariant(\n          !existingRoute,\n          `Duplicate routes found with id: ${String(childRoute.id)}`,\n        )\n        ;(this.routesById as any)[childRoute.id] = childRoute\n\n        if (!childRoute.isRoot && childRoute.path) {\n          const trimmedFullPath = trimPathRight(childRoute.fullPath)\n          if (\n            !(this.routesByPath as any)[trimmedFullPath] ||\n            childRoute.fullPath.endsWith('/')\n          ) {\n            ;(this.routesByPath as any)[trimmedFullPath] = childRoute\n          }\n        }\n\n        const children = childRoute.children\n\n        if (children?.length) {\n          recurseRoutes(children)\n        }\n      })\n    }\n\n    recurseRoutes([this.routeTree])\n\n    const scoredRoutes: Array<{\n      child: AnyRoute\n      trimmed: string\n      parsed: ReturnType<typeof parsePathname>\n      index: number\n      scores: Array<number>\n    }> = []\n\n    const routes: Array<AnyRoute> = Object.values(this.routesById)\n\n    routes.forEach((d, i) => {\n      if (d.isRoot || !d.path) {\n        return\n      }\n\n      const trimmed = trimPathLeft(d.fullPath)\n      const parsed = parsePathname(trimmed)\n\n      while (parsed.length > 1 && parsed[0]?.value === '/') {\n        parsed.shift()\n      }\n\n      const scores = parsed.map((segment) => {\n        if (segment.value === '/') {\n          return 0.75\n        }\n\n        if (segment.type === 'param') {\n          return 0.5\n        }\n\n        if (segment.type === 'wildcard') {\n          return 0.25\n        }\n\n        return 1\n      })\n\n      scoredRoutes.push({ child: d, trimmed, parsed, index: i, scores })\n    })\n\n    this.flatRoutes = scoredRoutes\n      .sort((a, b) => {\n        const minLength = Math.min(a.scores.length, b.scores.length)\n\n        // Sort by min available score\n        for (let i = 0; i < minLength; i++) {\n          if (a.scores[i] !== b.scores[i]) {\n            return b.scores[i]! - a.scores[i]!\n          }\n        }\n\n        // Sort by length of score\n        if (a.scores.length !== b.scores.length) {\n          return b.scores.length - a.scores.length\n        }\n\n        // Sort by min available parsed value\n        for (let i = 0; i < minLength; i++) {\n          if (a.parsed[i]!.value !== b.parsed[i]!.value) {\n            return a.parsed[i]!.value > b.parsed[i]!.value ? 1 : -1\n          }\n        }\n\n        // Sort by original index\n        return a.index - b.index\n      })\n      .map((d, i) => {\n        d.child.rank = i\n        return d.child\n      })\n  }\n\n  subscribe: SubscribeFn = (eventType, fn) => {\n    const listener: RouterListener<any> = {\n      eventType,\n      fn,\n    }\n\n    this.subscribers.add(listener)\n\n    return () => {\n      this.subscribers.delete(listener)\n    }\n  }\n\n  emit: EmitFn = (routerEvent) => {\n    this.subscribers.forEach((listener) => {\n      if (listener.eventType === routerEvent.type) {\n        listener.fn(routerEvent)\n      }\n    })\n  }\n\n  parseLocation: ParseLocationFn<TRouteTree> = (\n    previousLocation,\n    locationToParse,\n  ) => {\n    const parse = ({\n      pathname,\n      search,\n      hash,\n      state,\n    }: HistoryLocation): ParsedLocation<FullSearchSchema<TRouteTree>> => {\n      const parsedSearch = this.options.parseSearch(search)\n      const searchStr = this.options.stringifySearch(parsedSearch)\n\n      return {\n        pathname,\n        searchStr,\n        search: replaceEqualDeep(previousLocation?.search, parsedSearch) as any,\n        hash: hash.split('#').reverse()[0] ?? '',\n        href: `${pathname}${searchStr}${hash}`,\n        state: replaceEqualDeep(previousLocation?.state, state),\n      }\n    }\n\n    const location = parse(locationToParse ?? this.history.location)\n\n    const { __tempLocation, __tempKey } = location.state\n\n    if (__tempLocation && (!__tempKey || __tempKey === this.tempLocationKey)) {\n      // Sync up the location keys\n      const parsedTempLocation = parse(__tempLocation) as any\n      parsedTempLocation.state.key = location.state.key\n\n      delete parsedTempLocation.state.__tempLocation\n\n      return {\n        ...parsedTempLocation,\n        maskedLocation: location,\n      }\n    }\n\n    return location\n  }\n\n  resolvePathWithBase = (from: string, path: string) => {\n    const resolvedPath = resolvePath({\n      basepath: this.basepath,\n      base: from,\n      to: cleanPath(path),\n      trailingSlash: this.options.trailingSlash,\n      caseSensitive: this.options.caseSensitive,\n    })\n    return resolvedPath\n  }\n\n  get looseRoutesById() {\n    return this.routesById as Record<string, AnyRoute>\n  }\n\n  /**\n  @deprecated use the following signature instead\n  ```ts\n  matchRoutes (\n    next: ParsedLocation,\n    opts?: { preload?: boolean; throwOnError?: boolean },\n  ): Array<AnyRouteMatch>;\n  ```\n*/\n  matchRoutes: MatchRoutesFn = (\n    pathnameOrNext: string | ParsedLocation,\n    locationSearchOrOpts?: AnySchema | MatchRoutesOpts,\n    opts?: MatchRoutesOpts,\n  ) => {\n    if (typeof pathnameOrNext === 'string') {\n      return this.matchRoutesInternal(\n        {\n          pathname: pathnameOrNext,\n          search: locationSearchOrOpts,\n        } as ParsedLocation,\n        opts,\n      )\n    } else {\n      return this.matchRoutesInternal(pathnameOrNext, locationSearchOrOpts)\n    }\n  }\n\n  private matchRoutesInternal(\n    next: ParsedLocation,\n    opts?: MatchRoutesOpts,\n  ): Array<AnyRouteMatch> {\n    const { foundRoute, matchedRoutes, routeParams } = this.getMatchedRoutes(\n      next,\n      opts?.dest,\n    )\n    let isGlobalNotFound = false\n\n    // Check to see if the route needs a 404 entry\n    if (\n      // If we found a route, and it's not an index route and we have left over path\n      foundRoute\n        ? foundRoute.path !== '/' && routeParams['**']\n        : // Or if we didn't find a route and we have left over path\n          trimPathRight(next.pathname)\n    ) {\n      // If the user has defined an (old) 404 route, use it\n      if (this.options.notFoundRoute) {\n        matchedRoutes.push(this.options.notFoundRoute)\n      } else {\n        // If there is no routes found during path matching\n        isGlobalNotFound = true\n      }\n    }\n\n    const globalNotFoundRouteId = (() => {\n      if (!isGlobalNotFound) {\n        return undefined\n      }\n\n      if (this.options.notFoundMode !== 'root') {\n        for (let i = matchedRoutes.length - 1; i >= 0; i--) {\n          const route = matchedRoutes[i]!\n          if (route.children) {\n            return route.id\n          }\n        }\n      }\n\n      return rootRouteId\n    })()\n\n    const parseErrors = matchedRoutes.map((route) => {\n      let parsedParamsError\n\n      const parseParams =\n        route.options.params?.parse ?? route.options.parseParams\n\n      if (parseParams) {\n        try {\n          const parsedParams = parseParams(routeParams)\n          // Add the parsed params to the accumulated params bag\n          Object.assign(routeParams, parsedParams)\n        } catch (err: any) {\n          parsedParamsError = new PathParamError(err.message, {\n            cause: err,\n          })\n\n          if (opts?.throwOnError) {\n            throw parsedParamsError\n          }\n\n          return parsedParamsError\n        }\n      }\n\n      return\n    })\n\n    const matches: Array<AnyRouteMatch> = []\n\n    const getParentContext = (parentMatch?: AnyRouteMatch) => {\n      const parentMatchId = parentMatch?.id\n\n      const parentContext = !parentMatchId\n        ? ((this.options.context as any) ?? {})\n        : (parentMatch.context ?? this.options.context ?? {})\n\n      return parentContext\n    }\n\n    matchedRoutes.forEach((route, index) => {\n      // Take each matched route and resolve + validate its search params\n      // This has to happen serially because each route's search params\n      // can depend on the parent route's search params\n      // It must also happen before we create the match so that we can\n      // pass the search params to the route's potential key function\n      // which is used to uniquely identify the route match in state\n\n      const parentMatch = matches[index - 1]\n\n      const [preMatchSearch, strictMatchSearch, searchError]: [\n        Record<string, any>,\n        Record<string, any>,\n        any,\n      ] = (() => {\n        // Validate the search params and stabilize them\n        const parentSearch = parentMatch?.search ?? next.search\n        const parentStrictSearch = parentMatch?._strictSearch ?? {}\n\n        try {\n          const strictSearch =\n            validateSearch(route.options.validateSearch, { ...parentSearch }) ??\n            {}\n\n          return [\n            {\n              ...parentSearch,\n              ...strictSearch,\n            },\n            { ...parentStrictSearch, ...strictSearch },\n            undefined,\n          ]\n        } catch (err: any) {\n          let searchParamError = err\n          if (!(err instanceof SearchParamError)) {\n            searchParamError = new SearchParamError(err.message, {\n              cause: err,\n            })\n          }\n\n          if (opts?.throwOnError) {\n            throw searchParamError\n          }\n\n          return [parentSearch, {}, searchParamError]\n        }\n      })()\n\n      // This is where we need to call route.options.loaderDeps() to get any additional\n      // deps that the route's loader function might need to run. We need to do this\n      // before we create the match so that we can pass the deps to the route's\n      // potential key function which is used to uniquely identify the route match in state\n\n      const loaderDeps =\n        route.options.loaderDeps?.({\n          search: preMatchSearch,\n        }) ?? ''\n\n      const loaderDepsHash = loaderDeps ? JSON.stringify(loaderDeps) : ''\n\n      const { usedParams, interpolatedPath } = interpolatePath({\n        path: route.fullPath,\n        params: routeParams,\n        decodeCharMap: this.pathParamsDecodeCharMap,\n      })\n\n      const matchId =\n        interpolatePath({\n          path: route.id,\n          params: routeParams,\n          leaveWildcards: true,\n          decodeCharMap: this.pathParamsDecodeCharMap,\n        }).interpolatedPath + loaderDepsHash\n\n      // Waste not, want not. If we already have a match for this route,\n      // reuse it. This is important for layout routes, which might stick\n      // around between navigation actions that only change leaf routes.\n\n      // Existing matches are matches that are already loaded along with\n      // pending matches that are still loading\n      const existingMatch = this.getMatch(matchId)\n\n      const previousMatch = this.state.matches.find(\n        (d) => d.routeId === route.id,\n      )\n\n      const cause = previousMatch ? 'stay' : 'enter'\n\n      let match: AnyRouteMatch\n\n      if (existingMatch) {\n        match = {\n          ...existingMatch,\n          cause,\n          params: previousMatch\n            ? replaceEqualDeep(previousMatch.params, routeParams)\n            : routeParams,\n          _strictParams: usedParams,\n          search: previousMatch\n            ? replaceEqualDeep(previousMatch.search, preMatchSearch)\n            : replaceEqualDeep(existingMatch.search, preMatchSearch),\n          _strictSearch: strictMatchSearch,\n        }\n      } else {\n        const status =\n          route.options.loader ||\n          route.options.beforeLoad ||\n          route.lazyFn ||\n          routeNeedsPreload(route)\n            ? 'pending'\n            : 'success'\n\n        match = {\n          id: matchId,\n          index,\n          routeId: route.id,\n          params: previousMatch\n            ? replaceEqualDeep(previousMatch.params, routeParams)\n            : routeParams,\n          _strictParams: usedParams,\n          pathname: joinPaths([this.basepath, interpolatedPath]),\n          updatedAt: Date.now(),\n          search: previousMatch\n            ? replaceEqualDeep(previousMatch.search, preMatchSearch)\n            : preMatchSearch,\n          _strictSearch: strictMatchSearch,\n          searchError: undefined,\n          status,\n          isFetching: false,\n          error: undefined,\n          paramsError: parseErrors[index],\n          __routeContext: {},\n          __beforeLoadContext: {},\n          context: {},\n          abortController: new AbortController(),\n          fetchCount: 0,\n          cause,\n          loaderDeps: previousMatch\n            ? replaceEqualDeep(previousMatch.loaderDeps, loaderDeps)\n            : loaderDeps,\n          invalid: false,\n          preload: false,\n          links: undefined,\n          scripts: undefined,\n          headScripts: undefined,\n          meta: undefined,\n          staticData: route.options.staticData || {},\n          loadPromise: createControlledPromise(),\n          fullPath: route.fullPath,\n        }\n      }\n\n      if (!opts?.preload) {\n        // If we have a global not found, mark the right match as global not found\n        match.globalNotFound = globalNotFoundRouteId === route.id\n      }\n\n      // update the searchError if there is one\n      match.searchError = searchError\n\n      const parentContext = getParentContext(parentMatch)\n\n      match.context = {\n        ...parentContext,\n        ...match.__routeContext,\n        ...match.__beforeLoadContext,\n      }\n\n      matches.push(match)\n    })\n\n    matches.forEach((match, index) => {\n      const route = this.looseRoutesById[match.routeId]!\n      const existingMatch = this.getMatch(match.id)\n\n      // only execute `context` if we are not just building a location\n      if (!existingMatch && opts?._buildLocation !== true) {\n        const parentMatch = matches[index - 1]\n        const parentContext = getParentContext(parentMatch)\n\n        // Update the match's context\n        const contextFnContext: RouteContextOptions<any, any, any, any> = {\n          deps: match.loaderDeps,\n          params: match.params,\n          context: parentContext,\n          location: next,\n          navigate: (opts: any) =>\n            this.navigate({ ...opts, _fromLocation: next }),\n          buildLocation: this.buildLocation,\n          cause: match.cause,\n          abortController: match.abortController,\n          preload: !!match.preload,\n          matches,\n        }\n\n        // Get the route context\n        match.__routeContext = route.options.context?.(contextFnContext) ?? {}\n\n        match.context = {\n          ...parentContext,\n          ...match.__routeContext,\n          ...match.__beforeLoadContext,\n        }\n      }\n\n      // If it's already a success, update headers and head content\n      // These may get updated again if the match is refreshed\n      // due to being stale\n      if (match.status === 'success') {\n        match.headers = route.options.headers?.({\n          loaderData: match.loaderData,\n        })\n        const assetContext = {\n          matches,\n          match,\n          params: match.params,\n          loaderData: match.loaderData,\n        }\n        const headFnContent = route.options.head?.(assetContext)\n        match.links = headFnContent?.links\n        match.headScripts = headFnContent?.scripts\n        match.meta = headFnContent?.meta\n        match.scripts = route.options.scripts?.(assetContext)\n      }\n    })\n\n    return matches\n  }\n\n  getMatchedRoutes: GetMatchRoutesFn = (next, dest) => {\n    let routeParams: Record<string, string> = {}\n    const trimmedPath = trimPathRight(next.pathname)\n    const getMatchedParams = (route: AnyRoute) => {\n      const result = matchPathname(this.basepath, trimmedPath, {\n        to: route.fullPath,\n        caseSensitive:\n          route.options.caseSensitive ?? this.options.caseSensitive,\n        fuzzy: true,\n      })\n      return result\n    }\n\n    let foundRoute: AnyRoute | undefined =\n      dest?.to !== undefined ? this.routesByPath[dest.to!] : undefined\n    if (foundRoute) {\n      routeParams = getMatchedParams(foundRoute)!\n    } else {\n      foundRoute = this.flatRoutes.find((route) => {\n        const matchedParams = getMatchedParams(route)\n\n        if (matchedParams) {\n          routeParams = matchedParams\n          return true\n        }\n\n        return false\n      })\n    }\n\n    let routeCursor: AnyRoute =\n      foundRoute || (this.routesById as any)[rootRouteId]\n\n    const matchedRoutes: Array<AnyRoute> = [routeCursor]\n\n    while (routeCursor.parentRoute) {\n      routeCursor = routeCursor.parentRoute\n      matchedRoutes.unshift(routeCursor)\n    }\n\n    return { matchedRoutes, routeParams, foundRoute }\n  }\n\n  cancelMatch = (id: string) => {\n    const match = this.getMatch(id)\n\n    if (!match) return\n\n    match.abortController.abort()\n    clearTimeout(match.pendingTimeout)\n  }\n\n  cancelMatches = () => {\n    this.state.pendingMatches?.forEach((match) => {\n      this.cancelMatch(match.id)\n    })\n  }\n\n  buildLocation: BuildLocationFn = (opts) => {\n    const build = (\n      dest: BuildNextOptions & {\n        unmaskOnReload?: boolean\n      } = {},\n      matchedRoutesResult?: MatchedRoutesResult,\n    ): ParsedLocation => {\n      const fromMatches = dest._fromLocation\n        ? this.matchRoutes(dest._fromLocation, { _buildLocation: true })\n        : this.state.matches\n\n      const fromMatch =\n        dest.from != null\n          ? fromMatches.find((d) =>\n              matchPathname(this.basepath, trimPathRight(d.pathname), {\n                to: dest.from,\n                caseSensitive: false,\n                fuzzy: false,\n              }),\n            )\n          : undefined\n\n      const fromPath = fromMatch?.pathname || this.latestLocation.pathname\n\n      invariant(\n        dest.from == null || fromMatch != null,\n        'Could not find match for from: ' + dest.from,\n      )\n\n      const fromSearch = this.state.pendingMatches?.length\n        ? last(this.state.pendingMatches)?.search\n        : last(fromMatches)?.search || this.latestLocation.search\n\n      const stayingMatches = matchedRoutesResult?.matchedRoutes.filter((d) =>\n        fromMatches.find((e) => e.routeId === d.id),\n      )\n      let pathname: string\n      if (dest.to) {\n        const resolvePathTo =\n          fromMatch?.fullPath ||\n          last(fromMatches)?.fullPath ||\n          this.latestLocation.pathname\n        pathname = this.resolvePathWithBase(resolvePathTo, `${dest.to}`)\n      } else {\n        const fromRouteByFromPathRouteId =\n          this.routesById[\n            stayingMatches?.find((route) => {\n              const interpolatedPath = interpolatePath({\n                path: route.fullPath,\n                params: matchedRoutesResult?.routeParams ?? {},\n                decodeCharMap: this.pathParamsDecodeCharMap,\n              }).interpolatedPath\n              const pathname = joinPaths([this.basepath, interpolatedPath])\n              return pathname === fromPath\n            })?.id as keyof this['routesById']\n          ]\n        pathname = this.resolvePathWithBase(\n          fromPath,\n          fromRouteByFromPathRouteId?.to ?? fromPath,\n        )\n      }\n\n      const prevParams = { ...last(fromMatches)?.params }\n\n      let nextParams =\n        (dest.params ?? true) === true\n          ? prevParams\n          : {\n              ...prevParams,\n              ...functionalUpdate(dest.params as any, prevParams),\n            }\n\n      if (Object.keys(nextParams).length > 0) {\n        matchedRoutesResult?.matchedRoutes\n          .map((route) => {\n            return (\n              route.options.params?.stringify ?? route.options.stringifyParams\n            )\n          })\n          .filter(Boolean)\n          .forEach((fn) => {\n            nextParams = { ...nextParams!, ...fn!(nextParams) }\n          })\n      }\n\n      pathname = interpolatePath({\n        path: pathname,\n        params: nextParams ?? {},\n        leaveWildcards: false,\n        leaveParams: opts.leaveParams,\n        decodeCharMap: this.pathParamsDecodeCharMap,\n      }).interpolatedPath\n\n      let search = fromSearch\n      if (opts._includeValidateSearch && this.options.search?.strict) {\n        let validatedSearch = {}\n        matchedRoutesResult?.matchedRoutes.forEach((route) => {\n          try {\n            if (route.options.validateSearch) {\n              validatedSearch = {\n                ...validatedSearch,\n                ...(validateSearch(route.options.validateSearch, {\n                  ...validatedSearch,\n                  ...search,\n                }) ?? {}),\n              }\n            }\n          } catch {\n            // ignore errors here because they are already handled in matchRoutes\n          }\n        })\n        search = validatedSearch\n      }\n\n      const applyMiddlewares = (search: any) => {\n        const allMiddlewares =\n          matchedRoutesResult?.matchedRoutes.reduce(\n            (acc, route) => {\n              const middlewares: Array<SearchMiddleware<any>> = []\n              if ('search' in route.options) {\n                if (route.options.search?.middlewares) {\n                  middlewares.push(...route.options.search.middlewares)\n                }\n              }\n              // TODO remove preSearchFilters and postSearchFilters in v2\n              else if (\n                route.options.preSearchFilters ||\n                route.options.postSearchFilters\n              ) {\n                const legacyMiddleware: SearchMiddleware<any> = ({\n                  search,\n                  next,\n                }) => {\n                  let nextSearch = search\n                  if (\n                    'preSearchFilters' in route.options &&\n                    route.options.preSearchFilters\n                  ) {\n                    nextSearch = route.options.preSearchFilters.reduce(\n                      (prev, next) => next(prev),\n                      search,\n                    )\n                  }\n                  const result = next(nextSearch)\n                  if (\n                    'postSearchFilters' in route.options &&\n                    route.options.postSearchFilters\n                  ) {\n                    return route.options.postSearchFilters.reduce(\n                      (prev, next) => next(prev),\n                      result,\n                    )\n                  }\n                  return result\n                }\n                middlewares.push(legacyMiddleware)\n              }\n              if (opts._includeValidateSearch && route.options.validateSearch) {\n                const validate: SearchMiddleware<any> = ({ search, next }) => {\n                  const result = next(search)\n                  try {\n                    const validatedSearch = {\n                      ...result,\n                      ...(validateSearch(\n                        route.options.validateSearch,\n                        result,\n                      ) ?? {}),\n                    }\n                    return validatedSearch\n                  } catch {\n                    // ignore errors here because they are already handled in matchRoutes\n                    return result\n                  }\n                }\n                middlewares.push(validate)\n              }\n              return acc.concat(middlewares)\n            },\n            [] as Array<SearchMiddleware<any>>,\n          ) ?? []\n\n        // the chain ends here since `next` is not called\n        const final: SearchMiddleware<any> = ({ search }) => {\n          if (!dest.search) {\n            return {}\n          }\n          if (dest.search === true) {\n            return search\n          }\n          return functionalUpdate(dest.search, search)\n        }\n        allMiddlewares.push(final)\n\n        const applyNext = (index: number, currentSearch: any): any => {\n          // no more middlewares left, return the current search\n          if (index >= allMiddlewares.length) {\n            return currentSearch\n          }\n\n          const middleware = allMiddlewares[index]!\n\n          const next = (newSearch: any): any => {\n            return applyNext(index + 1, newSearch)\n          }\n\n          return middleware({ search: currentSearch, next })\n        }\n\n        // Start applying middlewares\n        return applyNext(0, search)\n      }\n\n      search = applyMiddlewares(search)\n\n      search = replaceEqualDeep(fromSearch, search)\n      const searchStr = this.options.stringifySearch(search)\n\n      const hash =\n        dest.hash === true\n          ? this.latestLocation.hash\n          : dest.hash\n            ? functionalUpdate(dest.hash, this.latestLocation.hash)\n            : undefined\n\n      const hashStr = hash ? `#${hash}` : ''\n\n      let nextState =\n        dest.state === true\n          ? this.latestLocation.state\n          : dest.state\n            ? functionalUpdate(dest.state, this.latestLocation.state)\n            : {}\n\n      nextState = replaceEqualDeep(this.latestLocation.state, nextState)\n\n      return {\n        pathname,\n        search,\n        searchStr,\n        state: nextState as any,\n        hash: hash ?? '',\n        href: `${pathname}${searchStr}${hashStr}`,\n        unmaskOnReload: dest.unmaskOnReload,\n      }\n    }\n\n    const buildWithMatches = (\n      dest: BuildNextOptions = {},\n      maskedDest?: BuildNextOptions,\n    ) => {\n      const next = build(dest)\n      let maskedNext = maskedDest ? build(maskedDest) : undefined\n\n      if (!maskedNext) {\n        let params = {}\n\n        const foundMask = this.options.routeMasks?.find((d) => {\n          const match = matchPathname(this.basepath, next.pathname, {\n            to: d.from,\n            caseSensitive: false,\n            fuzzy: false,\n          })\n\n          if (match) {\n            params = match\n            return true\n          }\n\n          return false\n        })\n\n        if (foundMask) {\n          const { from: _from, ...maskProps } = foundMask\n          maskedDest = {\n            ...pick(opts, ['from']),\n            ...maskProps,\n            params,\n          }\n          maskedNext = build(maskedDest)\n        }\n      }\n\n      const nextMatches = this.getMatchedRoutes(next, dest)\n      const final = build(dest, nextMatches)\n\n      if (maskedNext) {\n        const maskedMatches = this.getMatchedRoutes(maskedNext, maskedDest)\n        const maskedFinal = build(maskedDest, maskedMatches)\n        final.maskedLocation = maskedFinal\n      }\n\n      return final\n    }\n\n    if (opts.mask) {\n      return buildWithMatches(opts, {\n        ...pick(opts, ['from']),\n        ...opts.mask,\n      })\n    }\n\n    return buildWithMatches(opts)\n  }\n\n  commitLocationPromise: undefined | ControlledPromise<void>\n\n  commitLocation: CommitLocationFn = ({\n    viewTransition,\n    ignoreBlocker,\n    ...next\n  }) => {\n    const isSameState = () => {\n      // the following props are ignored but may still be provided when navigating,\n      // temporarily add the previous values to the next state so they don't affect\n      // the comparison\n      const ignoredProps = [\n        'key',\n        '__TSR_index',\n        '__hashScrollIntoViewOptions',\n      ] as const\n      ignoredProps.forEach((prop) => {\n        ;(next.state as any)[prop] = this.latestLocation.state[prop]\n      })\n      const isEqual = deepEqual(next.state, this.latestLocation.state)\n      ignoredProps.forEach((prop) => {\n        delete next.state[prop]\n      })\n      return isEqual\n    }\n\n    const isSameUrl = this.latestLocation.href === next.href\n\n    const previousCommitPromise = this.commitLocationPromise\n    this.commitLocationPromise = createControlledPromise<void>(() => {\n      previousCommitPromise?.resolve()\n    })\n\n    // Don't commit to history if nothing changed\n    if (isSameUrl && isSameState()) {\n      this.load()\n    } else {\n      // eslint-disable-next-line prefer-const\n      let { maskedLocation, hashScrollIntoView, ...nextHistory } = next\n\n      if (maskedLocation) {\n        nextHistory = {\n          ...maskedLocation,\n          state: {\n            ...maskedLocation.state,\n            __tempKey: undefined,\n            __tempLocation: {\n              ...nextHistory,\n              search: nextHistory.searchStr,\n              state: {\n                ...nextHistory.state,\n                __tempKey: undefined!,\n                __tempLocation: undefined!,\n                key: undefined!,\n              },\n            },\n          },\n        }\n\n        if (\n          nextHistory.unmaskOnReload ??\n          this.options.unmaskOnReload ??\n          false\n        ) {\n          nextHistory.state.__tempKey = this.tempLocationKey\n        }\n      }\n\n      nextHistory.state.__hashScrollIntoViewOptions =\n        hashScrollIntoView ?? this.options.defaultHashScrollIntoView ?? true\n\n      this.shouldViewTransition = viewTransition\n\n      this.history[next.replace ? 'replace' : 'push'](\n        nextHistory.href,\n        nextHistory.state,\n        { ignoreBlocker },\n      )\n    }\n\n    this.resetNextScroll = next.resetScroll ?? true\n\n    if (!this.history.subscribers.size) {\n      this.load()\n    }\n\n    return this.commitLocationPromise\n  }\n\n  buildAndCommitLocation = ({\n    replace,\n    resetScroll,\n    hashScrollIntoView,\n    viewTransition,\n    ignoreBlocker,\n    href,\n    ...rest\n  }: BuildNextOptions & CommitLocationOptions = {}) => {\n    if (href) {\n      const currentIndex = this.history.location.state.__TSR_index\n      const parsed = parseHref(href, {\n        __TSR_index: replace ? currentIndex : currentIndex + 1,\n      })\n      rest.to = parsed.pathname\n      rest.search = this.options.parseSearch(parsed.search)\n      // remove the leading `#` from the hash\n      rest.hash = parsed.hash.slice(1)\n    }\n\n    const location = this.buildLocation({\n      ...(rest as any),\n      _includeValidateSearch: true,\n    })\n    return this.commitLocation({\n      ...location,\n      viewTransition,\n      replace,\n      resetScroll,\n      hashScrollIntoView,\n      ignoreBlocker,\n    })\n  }\n\n  navigate: NavigateFn = ({ to, reloadDocument, href, ...rest }) => {\n    if (reloadDocument) {\n      if (!href) {\n        const location = this.buildLocation({ to, ...rest } as any)\n        href = this.history.createHref(location.href)\n      }\n      if (rest.replace) {\n        window.location.replace(href)\n      } else {\n        window.location.href = href\n      }\n      return\n    }\n\n    return this.buildAndCommitLocation({\n      ...rest,\n      href,\n      to: to as string,\n    })\n  }\n\n  latestLoadPromise: undefined | Promise<void>\n\n  load: LoadFn = async (opts?: { sync?: boolean }): Promise<void> => {\n    this.latestLocation = this.parseLocation(this.latestLocation)\n\n    let redirect: ResolvedRedirect | undefined\n    let notFound: NotFoundError | undefined\n\n    let loadPromise: Promise<void>\n\n    // eslint-disable-next-line prefer-const\n    loadPromise = new Promise<void>((resolve) => {\n      this.startTransition(async () => {\n        try {\n          const next = this.latestLocation\n          const prevLocation = this.state.resolvedLocation\n\n          // Cancel any pending matches\n          this.cancelMatches()\n\n          let pendingMatches!: Array<AnyRouteMatch>\n\n          batch(() => {\n            // this call breaks a route context of destination route after a redirect\n            // we should be fine not eagerly calling this since we call it later\n            // this.clearExpiredCache()\n\n            // Match the routes\n            pendingMatches = this.matchRoutes(next)\n\n            // Ingest the new matches\n            this.__store.setState((s) => ({\n              ...s,\n              status: 'pending',\n              isLoading: true,\n              location: next,\n              pendingMatches,\n              // If a cached moved to pendingMatches, remove it from cachedMatches\n              cachedMatches: s.cachedMatches.filter((d) => {\n                return !pendingMatches.find((e) => e.id === d.id)\n              }),\n            }))\n          })\n\n          if (!this.state.redirect) {\n            this.emit({\n              type: 'onBeforeNavigate',\n              ...getLocationChangeInfo({\n                resolvedLocation: prevLocation,\n                location: next,\n              }),\n            })\n          }\n\n          this.emit({\n            type: 'onBeforeLoad',\n            ...getLocationChangeInfo({\n              resolvedLocation: prevLocation,\n              location: next,\n            }),\n          })\n\n          await this.loadMatches({\n            sync: opts?.sync,\n            matches: pendingMatches,\n            location: next,\n            // eslint-disable-next-line @typescript-eslint/require-await\n            onReady: async () => {\n              // eslint-disable-next-line @typescript-eslint/require-await\n              this.startViewTransition(async () => {\n                // this.viewTransitionPromise = createControlledPromise<true>()\n\n                // Commit the pending matches. If a previous match was\n                // removed, place it in the cachedMatches\n                let exitingMatches!: Array<AnyRouteMatch>\n                let enteringMatches!: Array<AnyRouteMatch>\n                let stayingMatches!: Array<AnyRouteMatch>\n\n                batch(() => {\n                  this.__store.setState((s) => {\n                    const previousMatches = s.matches\n                    const newMatches = s.pendingMatches || s.matches\n\n                    exitingMatches = previousMatches.filter(\n                      (match) => !newMatches.find((d) => d.id === match.id),\n                    )\n                    enteringMatches = newMatches.filter(\n                      (match) =>\n                        !previousMatches.find((d) => d.id === match.id),\n                    )\n                    stayingMatches = previousMatches.filter((match) =>\n                      newMatches.find((d) => d.id === match.id),\n                    )\n\n                    return {\n                      ...s,\n                      isLoading: false,\n                      loadedAt: Date.now(),\n                      matches: newMatches,\n                      pendingMatches: undefined,\n                      cachedMatches: [\n                        ...s.cachedMatches,\n                        ...exitingMatches.filter((d) => d.status !== 'error'),\n                      ],\n                    }\n                  })\n                  this.clearExpiredCache()\n                })\n\n                //\n                ;(\n                  [\n                    [exitingMatches, 'onLeave'],\n                    [enteringMatches, 'onEnter'],\n                    [stayingMatches, 'onStay'],\n                  ] as const\n                ).forEach(([matches, hook]) => {\n                  matches.forEach((match) => {\n                    this.looseRoutesById[match.routeId]!.options[hook]?.(match)\n                  })\n                })\n              })\n            },\n          })\n        } catch (err) {\n          if (isResolvedRedirect(err)) {\n            redirect = err\n            if (!this.isServer) {\n              this.navigate({\n                ...redirect,\n                replace: true,\n                ignoreBlocker: true,\n              })\n            }\n          } else if (isNotFound(err)) {\n            notFound = err\n          }\n\n          this.__store.setState((s) => ({\n            ...s,\n            statusCode: redirect\n              ? redirect.statusCode\n              : notFound\n                ? 404\n                : s.matches.some((d) => d.status === 'error')\n                  ? 500\n                  : 200,\n            redirect,\n          }))\n        }\n\n        if (this.latestLoadPromise === loadPromise) {\n          this.commitLocationPromise?.resolve()\n          this.latestLoadPromise = undefined\n          this.commitLocationPromise = undefined\n        }\n        resolve()\n      })\n    })\n\n    this.latestLoadPromise = loadPromise\n\n    await loadPromise\n\n    while (\n      (this.latestLoadPromise as any) &&\n      loadPromise !== this.latestLoadPromise\n    ) {\n      await this.latestLoadPromise\n    }\n\n    if (this.hasNotFoundMatch()) {\n      this.__store.setState((s) => ({\n        ...s,\n        statusCode: 404,\n      }))\n    }\n  }\n\n  startViewTransition = (fn: () => Promise<void>) => {\n    // Determine if we should start a view transition from the navigation\n    // or from the router default\n    const shouldViewTransition =\n      this.shouldViewTransition ?? this.options.defaultViewTransition\n\n    // Reset the view transition flag\n    delete this.shouldViewTransition\n    // Attempt to start a view transition (or just apply the changes if we can't)\n    if (\n      shouldViewTransition &&\n      typeof document !== 'undefined' &&\n      'startViewTransition' in document &&\n      typeof document.startViewTransition === 'function'\n    ) {\n      // lib.dom.ts doesn't support viewTransition types variant yet.\n      // TODO: Fix this when dom types are updated\n      let startViewTransitionParams: any\n\n      if (\n        typeof shouldViewTransition === 'object' &&\n        this.isViewTransitionTypesSupported\n      ) {\n        startViewTransitionParams = {\n          update: fn,\n          types: shouldViewTransition.types,\n        }\n      } else {\n        startViewTransitionParams = fn\n      }\n\n      document.startViewTransition(startViewTransitionParams)\n    } else {\n      fn()\n    }\n  }\n\n  updateMatch: UpdateMatchFn = (id, updater) => {\n    let updated!: AnyRouteMatch\n    const isPending = this.state.pendingMatches?.find((d) => d.id === id)\n    const isMatched = this.state.matches.find((d) => d.id === id)\n    const isCached = this.state.cachedMatches.find((d) => d.id === id)\n\n    const matchesKey = isPending\n      ? 'pendingMatches'\n      : isMatched\n        ? 'matches'\n        : isCached\n          ? 'cachedMatches'\n          : ''\n\n    if (matchesKey) {\n      this.__store.setState((s) => ({\n        ...s,\n        [matchesKey]: s[matchesKey]?.map((d) =>\n          d.id === id ? (updated = updater(d)) : d,\n        ),\n      }))\n    }\n\n    return updated\n  }\n\n  getMatch: GetMatchFn = (matchId: string) => {\n    return [\n      ...this.state.cachedMatches,\n      ...(this.state.pendingMatches ?? []),\n      ...this.state.matches,\n    ].find((d) => d.id === matchId)\n  }\n\n  loadMatches = async ({\n    location,\n    matches,\n    preload: allPreload,\n    onReady,\n    updateMatch = this.updateMatch,\n    sync,\n  }: {\n    location: ParsedLocation\n    matches: Array<AnyRouteMatch>\n    preload?: boolean\n    onReady?: () => Promise<void>\n    updateMatch?: (\n      id: string,\n      updater: (match: AnyRouteMatch) => AnyRouteMatch,\n    ) => void\n    getMatch?: (matchId: string) => AnyRouteMatch | undefined\n    sync?: boolean\n  }): Promise<Array<MakeRouteMatch>> => {\n    let firstBadMatchIndex: number | undefined\n    let rendered = false\n\n    const triggerOnReady = async () => {\n      if (!rendered) {\n        rendered = true\n        await onReady?.()\n      }\n    }\n\n    const resolvePreload = (matchId: string) => {\n      return !!(allPreload && !this.state.matches.find((d) => d.id === matchId))\n    }\n\n    if (!this.isServer && !this.state.matches.length) {\n      triggerOnReady()\n    }\n\n    const handleRedirectAndNotFound = (match: AnyRouteMatch, err: any) => {\n      if (isResolvedRedirect(err)) {\n        if (!err.reloadDocument) {\n          throw err\n        }\n      }\n\n      if (isRedirect(err) || isNotFound(err)) {\n        updateMatch(match.id, (prev) => ({\n          ...prev,\n          status: isRedirect(err)\n            ? 'redirected'\n            : isNotFound(err)\n              ? 'notFound'\n              : 'error',\n          isFetching: false,\n          error: err,\n          beforeLoadPromise: undefined,\n          loaderPromise: undefined,\n        }))\n\n        if (!(err as any).routeId) {\n          ;(err as any).routeId = match.routeId\n        }\n\n        match.beforeLoadPromise?.resolve()\n        match.loaderPromise?.resolve()\n        match.loadPromise?.resolve()\n\n        if (isRedirect(err)) {\n          rendered = true\n          err = this.resolveRedirect({ ...err, _fromLocation: location })\n          throw err\n        } else if (isNotFound(err)) {\n          this._handleNotFound(matches, err, {\n            updateMatch,\n          })\n          this.serverSsr?.onMatchSettled({\n            router: this,\n            match: this.getMatch(match.id)!,\n          })\n          throw err\n        }\n      }\n    }\n\n    try {\n      await new Promise<void>((resolveAll, rejectAll) => {\n        ;(async () => {\n          try {\n            const handleSerialError = (\n              index: number,\n              err: any,\n              routerCode: string,\n            ) => {\n              const { id: matchId, routeId } = matches[index]!\n              const route = this.looseRoutesById[routeId]!\n\n              // Much like suspense, we use a promise here to know if\n              // we've been outdated by a new loadMatches call and\n              // should abort the current async operation\n              if (err instanceof Promise) {\n                throw err\n              }\n\n              err.routerCode = routerCode\n              firstBadMatchIndex = firstBadMatchIndex ?? index\n              handleRedirectAndNotFound(this.getMatch(matchId)!, err)\n\n              try {\n                route.options.onError?.(err)\n              } catch (errorHandlerErr) {\n                err = errorHandlerErr\n                handleRedirectAndNotFound(this.getMatch(matchId)!, err)\n              }\n\n              updateMatch(matchId, (prev) => {\n                prev.beforeLoadPromise?.resolve()\n                prev.loadPromise?.resolve()\n\n                return {\n                  ...prev,\n                  error: err,\n                  status: 'error',\n                  isFetching: false,\n                  updatedAt: Date.now(),\n                  abortController: new AbortController(),\n                  beforeLoadPromise: undefined,\n                }\n              })\n            }\n\n            for (const [index, { id: matchId, routeId }] of matches.entries()) {\n              const existingMatch = this.getMatch(matchId)!\n              const parentMatchId = matches[index - 1]?.id\n\n              const route = this.looseRoutesById[routeId]!\n\n              const pendingMs =\n                route.options.pendingMs ?? this.options.defaultPendingMs\n\n              const shouldPending = !!(\n                onReady &&\n                !this.isServer &&\n                !resolvePreload(matchId) &&\n                (route.options.loader || route.options.beforeLoad) &&\n                typeof pendingMs === 'number' &&\n                pendingMs !== Infinity &&\n                (route.options.pendingComponent ??\n                  (this.options as any)?.defaultPendingComponent)\n              )\n\n              let executeBeforeLoad = true\n              if (\n                // If we are in the middle of a load, either of these will be present\n                // (not to be confused with `loadPromise`, which is always defined)\n                existingMatch.beforeLoadPromise ||\n                existingMatch.loaderPromise\n              ) {\n                if (shouldPending) {\n                  setTimeout(() => {\n                    try {\n                      // Update the match and prematurely resolve the loadMatches promise so that\n                      // the pending component can start rendering\n                      triggerOnReady()\n                    } catch {}\n                  }, pendingMs)\n                }\n\n                // Wait for the beforeLoad to resolve before we continue\n                await existingMatch.beforeLoadPromise\n                executeBeforeLoad = this.getMatch(matchId)!.status !== 'success'\n              }\n              if (executeBeforeLoad) {\n                // If we are not in the middle of a load OR the previous load failed, start it\n                try {\n                  updateMatch(matchId, (prev) => {\n                    // explicitly capture the previous loadPromise\n                    const prevLoadPromise = prev.loadPromise\n                    return {\n                      ...prev,\n                      loadPromise: createControlledPromise<void>(() => {\n                        prevLoadPromise?.resolve()\n                      }),\n                      beforeLoadPromise: createControlledPromise<void>(),\n                    }\n                  })\n                  const abortController = new AbortController()\n\n                  let pendingTimeout: ReturnType<typeof setTimeout>\n\n                  if (shouldPending) {\n                    // If we might show a pending component, we need to wait for the\n                    // pending promise to resolve before we start showing that state\n                    pendingTimeout = setTimeout(() => {\n                      try {\n                        // Update the match and prematurely resolve the loadMatches promise so that\n                        // the pending component can start rendering\n                        triggerOnReady()\n                      } catch {}\n                    }, pendingMs)\n                  }\n\n                  const { paramsError, searchError } = this.getMatch(matchId)!\n\n                  if (paramsError) {\n                    handleSerialError(index, paramsError, 'PARSE_PARAMS')\n                  }\n\n                  if (searchError) {\n                    handleSerialError(index, searchError, 'VALIDATE_SEARCH')\n                  }\n\n                  const getParentMatchContext = () =>\n                    parentMatchId\n                      ? this.getMatch(parentMatchId)!.context\n                      : (this.options.context ?? {})\n\n                  updateMatch(matchId, (prev) => ({\n                    ...prev,\n                    isFetching: 'beforeLoad',\n                    fetchCount: prev.fetchCount + 1,\n                    abortController,\n                    pendingTimeout,\n                    context: {\n                      ...getParentMatchContext(),\n                      ...prev.__routeContext,\n                    },\n                  }))\n\n                  const { search, params, context, cause } =\n                    this.getMatch(matchId)!\n\n                  const preload = resolvePreload(matchId)\n\n                  const beforeLoadFnContext: BeforeLoadContextOptions<\n                    any,\n                    any,\n                    any,\n                    any,\n                    any\n                  > = {\n                    search,\n                    abortController,\n                    params,\n                    preload,\n                    context,\n                    location,\n                    navigate: (opts: any) =>\n                      this.navigate({ ...opts, _fromLocation: location }),\n                    buildLocation: this.buildLocation,\n                    cause: preload ? 'preload' : cause,\n                    matches,\n                  }\n\n                  const beforeLoadContext =\n                    (await route.options.beforeLoad?.(beforeLoadFnContext)) ??\n                    {}\n\n                  if (\n                    isRedirect(beforeLoadContext) ||\n                    isNotFound(beforeLoadContext)\n                  ) {\n                    handleSerialError(index, beforeLoadContext, 'BEFORE_LOAD')\n                  }\n\n                  updateMatch(matchId, (prev) => {\n                    return {\n                      ...prev,\n                      __beforeLoadContext: beforeLoadContext,\n                      context: {\n                        ...getParentMatchContext(),\n                        ...prev.__routeContext,\n                        ...beforeLoadContext,\n                      },\n                      abortController,\n                    }\n                  })\n                } catch (err) {\n                  handleSerialError(index, err, 'BEFORE_LOAD')\n                }\n\n                updateMatch(matchId, (prev) => {\n                  prev.beforeLoadPromise?.resolve()\n\n                  return {\n                    ...prev,\n                    beforeLoadPromise: undefined,\n                    isFetching: false,\n                  }\n                })\n              }\n            }\n\n            const validResolvedMatches = matches.slice(0, firstBadMatchIndex)\n            const matchPromises: Array<Promise<AnyRouteMatch>> = []\n\n            validResolvedMatches.forEach(({ id: matchId, routeId }, index) => {\n              matchPromises.push(\n                (async () => {\n                  const { loaderPromise: prevLoaderPromise } =\n                    this.getMatch(matchId)!\n\n                  let loaderShouldRunAsync = false\n                  let loaderIsRunningAsync = false\n\n                  if (prevLoaderPromise) {\n                    await prevLoaderPromise\n                    const match = this.getMatch(matchId)!\n                    if (match.error) {\n                      handleRedirectAndNotFound(match, match.error)\n                    }\n                  } else {\n                    const parentMatchPromise = matchPromises[index - 1] as any\n                    const route = this.looseRoutesById[routeId]!\n\n                    const getLoaderContext = (): LoaderFnContext => {\n                      const {\n                        params,\n                        loaderDeps,\n                        abortController,\n                        context,\n                        cause,\n                      } = this.getMatch(matchId)!\n\n                      const preload = resolvePreload(matchId)\n\n                      return {\n                        params,\n                        deps: loaderDeps,\n                        preload: !!preload,\n                        parentMatchPromise,\n                        abortController: abortController,\n                        context,\n                        location,\n                        navigate: (opts) =>\n                          this.navigate({ ...opts, _fromLocation: location }),\n                        cause: preload ? 'preload' : cause,\n                        route,\n                      }\n                    }\n\n                    // This is where all of the stale-while-revalidate magic happens\n                    const age = Date.now() - this.getMatch(matchId)!.updatedAt\n\n                    const preload = resolvePreload(matchId)\n\n                    const staleAge = preload\n                      ? (route.options.preloadStaleTime ??\n                        this.options.defaultPreloadStaleTime ??\n                        30_000) // 30 seconds for preloads by default\n                      : (route.options.staleTime ??\n                        this.options.defaultStaleTime ??\n                        0)\n\n                    const shouldReloadOption = route.options.shouldReload\n\n                    // Default to reloading the route all the time\n                    // Allow shouldReload to get the last say,\n                    // if provided.\n                    const shouldReload =\n                      typeof shouldReloadOption === 'function'\n                        ? shouldReloadOption(getLoaderContext())\n                        : shouldReloadOption\n\n                    updateMatch(matchId, (prev) => ({\n                      ...prev,\n                      loaderPromise: createControlledPromise<void>(),\n                      preload:\n                        !!preload &&\n                        !this.state.matches.find((d) => d.id === matchId),\n                    }))\n\n                    const runLoader = async () => {\n                      try {\n                        // If the Matches component rendered\n                        // the pending component and needs to show it for\n                        // a minimum duration, we''ll wait for it to resolve\n                        // before committing to the match and resolving\n                        // the loadPromise\n                        const potentialPendingMinPromise = async () => {\n                          const latestMatch = this.getMatch(matchId)!\n\n                          if (latestMatch.minPendingPromise) {\n                            await latestMatch.minPendingPromise\n                          }\n                        }\n\n                        // Actually run the loader and handle the result\n                        try {\n                          this.loadRouteChunk(route)\n\n                          updateMatch(matchId, (prev) => ({\n                            ...prev,\n                            isFetching: 'loader',\n                          }))\n\n                          // Kick off the loader!\n                          const loaderData =\n                            await route.options.loader?.(getLoaderContext())\n\n                          handleRedirectAndNotFound(\n                            this.getMatch(matchId)!,\n                            loaderData,\n                          )\n\n                          // Lazy option can modify the route options,\n                          // so we need to wait for it to resolve before\n                          // we can use the options\n                          await route._lazyPromise\n\n                          await potentialPendingMinPromise()\n\n                          const assetContext = {\n                            matches,\n                            match: this.getMatch(matchId)!,\n                            params: this.getMatch(matchId)!.params,\n                            loaderData,\n                          }\n                          const headFnContent =\n                            route.options.head?.(assetContext)\n                          const meta = headFnContent?.meta\n                          const links = headFnContent?.links\n                          const headScripts = headFnContent?.scripts\n\n                          const scripts = route.options.scripts?.(assetContext)\n                          const headers = route.options.headers?.({\n                            loaderData,\n                          })\n\n                          updateMatch(matchId, (prev) => ({\n                            ...prev,\n                            error: undefined,\n                            status: 'success',\n                            isFetching: false,\n                            updatedAt: Date.now(),\n                            loaderData,\n                            meta,\n                            links,\n                            headScripts,\n                            headers,\n                            scripts,\n                          }))\n                        } catch (e) {\n                          let error = e\n\n                          await potentialPendingMinPromise()\n\n                          handleRedirectAndNotFound(this.getMatch(matchId)!, e)\n\n                          try {\n                            route.options.onError?.(e)\n                          } catch (onErrorError) {\n                            error = onErrorError\n                            handleRedirectAndNotFound(\n                              this.getMatch(matchId)!,\n                              onErrorError,\n                            )\n                          }\n\n                          updateMatch(matchId, (prev) => ({\n                            ...prev,\n                            error,\n                            status: 'error',\n                            isFetching: false,\n                          }))\n                        }\n\n                        this.serverSsr?.onMatchSettled({\n                          router: this,\n                          match: this.getMatch(matchId)!,\n                        })\n\n                        // Last but not least, wait for the the components\n                        // to be preloaded before we resolve the match\n                        await route._componentsPromise\n                      } catch (err) {\n                        updateMatch(matchId, (prev) => ({\n                          ...prev,\n                          loaderPromise: undefined,\n                        }))\n                        handleRedirectAndNotFound(this.getMatch(matchId)!, err)\n                      }\n                    }\n\n                    // If the route is successful and still fresh, just resolve\n                    const { status, invalid } = this.getMatch(matchId)!\n                    loaderShouldRunAsync =\n                      status === 'success' &&\n                      (invalid || (shouldReload ?? age > staleAge))\n                    if (preload && route.options.preload === false) {\n                      // Do nothing\n                    } else if (loaderShouldRunAsync && !sync) {\n                      loaderIsRunningAsync = true\n                      ;(async () => {\n                        try {\n                          await runLoader()\n                          const { loaderPromise, loadPromise } =\n                            this.getMatch(matchId)!\n                          loaderPromise?.resolve()\n                          loadPromise?.resolve()\n                          updateMatch(matchId, (prev) => ({\n                            ...prev,\n                            loaderPromise: undefined,\n                          }))\n                        } catch (err) {\n                          if (isResolvedRedirect(err)) {\n                            await this.navigate(err)\n                          }\n                        }\n                      })()\n                    } else if (\n                      status !== 'success' ||\n                      (loaderShouldRunAsync && sync)\n                    ) {\n                      await runLoader()\n                    }\n                  }\n                  if (!loaderIsRunningAsync) {\n                    const { loaderPromise, loadPromise } =\n                      this.getMatch(matchId)!\n                    loaderPromise?.resolve()\n                    loadPromise?.resolve()\n                  }\n\n                  updateMatch(matchId, (prev) => ({\n                    ...prev,\n                    isFetching: loaderIsRunningAsync ? prev.isFetching : false,\n                    loaderPromise: loaderIsRunningAsync\n                      ? prev.loaderPromise\n                      : undefined,\n                    invalid: false,\n                  }))\n                  return this.getMatch(matchId)!\n                })(),\n              )\n            })\n\n            await Promise.all(matchPromises)\n\n            resolveAll()\n          } catch (err) {\n            rejectAll(err)\n          }\n        })()\n      })\n      await triggerOnReady()\n    } catch (err) {\n      if (isRedirect(err) || isNotFound(err)) {\n        if (isNotFound(err) && !allPreload) {\n          await triggerOnReady()\n        }\n\n        throw err\n      }\n    }\n\n    return matches\n  }\n\n  invalidate: InvalidateFn<\n    RouterCore<\n      TRouteTree,\n      TTrailingSlashOption,\n      TDefaultStructuralSharingOption,\n      TRouterHistory,\n      TDehydrated\n    >\n  > = (opts) => {\n    const invalidate = (d: MakeRouteMatch<TRouteTree>) => {\n      if (opts?.filter?.(d as MakeRouteMatchUnion<this>) ?? true) {\n        return {\n          ...d,\n          invalid: true,\n          ...(d.status === 'error'\n            ? ({ status: 'pending', error: undefined } as const)\n            : {}),\n        }\n      }\n      return d\n    }\n\n    this.__store.setState((s) => ({\n      ...s,\n      matches: s.matches.map(invalidate),\n      cachedMatches: s.cachedMatches.map(invalidate),\n      pendingMatches: s.pendingMatches?.map(invalidate),\n    }))\n\n    return this.load({ sync: opts?.sync })\n  }\n\n  resolveRedirect = (err: AnyRedirect): ResolvedRedirect => {\n    const redirect = err as ResolvedRedirect\n\n    if (!redirect.href) {\n      redirect.href = this.buildLocation(redirect as any).href\n    }\n\n    return redirect\n  }\n\n  clearCache: ClearCacheFn<this> = (opts) => {\n    const filter = opts?.filter\n    if (filter !== undefined) {\n      this.__store.setState((s) => {\n        return {\n          ...s,\n          cachedMatches: s.cachedMatches.filter(\n            (m) => !filter(m as MakeRouteMatchUnion<this>),\n          ),\n        }\n      })\n    } else {\n      this.__store.setState((s) => {\n        return {\n          ...s,\n          cachedMatches: [],\n        }\n      })\n    }\n  }\n\n  clearExpiredCache = () => {\n    // This is where all of the garbage collection magic happens\n    const filter = (d: MakeRouteMatch<TRouteTree>) => {\n      const route = this.looseRoutesById[d.routeId]!\n\n      if (!route.options.loader) {\n        return true\n      }\n\n      // If the route was preloaded, use the preloadGcTime\n      // otherwise, use the gcTime\n      const gcTime =\n        (d.preload\n          ? (route.options.preloadGcTime ?? this.options.defaultPreloadGcTime)\n          : (route.options.gcTime ?? this.options.defaultGcTime)) ??\n        5 * 60 * 1000\n\n      return !(d.status !== 'error' && Date.now() - d.updatedAt < gcTime)\n    }\n    this.clearCache({ filter })\n  }\n\n  loadRouteChunk = (route: AnyRoute) => {\n    if (route._lazyPromise === undefined) {\n      if (route.lazyFn) {\n        route._lazyPromise = route.lazyFn().then((lazyRoute) => {\n          // explicitly don't copy over the lazy route's id\n          const { id: _id, ...options } = lazyRoute.options\n          Object.assign(route.options, options)\n        })\n      } else {\n        route._lazyPromise = Promise.resolve()\n      }\n    }\n\n    // If for some reason lazy resolves more lazy components...\n    // We'll wait for that before pre attempt to preload any\n    // components themselves.\n    if (route._componentsPromise === undefined) {\n      route._componentsPromise = route._lazyPromise.then(() =>\n        Promise.all(\n          componentTypes.map(async (type) => {\n            const component = route.options[type]\n            if ((component as any)?.preload) {\n              await (component as any).preload()\n            }\n          }),\n        ),\n      )\n    }\n    return route._componentsPromise\n  }\n\n  preloadRoute: PreloadRouteFn<\n    TRouteTree,\n    TTrailingSlashOption,\n    TDefaultStructuralSharingOption,\n    TRouterHistory\n  > = async (opts) => {\n    const next = this.buildLocation(opts as any)\n\n    let matches = this.matchRoutes(next, {\n      throwOnError: true,\n      preload: true,\n      dest: opts,\n    })\n\n    const activeMatchIds = new Set(\n      [...this.state.matches, ...(this.state.pendingMatches ?? [])].map(\n        (d) => d.id,\n      ),\n    )\n\n    const loadedMatchIds = new Set([\n      ...activeMatchIds,\n      ...this.state.cachedMatches.map((d) => d.id),\n    ])\n\n    // If the matches are already loaded, we need to add them to the cachedMatches\n    batch(() => {\n      matches.forEach((match) => {\n        if (!loadedMatchIds.has(match.id)) {\n          this.__store.setState((s) => ({\n            ...s,\n            cachedMatches: [...(s.cachedMatches as any), match],\n          }))\n        }\n      })\n    })\n\n    try {\n      matches = await this.loadMatches({\n        matches,\n        location: next,\n        preload: true,\n        updateMatch: (id, updater) => {\n          // Don't update the match if it's currently loaded\n          if (activeMatchIds.has(id)) {\n            matches = matches.map((d) => (d.id === id ? updater(d) : d))\n          } else {\n            this.updateMatch(id, updater)\n          }\n        },\n      })\n\n      return matches\n    } catch (err) {\n      if (isRedirect(err)) {\n        if (err.reloadDocument) {\n          return undefined\n        }\n        return await this.preloadRoute({\n          ...(err as any),\n          _fromLocation: next,\n        })\n      }\n      if (!isNotFound(err)) {\n        // Preload errors are not fatal, but we should still log them\n        console.error(err)\n      }\n      return undefined\n    }\n  }\n\n  matchRoute: MatchRouteFn<\n    TRouteTree,\n    TTrailingSlashOption,\n    TDefaultStructuralSharingOption,\n    TRouterHistory\n  > = (location, opts) => {\n    const matchLocation = {\n      ...location,\n      to: location.to\n        ? this.resolvePathWithBase(\n            (location.from || '') as string,\n            location.to as string,\n          )\n        : undefined,\n      params: location.params || {},\n      leaveParams: true,\n    }\n    const next = this.buildLocation(matchLocation as any)\n\n    if (opts?.pending && this.state.status !== 'pending') {\n      return false\n    }\n\n    const pending =\n      opts?.pending === undefined ? !this.state.isLoading : opts.pending\n\n    const baseLocation = pending\n      ? this.latestLocation\n      : this.state.resolvedLocation || this.state.location\n\n    const match = matchPathname(this.basepath, baseLocation.pathname, {\n      ...opts,\n      to: next.pathname,\n    }) as any\n\n    if (!match) {\n      return false\n    }\n    if (location.params) {\n      if (!deepEqual(match, location.params, { partial: true })) {\n        return false\n      }\n    }\n\n    if (match && (opts?.includeSearch ?? true)) {\n      return deepEqual(baseLocation.search, next.search, { partial: true })\n        ? match\n        : false\n    }\n\n    return match\n  }\n\n  ssr?: {\n    manifest: Manifest | undefined\n    serializer: StartSerializer\n  }\n\n  serverSsr?: {\n    injectedHtml: Array<InjectedHtmlEntry>\n    injectHtml: (getHtml: () => string | Promise<string>) => Promise<void>\n    injectScript: (\n      getScript: () => string | Promise<string>,\n      opts?: { logScript?: boolean },\n    ) => Promise<void>\n    streamValue: (key: string, value: any) => void\n    streamedKeys: Set<string>\n    onMatchSettled: (opts: { router: AnyRouter; match: AnyRouteMatch }) => any\n  }\n\n  clientSsr?: {\n    getStreamedValue: <T>(key: string) => T | undefined\n  }\n\n  _handleNotFound = (\n    matches: Array<AnyRouteMatch>,\n    err: NotFoundError,\n    {\n      updateMatch = this.updateMatch,\n    }: {\n      updateMatch?: (\n        id: string,\n        updater: (match: AnyRouteMatch) => AnyRouteMatch,\n      ) => void\n    } = {},\n  ) => {\n    // Find the route that should handle the not found error\n    // First check if a specific route is requested to show the error\n    const routeCursor = this.routesById[err.routeId ?? ''] ?? this.routeTree\n    const matchesByRouteId: Record<string, AnyRouteMatch> = {}\n\n    // Setup routesByRouteId object for quick access\n    for (const match of matches) {\n      matchesByRouteId[match.routeId] = match\n    }\n\n    // Ensure a NotFoundComponent exists on the route\n    if (\n      !routeCursor.options.notFoundComponent &&\n      (this.options as any)?.defaultNotFoundComponent\n    ) {\n      routeCursor.options.notFoundComponent = (\n        this.options as any\n      ).defaultNotFoundComponent\n    }\n\n    // Ensure we have a notFoundComponent\n    invariant(\n      routeCursor.options.notFoundComponent,\n      'No notFoundComponent found. Please set a notFoundComponent on your route or provide a defaultNotFoundComponent to the router.',\n    )\n\n    // Find the match for this route\n    const matchForRoute = matchesByRouteId[routeCursor.id]\n\n    invariant(\n      matchForRoute,\n      'Could not find match for route: ' + routeCursor.id,\n    )\n\n    // Assign the error to the match - using non-null assertion since we've checked with invariant\n    updateMatch(matchForRoute.id, (prev) => ({\n      ...prev,\n      status: 'notFound',\n      error: err,\n      isFetching: false,\n    }))\n\n    if ((err as any).routerCode === 'BEFORE_LOAD' && routeCursor.parentRoute) {\n      err.routeId = routeCursor.parentRoute.id\n      this._handleNotFound(matches, err, {\n        updateMatch,\n      })\n    }\n  }\n\n  hasNotFoundMatch = () => {\n    return this.__store.state.matches.some(\n      (d) => d.status === 'notFound' || d.globalNotFound,\n    )\n  }\n}\n\nexport class SearchParamError extends Error {}\n\nexport class PathParamError extends Error {}\n\n// A function that takes an import() argument which is a function and returns a new function that will\n// proxy arguments from the caller to the imported function, retaining all type\n// information along the way\nexport function lazyFn<\n  T extends Record<string, (...args: Array<any>) => any>,\n  TKey extends keyof T = 'default',\n>(fn: () => Promise<T>, key?: TKey) {\n  return async (\n    ...args: Parameters<T[TKey]>\n  ): Promise<Awaited<ReturnType<T[TKey]>>> => {\n    const imported = await fn()\n    return imported[key || 'default'](...args)\n  }\n}\n\nexport function getInitialRouterState(\n  location: ParsedLocation,\n): RouterState<any> {\n  return {\n    loadedAt: 0,\n    isLoading: false,\n    isTransitioning: false,\n    status: 'idle',\n    resolvedLocation: undefined,\n    location,\n    matches: [],\n    pendingMatches: [],\n    cachedMatches: [],\n    statusCode: 200,\n  }\n}\n\nfunction validateSearch(validateSearch: AnyValidator, input: unknown): unknown {\n  if (validateSearch == null) return {}\n\n  if ('~standard' in validateSearch) {\n    const result = validateSearch['~standard'].validate(input)\n\n    if (result instanceof Promise)\n      throw new SearchParamError('Async validation not supported')\n\n    if (result.issues)\n      throw new SearchParamError(JSON.stringify(result.issues, undefined, 2), {\n        cause: result,\n      })\n\n    return result.value\n  }\n\n  if ('parse' in validateSearch) {\n    return validateSearch.parse(input)\n  }\n\n  if (typeof validateSearch === 'function') {\n    return validateSearch(input)\n  }\n\n  return {}\n}\n\nexport const componentTypes = [\n  'component',\n  'errorComponent',\n  'pendingComponent',\n  'notFoundComponent',\n] as const\n\nfunction routeNeedsPreload(route: AnyRoute) {\n  for (const componentType of componentTypes) {\n    if ((route.options[componentType] as any)?.preload) {\n      return true\n    }\n  }\n  return false\n}\n", "import { defaultSerializeError } from './router'\n\nexport const TSR_DEFERRED_PROMISE = Symbol.for('TSR_DEFERRED_PROMISE')\n\nexport type DeferredPromiseState<T> =\n  | {\n      status: 'pending'\n      data?: T\n      error?: unknown\n    }\n  | {\n      status: 'success'\n      data: T\n    }\n  | {\n      status: 'error'\n      data?: T\n      error: unknown\n    }\n\nexport type DeferredPromise<T> = Promise<T> & {\n  [TSR_DEFERRED_PROMISE]: DeferredPromiseState<T>\n}\n\nexport function defer<T>(\n  _promise: Promise<T>,\n  options?: {\n    serializeError?: typeof defaultSerializeError\n  },\n) {\n  const promise = _promise as DeferredPromise<T>\n  // this is already deferred promise\n  if ((promise as any)[TSR_DEFERRED_PROMISE]) {\n    return promise\n  }\n  promise[TSR_DEFERRED_PROMISE] = { status: 'pending' }\n\n  promise\n    .then((data) => {\n      promise[TSR_DEFERRED_PROMISE].status = 'success'\n      promise[TSR_DEFERRED_PROMISE].data = data\n    })\n    .catch((error) => {\n      promise[TSR_DEFERRED_PROMISE].status = 'error'\n      ;(promise[TSR_DEFERRED_PROMISE] as any).error = {\n        data: (options?.serializeError ?? defaultSerializeError)(error),\n        __isServerError: true,\n      }\n    })\n\n  return promise\n}\n", "import type { HistoryState, ParsedHistoryState } from '@tanstack/history'\nimport type {\n  AllParams,\n  CatchAllPaths,\n  CurrentPath,\n  FullSearchSchema,\n  FullSearchSchemaInput,\n  ParentPath,\n  RouteByPath,\n  RouteByToPath,\n  RoutePaths,\n  RouteToPath,\n  ToPath,\n} from './routeInfo'\nimport type {\n  AnyRouter,\n  RegisteredRouter,\n  ViewTransitionOptions,\n} from './router'\nimport type {\n  ConstrainLiteral,\n  Expand,\n  MakeDifferenceOptional,\n  NoInfer,\n  NonNullableUpdater,\n  PickRequired,\n  Updater,\n  WithoutEmpty,\n} from './utils'\nimport type { ParsedLocation } from './location'\n\nexport type IsRequiredParams<TParams> =\n  Record<never, never> extends TParams ? never : true\n\nexport type ParsePathParams<T extends string, TAcc = never> = T &\n  `${string}$${string}` extends never\n  ? TAcc\n  : T extends `${string}$${infer TPossiblyParam}`\n    ? TPossiblyParam extends ''\n      ? TAcc\n      : TPossiblyParam & `${string}/${string}` extends never\n        ? TPossiblyParam | TAcc\n        : TPossiblyParam extends `${infer TParam}/${infer TRest}`\n          ? ParsePathParams<TRest, TParam extends '' ? TAcc : TParam | TAcc>\n          : never\n    : TAcc\n\nexport type AddTrailingSlash<T> = T extends `${string}/` ? T : `${T & string}/`\n\nexport type RemoveTrailingSlashes<T> = T & `${string}/` extends never\n  ? T\n  : T extends `${infer R}/`\n    ? R\n    : T\n\nexport type AddLeadingSlash<T> = T & `/${string}` extends never\n  ? `/${T & string}`\n  : T\n\nexport type RemoveLeadingSlashes<T> = T & `/${string}` extends never\n  ? T\n  : T extends `/${infer R}`\n    ? R\n    : T\n\ntype JoinPath<TLeft extends string, TRight extends string> = TRight extends ''\n  ? TLeft\n  : TLeft extends ''\n    ? TRight\n    : `${RemoveTrailingSlashes<TLeft>}/${RemoveLeadingSlashes<TRight>}`\n\ntype RemoveLastSegment<\n  T extends string,\n  TAcc extends string = '',\n> = T extends `${infer TSegment}/${infer TRest}`\n  ? TRest & `${string}/${string}` extends never\n    ? TRest extends ''\n      ? TAcc\n      : `${TAcc}${TSegment}`\n    : RemoveLastSegment<TRest, `${TAcc}${TSegment}/`>\n  : TAcc\n\nexport type ResolveCurrentPath<\n  TFrom extends string,\n  TTo extends string,\n> = TTo extends '.'\n  ? TFrom\n  : TTo extends './'\n    ? AddTrailingSlash<TFrom>\n    : TTo & `./${string}` extends never\n      ? never\n      : TTo extends `./${infer TRest}`\n        ? AddLeadingSlash<JoinPath<TFrom, TRest>>\n        : never\n\nexport type ResolveParentPath<\n  TFrom extends string,\n  TTo extends string,\n> = TTo extends '../' | '..'\n  ? TFrom extends '' | '/'\n    ? never\n    : AddLeadingSlash<RemoveLastSegment<TFrom>>\n  : TTo & `../${string}` extends never\n    ? AddLeadingSlash<JoinPath<TFrom, TTo>>\n    : TFrom extends '' | '/'\n      ? never\n      : TTo extends `../${infer ToRest}`\n        ? ResolveParentPath<RemoveLastSegment<TFrom>, ToRest>\n        : AddLeadingSlash<JoinPath<TFrom, TTo>>\n\nexport type ResolveRelativePath<TFrom, TTo = '.'> = string extends TFrom\n  ? TTo\n  : string extends TTo\n    ? TFrom\n    : undefined extends TTo\n      ? TFrom\n      : TTo extends string\n        ? TFrom extends string\n          ? TTo extends `/${string}`\n            ? TTo\n            : TTo extends `..${string}`\n              ? ResolveParentPath<TFrom, TTo>\n              : TTo extends `.${string}`\n                ? ResolveCurrentPath<TFrom, TTo>\n                : AddLeadingSlash<JoinPath<TFrom, TTo>>\n          : never\n        : never\n\nexport type FindDescendantToPaths<\n  TRouter extends AnyRouter,\n  TPrefix extends string,\n> = `${TPrefix}/${string}` & RouteToPath<TRouter>\n\nexport type InferDescendantToPaths<\n  TRouter extends AnyRouter,\n  TPrefix extends string,\n  TPaths = FindDescendantToPaths<TRouter, TPrefix>,\n> = TPaths extends `${TPrefix}/`\n  ? never\n  : TPaths extends `${TPrefix}/${infer TRest}`\n    ? TRest\n    : never\n\nexport type RelativeToPath<\n  TRouter extends AnyRouter,\n  TTo extends string,\n  TResolvedPath extends string,\n> =\n  | (TResolvedPath & RouteToPath<TRouter> extends never\n      ? never\n      : ToPath<TRouter, TTo>)\n  | `${RemoveTrailingSlashes<TTo>}/${InferDescendantToPaths<TRouter, RemoveTrailingSlashes<TResolvedPath>>}`\n\nexport type RelativeToParentPath<\n  TRouter extends AnyRouter,\n  TFrom extends string,\n  TTo extends string,\n  TResolvedPath extends string = ResolveRelativePath<TFrom, TTo>,\n> =\n  | RelativeToPath<TRouter, TTo, TResolvedPath>\n  | (TTo extends `${string}..` | `${string}../`\n      ? TResolvedPath extends '/' | ''\n        ? never\n        : FindDescendantToPaths<\n              TRouter,\n              RemoveTrailingSlashes<TResolvedPath>\n            > extends never\n          ? never\n          : `${RemoveTrailingSlashes<TTo>}/${ParentPath<TRouter>}`\n      : never)\n\nexport type RelativeToCurrentPath<\n  TRouter extends AnyRouter,\n  TFrom extends string,\n  TTo extends string,\n  TResolvedPath extends string = ResolveRelativePath<TFrom, TTo>,\n> = RelativeToPath<TRouter, TTo, TResolvedPath> | CurrentPath<TRouter>\n\nexport type AbsoluteToPath<TRouter extends AnyRouter, TFrom extends string> =\n  | (string extends TFrom\n      ? CurrentPath<TRouter>\n      : TFrom extends `/`\n        ? never\n        : CurrentPath<TRouter>)\n  | (string extends TFrom\n      ? ParentPath<TRouter>\n      : TFrom extends `/`\n        ? never\n        : ParentPath<TRouter>)\n  | RouteToPath<TRouter>\n  | (TFrom extends '/'\n      ? never\n      : string extends TFrom\n        ? never\n        : InferDescendantToPaths<TRouter, RemoveTrailingSlashes<TFrom>>)\n\nexport type RelativeToPathAutoComplete<\n  TRouter extends AnyRouter,\n  TFrom extends string,\n  TTo extends string,\n> = string extends TTo\n  ? string\n  : string extends TFrom\n    ? AbsoluteToPath<TRouter, TFrom>\n    : TTo & `..${string}` extends never\n      ? TTo & `.${string}` extends never\n        ? AbsoluteToPath<TRouter, TFrom>\n        : RelativeToCurrentPath<TRouter, TFrom, TTo>\n      : RelativeToParentPath<TRouter, TFrom, TTo>\n\nexport type NavigateOptions<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = '.',\n  TMaskFrom extends string = TFrom,\n  TMaskTo extends string = '.',\n> = ToOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo> & NavigateOptionProps\n\n/**\n * The NavigateOptions type is used to describe the options that can be used when describing a navigation action in TanStack Router.\n * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType)\n */\nexport interface NavigateOptionProps {\n  /**\n   * If set to `true`, the router will scroll the element with an id matching the hash into view with default `ScrollIntoViewOptions`.\n   * If set to `false`, the router will not scroll the element with an id matching the hash into view.\n   * If set to `ScrollIntoViewOptions`, the router will scroll the element with an id matching the hash into view with the provided options.\n   * @default true\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType#hashscrollintoview)\n   * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)\n   */\n  hashScrollIntoView?: boolean | ScrollIntoViewOptions\n  /**\n   * `replace` is a boolean that determines whether the navigation should replace the current history entry or push a new one.\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType#replace)\n   */\n  replace?: boolean\n  /**\n   * Defaults to `true` so that the scroll position will be reset to 0,0 after the location is committed to the browser history.\n   * If `false`, the scroll position will not be reset to 0,0 after the location is committed to history.\n   * @default true\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType#resetscroll)\n   */\n  resetScroll?: boolean\n  /** @deprecated All navigations now use startTransition under the hood */\n  startTransition?: boolean\n  /**\n   * If set to `true`, the router will wrap the resulting navigation in a `document.startViewTransition()` call.\n   * If `ViewTransitionOptions`, route navigations will be called using `document.startViewTransition({update, types})`\n   * where `types` will be the strings array passed with `ViewTransitionOptions[\"types\"]`.\n   * If the browser does not support viewTransition types, the navigation will fall back to normal `document.startTransition()`, same as if `true` was passed.\n   *\n   * If the browser does not support this api, this option will be ignored.\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType#viewtransition)\n   * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document/startViewTransition)\n   * @see [Google](https://developer.chrome.com/docs/web-platform/view-transitions/same-document#view-transition-types)\n   */\n  viewTransition?: boolean | ViewTransitionOptions\n  /**\n   * If `true`, navigation will ignore any blockers that might prevent it.\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType#ignoreblocker)\n   */\n  ignoreBlocker?: boolean\n  /**\n   * If `true`, navigation to a route inside of router will trigger a full page load instead of the traditional SPA navigation.\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType#reloaddocument)\n   */\n  reloadDocument?: boolean\n  /**\n   * This can be used instead of `to` to navigate to a fully built href, e.g. pointing to an external target.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType#href)\n   */\n  href?: string\n}\n\nexport type ToOptions<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = '.',\n  TMaskFrom extends string = TFrom,\n  TMaskTo extends string = '.',\n> = ToSubOptions<TRouter, TFrom, TTo> & MaskOptions<TRouter, TMaskFrom, TMaskTo>\n\nexport interface MaskOptions<\n  in out TRouter extends AnyRouter,\n  in out TMaskFrom extends string,\n  in out TMaskTo extends string,\n> {\n  _fromLocation?: ParsedLocation\n  mask?: ToMaskOptions<TRouter, TMaskFrom, TMaskTo>\n}\n\nexport type ToMaskOptions<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TMaskFrom extends string = string,\n  TMaskTo extends string = '.',\n> = ToSubOptions<TRouter, TMaskFrom, TMaskTo> & {\n  unmaskOnReload?: boolean\n}\n\nexport type ToSubOptions<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = '.',\n> = ToSubOptionsProps<TRouter, TFrom, TTo> &\n  SearchParamOptions<TRouter, TFrom, TTo> &\n  PathParamOptions<TRouter, TFrom, TTo>\n\nexport interface RequiredToOptions<\n  in out TRouter extends AnyRouter,\n  in out TFrom extends string,\n  in out TTo extends string | undefined,\n> {\n  to: ToPathOption<TRouter, TFrom, TTo> & {}\n}\n\nexport interface OptionalToOptions<\n  in out TRouter extends AnyRouter,\n  in out TFrom extends string,\n  in out TTo extends string | undefined,\n> {\n  to?: ToPathOption<TRouter, TFrom, TTo> & {}\n}\n\nexport type MakeToRequired<\n  TRouter extends AnyRouter,\n  TFrom extends string,\n  TTo extends string | undefined,\n> = string extends TFrom\n  ? string extends TTo\n    ? OptionalToOptions<TRouter, TFrom, TTo>\n    : TTo & CatchAllPaths<TRouter> extends never\n      ? RequiredToOptions<TRouter, TFrom, TTo>\n      : OptionalToOptions<TRouter, TFrom, TTo>\n  : OptionalToOptions<TRouter, TFrom, TTo>\n\nexport type ToSubOptionsProps<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> | string = string,\n  TTo extends string | undefined = '.',\n> = MakeToRequired<TRouter, TFrom, TTo> & {\n  hash?: true | Updater<string>\n  state?: true | NonNullableUpdater<ParsedHistoryState, HistoryState>\n  from?: FromPathOption<TRouter, TFrom> & {}\n}\n\nexport type ParamsReducerFn<\n  in out TRouter extends AnyRouter,\n  in out TParamVariant extends ParamVariant,\n  in out TFrom,\n  in out TTo,\n> = (\n  current: Expand<ResolveFromParams<TRouter, TParamVariant, TFrom>>,\n) => Expand<ResolveRelativeToParams<TRouter, TParamVariant, TFrom, TTo>>\n\ntype ParamsReducer<\n  TRouter extends AnyRouter,\n  TParamVariant extends ParamVariant,\n  TFrom,\n  TTo,\n> =\n  | Expand<ResolveRelativeToParams<TRouter, TParamVariant, TFrom, TTo>>\n  | (ParamsReducerFn<TRouter, TParamVariant, TFrom, TTo> & {})\n\ntype ParamVariant = 'PATH' | 'SEARCH'\n\nexport type ResolveRoute<\n  TRouter extends AnyRouter,\n  TFrom,\n  TTo,\n  TPath = ResolveRelativePath<TFrom, TTo>,\n> = TPath extends string\n  ? TFrom extends TPath\n    ? RouteByPath<TRouter['routeTree'], TPath>\n    : RouteByToPath<TRouter, TPath>\n  : never\n\ntype ResolveFromParamType<TParamVariant extends ParamVariant> =\n  TParamVariant extends 'PATH' ? 'allParams' : 'fullSearchSchema'\n\ntype ResolveFromAllParams<\n  TRouter extends AnyRouter,\n  TParamVariant extends ParamVariant,\n> = TParamVariant extends 'PATH'\n  ? AllParams<TRouter['routeTree']>\n  : FullSearchSchema<TRouter['routeTree']>\n\ntype ResolveFromParams<\n  TRouter extends AnyRouter,\n  TParamVariant extends ParamVariant,\n  TFrom,\n> = string extends TFrom\n  ? ResolveFromAllParams<TRouter, TParamVariant>\n  : RouteByPath<\n      TRouter['routeTree'],\n      TFrom\n    >['types'][ResolveFromParamType<TParamVariant>]\n\ntype ResolveToParamType<TParamVariant extends ParamVariant> =\n  TParamVariant extends 'PATH' ? 'allParams' : 'fullSearchSchemaInput'\n\ntype ResolveAllToParams<\n  TRouter extends AnyRouter,\n  TParamVariant extends ParamVariant,\n> = TParamVariant extends 'PATH'\n  ? AllParams<TRouter['routeTree']>\n  : FullSearchSchemaInput<TRouter['routeTree']>\n\nexport type ResolveToParams<\n  TRouter extends AnyRouter,\n  TParamVariant extends ParamVariant,\n  TFrom,\n  TTo,\n> =\n  ResolveRelativePath<TFrom, TTo> extends infer TPath\n    ? undefined extends TPath\n      ? never\n      : string extends TPath\n        ? ResolveAllToParams<TRouter, TParamVariant>\n        : TPath extends CatchAllPaths<TRouter>\n          ? ResolveAllToParams<TRouter, TParamVariant>\n          : ResolveRoute<\n              TRouter,\n              TFrom,\n              TTo\n            >['types'][ResolveToParamType<TParamVariant>]\n    : never\n\ntype ResolveRelativeToParams<\n  TRouter extends AnyRouter,\n  TParamVariant extends ParamVariant,\n  TFrom,\n  TTo,\n  TToParams = ResolveToParams<TRouter, TParamVariant, TFrom, TTo>,\n> = TParamVariant extends 'SEARCH'\n  ? TToParams\n  : string extends TFrom\n    ? TToParams\n    : MakeDifferenceOptional<\n        ResolveFromParams<TRouter, TParamVariant, TFrom>,\n        TToParams\n      >\n\nexport interface MakeOptionalSearchParams<\n  in out TRouter extends AnyRouter,\n  in out TFrom,\n  in out TTo,\n> {\n  search?: true | (ParamsReducer<TRouter, 'SEARCH', TFrom, TTo> & {})\n}\n\nexport interface MakeOptionalPathParams<\n  in out TRouter extends AnyRouter,\n  in out TFrom,\n  in out TTo,\n> {\n  params?: true | (ParamsReducer<TRouter, 'PATH', TFrom, TTo> & {})\n}\n\ntype MakeRequiredParamsReducer<\n  TRouter extends AnyRouter,\n  TParamVariant extends ParamVariant,\n  TFrom,\n  TTo,\n> =\n  | (string extends TFrom\n      ? never\n      : ResolveFromParams<TRouter, TParamVariant, TFrom> extends WithoutEmpty<\n            PickRequired<\n              ResolveRelativeToParams<TRouter, TParamVariant, TFrom, TTo>\n            >\n          >\n        ? true\n        : never)\n  | (ParamsReducer<TRouter, TParamVariant, TFrom, TTo> & {})\n\nexport interface MakeRequiredPathParams<\n  in out TRouter extends AnyRouter,\n  in out TFrom,\n  in out TTo,\n> {\n  params: MakeRequiredParamsReducer<TRouter, 'PATH', TFrom, TTo> & {}\n}\n\nexport interface MakeRequiredSearchParams<\n  in out TRouter extends AnyRouter,\n  in out TFrom,\n  in out TTo,\n> {\n  search: MakeRequiredParamsReducer<TRouter, 'SEARCH', TFrom, TTo> & {}\n}\n\nexport type IsRequired<\n  TRouter extends AnyRouter,\n  TParamVariant extends ParamVariant,\n  TFrom,\n  TTo,\n> =\n  ResolveRelativePath<TFrom, TTo> extends infer TPath\n    ? undefined extends TPath\n      ? never\n      : TPath extends CatchAllPaths<TRouter>\n        ? never\n        : IsRequiredParams<\n            ResolveRelativeToParams<TRouter, TParamVariant, TFrom, TTo>\n          >\n    : never\n\nexport type SearchParamOptions<TRouter extends AnyRouter, TFrom, TTo> =\n  IsRequired<TRouter, 'SEARCH', TFrom, TTo> extends never\n    ? MakeOptionalSearchParams<TRouter, TFrom, TTo>\n    : MakeRequiredSearchParams<TRouter, TFrom, TTo>\n\nexport type PathParamOptions<TRouter extends AnyRouter, TFrom, TTo> =\n  IsRequired<TRouter, 'PATH', TFrom, TTo> extends never\n    ? MakeOptionalPathParams<TRouter, TFrom, TTo>\n    : MakeRequiredPathParams<TRouter, TFrom, TTo>\n\nexport type ToPathOption<\n  TRouter extends AnyRouter = AnyRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = string,\n> = ConstrainLiteral<\n  TTo,\n  RelativeToPathAutoComplete<\n    TRouter,\n    NoInfer<TFrom> extends string ? NoInfer<TFrom> : '',\n    NoInfer<TTo> & string\n  >\n>\n\nexport type FromPathOption<TRouter extends AnyRouter, TFrom> = ConstrainLiteral<\n  TFrom,\n  RoutePaths<TRouter['routeTree']>\n>\n\n/**\n * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/navigation#active-options)\n */\nexport interface ActiveOptions {\n  /**\n   * If true, the link will be active if the current route matches the `to` route path exactly (no children routes)\n   * @default false\n   */\n  exact?: boolean\n  /**\n   * If true, the link will only be active if the current URL hash matches the `hash` prop\n   * @default false\n   */\n  includeHash?: boolean\n  /**\n   * If true, the link will only be active if the current URL search params inclusively match the `search` prop\n   * @default true\n   */\n  includeSearch?: boolean\n  /**\n   * This modifies the `includeSearch` behavior.\n   * If true,  properties in `search` that are explicitly `undefined` must NOT be present in the current URL search params for the link to be active.\n   * @default false\n   */\n  explicitUndefined?: boolean\n}\n\nexport interface LinkOptionsProps {\n  /**\n   * The standard anchor tag target attribute\n   */\n  target?: HTMLAnchorElement['target']\n  /**\n   * Configurable options to determine if the link should be considered active or not\n   * @default {exact:true,includeHash:true}\n   */\n  activeOptions?: ActiveOptions\n  /**\n   * The preloading strategy for this link\n   * - `false` - No preloading\n   * - `'intent'` - Preload the linked route on hover and cache it for this many milliseconds in hopes that the user will eventually navigate there.\n   * - `'viewport'` - Preload the linked route when it enters the viewport\n   */\n  preload?: false | 'intent' | 'viewport' | 'render'\n  /**\n   * When a preload strategy is set, this delays the preload by this many milliseconds.\n   * If the user exits the link before this delay, the preload will be cancelled.\n   */\n  preloadDelay?: number\n  /**\n   * Control whether the link should be disabled or not\n   * If set to `true`, the link will be rendered without an `href` attribute\n   * @default false\n   */\n  disabled?: boolean\n}\n\nexport type LinkOptions<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = '.',\n  TMaskFrom extends string = TFrom,\n  TMaskTo extends string = '.',\n> = NavigateOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo> & LinkOptionsProps\n\nexport type LinkCurrentTargetElement = {\n  preloadTimeout?: null | ReturnType<typeof setTimeout>\n}\n\nexport const preloadWarning = 'Error preloading route! ☝️'\n", "import type { AnyRoute, StaticDataRouteOption } from './route'\nimport type {\n  AllContext,\n  AllLoaderData,\n  AllParams,\n  FullSearchSchema,\n  ParseRoute,\n  RouteById,\n  RouteIds,\n} from './routeInfo'\nimport type { AnyRouter, RegisteredRouter } from './router'\nimport type { Constrain, ControlledPromise } from './utils'\n\nexport type AnyMatchAndValue = { match: any; value: any }\n\nexport type FindValueByIndex<\n  TKey,\n  TValue extends ReadonlyArray<any>,\n> = TKey extends `${infer TIndex extends number}` ? TValue[TIndex] : never\n\nexport type FindValueByKey<TKey, TValue> =\n  TValue extends ReadonlyArray<any>\n    ? FindValueByIndex<TKey, TValue>\n    : TValue[TKey & keyof TValue]\n\nexport type CreateMatchAndValue<TMatch, TValue> = TValue extends any\n  ? {\n      match: TMatch\n      value: TValue\n    }\n  : never\n\nexport type NextMatchAndValue<\n  TKey,\n  TMatchAndValue extends AnyMatchAndValue,\n> = TMatchAndValue extends any\n  ? CreateMatchAndValue<\n      TMatchAndValue['match'],\n      FindValueByKey<TKey, TMatchAndValue['value']>\n    >\n  : never\n\nexport type IsMatchKeyOf<TValue> =\n  TValue extends ReadonlyArray<any>\n    ? number extends TValue['length']\n      ? `${number}`\n      : keyof TValue & `${number}`\n    : TValue extends object\n      ? keyof TValue & string\n      : never\n\nexport type IsMatchPath<\n  TParentPath extends string,\n  TMatchAndValue extends AnyMatchAndValue,\n> = `${TParentPath}${IsMatchKeyOf<TMatchAndValue['value']>}`\n\nexport type IsMatchResult<\n  TKey,\n  TMatchAndValue extends AnyMatchAndValue,\n> = TMatchAndValue extends any\n  ? TKey extends keyof TMatchAndValue['value']\n    ? TMatchAndValue['match']\n    : never\n  : never\n\nexport type IsMatchParse<\n  TPath,\n  TMatchAndValue extends AnyMatchAndValue,\n  TParentPath extends string = '',\n> = TPath extends `${string}.${string}`\n  ? TPath extends `${infer TFirst}.${infer TRest}`\n    ? IsMatchParse<\n        TRest,\n        NextMatchAndValue<TFirst, TMatchAndValue>,\n        `${TParentPath}${TFirst}.`\n      >\n    : never\n  : {\n      path: IsMatchPath<TParentPath, TMatchAndValue>\n      result: IsMatchResult<TPath, TMatchAndValue>\n    }\n\nexport type IsMatch<TMatch, TPath> = IsMatchParse<\n  TPath,\n  TMatch extends any ? { match: TMatch; value: TMatch } : never\n>\n\n/**\n * Narrows matches based on a path\n * @experimental\n */\nexport const isMatch = <TMatch, TPath extends string>(\n  match: TMatch,\n  path: Constrain<TPath, IsMatch<TMatch, TPath>['path']>,\n): match is IsMatch<TMatch, TPath>['result'] => {\n  const parts = (path as string).split('.')\n  let part\n  let value: any = match\n\n  while ((part = parts.shift()) != null && value != null) {\n    value = value[part]\n  }\n\n  return value != null\n}\n\nexport interface DefaultRouteMatchExtensions {\n  scripts?: unknown\n  links?: unknown\n  headScripts?: unknown\n  meta?: unknown\n}\n\nexport interface RouteMatchExtensions extends DefaultRouteMatchExtensions {}\n\nexport interface RouteMatch<\n  out TRouteId,\n  out TFullPath,\n  out TAllParams,\n  out TFullSearchSchema,\n  out TLoaderData,\n  out TAllContext,\n  out TLoaderDeps,\n> extends RouteMatchExtensions {\n  id: string\n  routeId: TRouteId\n  fullPath: TFullPath\n  index: number\n  pathname: string\n  params: TAllParams\n  _strictParams: TAllParams\n  status: 'pending' | 'success' | 'error' | 'redirected' | 'notFound'\n  isFetching: false | 'beforeLoad' | 'loader'\n  error: unknown\n  paramsError: unknown\n  searchError: unknown\n  updatedAt: number\n  loadPromise?: ControlledPromise<void>\n  beforeLoadPromise?: ControlledPromise<void>\n  loaderPromise?: ControlledPromise<void>\n  loaderData?: TLoaderData\n  __routeContext: Record<string, unknown>\n  __beforeLoadContext: Record<string, unknown>\n  context: TAllContext\n  search: TFullSearchSchema\n  _strictSearch: TFullSearchSchema\n  fetchCount: number\n  abortController: AbortController\n  cause: 'preload' | 'enter' | 'stay'\n  loaderDeps: TLoaderDeps\n  preload: boolean\n  invalid: boolean\n  headers?: Record<string, string>\n  globalNotFound?: boolean\n  staticData: StaticDataRouteOption\n  minPendingPromise?: ControlledPromise<void>\n  pendingTimeout?: ReturnType<typeof setTimeout>\n}\n\nexport type MakeRouteMatchFromRoute<TRoute extends AnyRoute> = RouteMatch<\n  TRoute['types']['id'],\n  TRoute['types']['fullPath'],\n  TRoute['types']['allParams'],\n  TRoute['types']['fullSearchSchema'],\n  TRoute['types']['loaderData'],\n  TRoute['types']['allContext'],\n  TRoute['types']['loaderDeps']\n>\n\nexport type MakeRouteMatch<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TRouteId = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n> = RouteMatch<\n  TRouteId,\n  RouteById<TRouteTree, TRouteId>['types']['fullPath'],\n  TStrict extends false\n    ? AllParams<TRouteTree>\n    : RouteById<TRouteTree, TRouteId>['types']['allParams'],\n  TStrict extends false\n    ? FullSearchSchema<TRouteTree>\n    : RouteById<TRouteTree, TRouteId>['types']['fullSearchSchema'],\n  TStrict extends false\n    ? AllLoaderData<TRouteTree>\n    : RouteById<TRouteTree, TRouteId>['types']['loaderData'],\n  TStrict extends false\n    ? AllContext<TRouteTree>\n    : RouteById<TRouteTree, TRouteId>['types']['allContext'],\n  RouteById<TRouteTree, TRouteId>['types']['loaderDeps']\n>\n\nexport type AnyRouteMatch = RouteMatch<any, any, any, any, any, any, any>\n\nexport type MakeRouteMatchUnion<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TRoute extends AnyRoute = ParseRoute<TRouter['routeTree']>,\n> = TRoute extends any\n  ? RouteMatch<\n      TRoute['id'],\n      TRoute['fullPath'],\n      TRoute['types']['allParams'],\n      TRoute['types']['fullSearchSchema'],\n      TRoute['types']['loaderData'],\n      TRoute['types']['allContext'],\n      TRoute['types']['loaderDeps']\n    >\n  : never\n\n/**\n * The `MatchRouteOptions` type is used to describe the options that can be used when matching a route.\n *\n * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/MatchRouteOptionsType#matchrouteoptions-type)\n */\nexport interface MatchRouteOptions {\n  /**\n   * If `true`, will match against pending location instead of the current location.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/MatchRouteOptionsType#pending-property)\n   */\n  pending?: boolean\n  /**\n   * If `true`, will match against the current location with case sensitivity.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/MatchRouteOptionsType#casesensitive-property)\n   */\n  caseSensitive?: boolean\n  /**\n   * If `true`, will match against the current location's search params using a deep inclusive check. e.g. `{ a: 1 }` will match for a current location of `{ a: 1, b: 2 }`.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/MatchRouteOptionsType#includesearch-property)\n   */\n  includeSearch?: boolean\n  /**\n   * If `true`, will match against the current location using a fuzzy match. e.g. `/posts` will match for a current location of `/posts/123`.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/MatchRouteOptionsType#fuzzy-property)\n   */\n  fuzzy?: boolean\n}\n", "import { joinPaths, trimPathLeft } from './path'\nimport { notFound } from './not-found'\nimport { rootRouteId } from './root'\nimport type { LazyRoute } from './fileRoute'\nimport type { NotFoundError } from './not-found'\nimport type { NavigateOptions, ParsePathParams } from './link'\nimport type { ParsedLocation } from './location'\nimport type {\n  AnyRouteMatch,\n  MakeRouteMatchFromRoute,\n  MakeRouteMatchUnion,\n  RouteMatch,\n} from './Matches'\nimport type { RootRouteId } from './root'\nimport type { ParseRoute, RouteById, RoutePaths } from './routeInfo'\nimport type { AnyRouter, RegisteredRouter } from './router'\nimport type { BuildLocationFn, NavigateFn } from './RouterProvider'\nimport type {\n  Assign,\n  Constrain,\n  Expand,\n  IntersectAssign,\n  NoInfer,\n} from './utils'\nimport type {\n  AnySchema,\n  AnyStandardSchemaValidator,\n  AnyValidator,\n  AnyValidatorAdapter,\n  AnyValidatorObj,\n  DefaultValidator,\n  ResolveSearchValidatorInput,\n  ResolveValidatorOutput,\n  StandardSchemaValidator,\n  ValidatorAdapter,\n  ValidatorFn,\n  ValidatorObj,\n} from './validators'\n\nexport type AnyPathParams = {}\n\nexport type SearchSchemaInput = {\n  __TSearchSchemaInput__: 'TSearchSchemaInput'\n}\n\nexport type AnyContext = {}\n\nexport interface RouteContext {}\n\nexport type PreloadableObj = { preload?: () => Promise<void> }\n\nexport type RoutePathOptions<TCustomId, TPath> =\n  | {\n      path: TPath\n    }\n  | {\n      id: TCustomId\n    }\n\nexport interface StaticDataRouteOption {}\n\nexport type RoutePathOptionsIntersection<TCustomId, TPath> = {\n  path: TPath\n  id: TCustomId\n}\n\nexport type SearchFilter<TInput, TResult = TInput> = (prev: TInput) => TResult\n\nexport type SearchMiddlewareContext<TSearchSchema> = {\n  search: TSearchSchema\n  next: (newSearch: TSearchSchema) => TSearchSchema\n}\n\nexport type SearchMiddleware<TSearchSchema> = (\n  ctx: SearchMiddlewareContext<TSearchSchema>,\n) => TSearchSchema\n\nexport type ResolveId<\n  TParentRoute,\n  TCustomId extends string,\n  TPath extends string,\n> = TParentRoute extends { id: infer TParentId extends string }\n  ? RoutePrefix<TParentId, string extends TCustomId ? TPath : TCustomId>\n  : RootRouteId\n\nexport type InferFullSearchSchema<TRoute> = TRoute extends {\n  types: {\n    fullSearchSchema: infer TFullSearchSchema\n  }\n}\n  ? TFullSearchSchema\n  : {}\n\nexport type InferFullSearchSchemaInput<TRoute> = TRoute extends {\n  types: {\n    fullSearchSchemaInput: infer TFullSearchSchemaInput\n  }\n}\n  ? TFullSearchSchemaInput\n  : {}\n\nexport type InferAllParams<TRoute> = TRoute extends {\n  types: {\n    allParams: infer TAllParams\n  }\n}\n  ? TAllParams\n  : {}\n\nexport type InferAllContext<TRoute> = unknown extends TRoute\n  ? TRoute\n  : TRoute extends {\n        types: {\n          allContext: infer TAllContext\n        }\n      }\n    ? TAllContext\n    : {}\n\nexport type ResolveSearchSchemaFnInput<TSearchValidator> =\n  TSearchValidator extends (input: infer TSearchSchemaInput) => any\n    ? TSearchSchemaInput extends SearchSchemaInput\n      ? Omit<TSearchSchemaInput, keyof SearchSchemaInput>\n      : ResolveSearchSchemaFn<TSearchValidator>\n    : AnySchema\n\nexport type ResolveSearchSchemaInput<TSearchValidator> =\n  TSearchValidator extends AnyStandardSchemaValidator\n    ? NonNullable<TSearchValidator['~standard']['types']>['input']\n    : TSearchValidator extends AnyValidatorAdapter\n      ? TSearchValidator['types']['input']\n      : TSearchValidator extends AnyValidatorObj\n        ? ResolveSearchSchemaFnInput<TSearchValidator['parse']>\n        : ResolveSearchSchemaFnInput<TSearchValidator>\n\nexport type ResolveSearchSchemaFn<TSearchValidator> = TSearchValidator extends (\n  ...args: any\n) => infer TSearchSchema\n  ? TSearchSchema\n  : AnySchema\n\nexport type ResolveSearchSchema<TSearchValidator> =\n  unknown extends TSearchValidator\n    ? TSearchValidator\n    : TSearchValidator extends AnyStandardSchemaValidator\n      ? NonNullable<TSearchValidator['~standard']['types']>['output']\n      : TSearchValidator extends AnyValidatorAdapter\n        ? TSearchValidator['types']['output']\n        : TSearchValidator extends AnyValidatorObj\n          ? ResolveSearchSchemaFn<TSearchValidator['parse']>\n          : ResolveSearchSchemaFn<TSearchValidator>\n\nexport type ParseSplatParams<TPath extends string> = TPath &\n  `${string}$` extends never\n  ? TPath & `${string}$/${string}` extends never\n    ? never\n    : '_splat'\n  : '_splat'\n\nexport interface SplatParams {\n  _splat?: string\n}\n\nexport type ResolveParams<TPath extends string> =\n  ParseSplatParams<TPath> extends never\n    ? Record<ParsePathParams<TPath>, string>\n    : Record<ParsePathParams<TPath>, string> & SplatParams\n\nexport type ParseParamsFn<in out TPath extends string, in out TParams> = (\n  rawParams: ResolveParams<TPath>,\n) => TParams extends Record<ParsePathParams<TPath>, any>\n  ? TParams\n  : Record<ParsePathParams<TPath>, any>\n\nexport type StringifyParamsFn<in out TPath extends string, in out TParams> = (\n  params: TParams,\n) => ResolveParams<TPath>\n\nexport type ParamsOptions<in out TPath extends string, in out TParams> = {\n  params?: {\n    parse?: ParseParamsFn<TPath, TParams>\n    stringify?: StringifyParamsFn<TPath, TParams>\n  }\n\n  /** \n  @deprecated Use params.parse instead\n  */\n  parseParams?: ParseParamsFn<TPath, TParams>\n\n  /** \n  @deprecated Use params.stringify instead\n  */\n  stringifyParams?: StringifyParamsFn<TPath, TParams>\n}\n\ninterface RequiredStaticDataRouteOption {\n  staticData: StaticDataRouteOption\n}\n\ninterface OptionalStaticDataRouteOption {\n  staticData?: StaticDataRouteOption\n}\n\nexport type UpdatableStaticRouteOption = {} extends StaticDataRouteOption\n  ? OptionalStaticDataRouteOption\n  : RequiredStaticDataRouteOption\n\nexport type MetaDescriptor =\n  | { charSet: 'utf-8' }\n  | { title: string }\n  | { name: string; content: string }\n  | { property: string; content: string }\n  | { httpEquiv: string; content: string }\n  | { 'script:ld+json': LdJsonObject }\n  | { tagName: 'meta' | 'link'; [name: string]: string }\n  | Record<string, unknown>\n\ntype LdJsonObject = { [Key in string]: LdJsonValue } & {\n  [Key in string]?: LdJsonValue | undefined\n}\ntype LdJsonArray = Array<LdJsonValue> | ReadonlyArray<LdJsonValue>\ntype LdJsonPrimitive = string | number | boolean | null\ntype LdJsonValue = LdJsonPrimitive | LdJsonObject | LdJsonArray\n\nexport type RouteLinkEntry = {}\n\nexport type SearchValidator<TInput, TOutput> =\n  | ValidatorObj<TInput, TOutput>\n  | ValidatorFn<TInput, TOutput>\n  | ValidatorAdapter<TInput, TOutput>\n  | StandardSchemaValidator<TInput, TOutput>\n  | undefined\n\nexport type AnySearchValidator = SearchValidator<any, any>\n\nexport type DefaultSearchValidator = SearchValidator<\n  Record<string, unknown>,\n  AnySchema\n>\n\nexport type RoutePrefix<\n  TPrefix extends string,\n  TPath extends string,\n> = string extends TPath\n  ? RootRouteId\n  : TPath extends string\n    ? TPrefix extends RootRouteId\n      ? TPath extends '/'\n        ? '/'\n        : `/${TrimPath<TPath>}`\n      : `${TPrefix}/${TPath}` extends '/'\n        ? '/'\n        : `/${TrimPathLeft<`${TrimPathRight<TPrefix>}/${TrimPath<TPath>}`>}`\n    : never\n\nexport type TrimPath<T extends string> = '' extends T\n  ? ''\n  : TrimPathRight<TrimPathLeft<T>>\n\nexport type TrimPathLeft<T extends string> =\n  T extends `${RootRouteId}/${infer U}`\n    ? TrimPathLeft<U>\n    : T extends `/${infer U}`\n      ? TrimPathLeft<U>\n      : T\n\nexport type TrimPathRight<T extends string> = T extends '/'\n  ? '/'\n  : T extends `${infer U}/`\n    ? TrimPathRight<U>\n    : T\n\nexport type LooseReturnType<T> = T extends (\n  ...args: Array<any>\n) => infer TReturn\n  ? TReturn\n  : never\n\nexport type LooseAsyncReturnType<T> = T extends (\n  ...args: Array<any>\n) => infer TReturn\n  ? TReturn extends Promise<infer TReturn>\n    ? TReturn\n    : TReturn\n  : never\n\nexport type ContextReturnType<TContextFn> = unknown extends TContextFn\n  ? TContextFn\n  : LooseReturnType<TContextFn> extends never\n    ? AnyContext\n    : LooseReturnType<TContextFn>\n\nexport type ContextAsyncReturnType<TContextFn> = unknown extends TContextFn\n  ? TContextFn\n  : LooseAsyncReturnType<TContextFn> extends never\n    ? AnyContext\n    : LooseAsyncReturnType<TContextFn>\n\nexport type ResolveRouteContext<TRouteContextFn, TBeforeLoadFn> = Assign<\n  ContextReturnType<TRouteContextFn>,\n  ContextAsyncReturnType<TBeforeLoadFn>\n>\n\nexport type ResolveLoaderData<TLoaderFn> = unknown extends TLoaderFn\n  ? TLoaderFn\n  : LooseAsyncReturnType<TLoaderFn> extends never\n    ? undefined\n    : LooseAsyncReturnType<TLoaderFn>\n\nexport type ResolveFullSearchSchema<\n  TParentRoute extends AnyRoute,\n  TSearchValidator,\n> = unknown extends TParentRoute\n  ? ResolveValidatorOutput<TSearchValidator>\n  : IntersectAssign<\n      InferFullSearchSchema<TParentRoute>,\n      ResolveValidatorOutput<TSearchValidator>\n    >\n\nexport type ResolveFullSearchSchemaInput<\n  TParentRoute extends AnyRoute,\n  TSearchValidator,\n> = IntersectAssign<\n  InferFullSearchSchemaInput<TParentRoute>,\n  ResolveSearchValidatorInput<TSearchValidator>\n>\n\nexport type ResolveAllParamsFromParent<\n  TParentRoute extends AnyRoute,\n  TParams,\n> = Assign<InferAllParams<TParentRoute>, TParams>\n\nexport type RouteContextParameter<\n  TParentRoute extends AnyRoute,\n  TRouterContext,\n> = unknown extends TParentRoute\n  ? TRouterContext\n  : Assign<TRouterContext, InferAllContext<TParentRoute>>\n\nexport type BeforeLoadContextParameter<\n  TParentRoute extends AnyRoute,\n  TRouterContext,\n  TRouteContextFn,\n> = Assign<\n  RouteContextParameter<TParentRoute, TRouterContext>,\n  ContextReturnType<TRouteContextFn>\n>\n\nexport type ResolveAllContext<\n  TParentRoute extends AnyRoute,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n> = Assign<\n  BeforeLoadContextParameter<TParentRoute, TRouterContext, TRouteContextFn>,\n  ContextAsyncReturnType<TBeforeLoadFn>\n>\nexport interface FullSearchSchemaOption<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n> {\n  search: Expand<ResolveFullSearchSchema<TParentRoute, TSearchValidator>>\n}\n\nexport interface RemountDepsOptions<\n  in out TRouteId,\n  in out TFullSearchSchema,\n  in out TAllParams,\n  in out TLoaderDeps,\n> {\n  routeId: TRouteId\n  search: TFullSearchSchema\n  params: TAllParams\n  loaderDeps: TLoaderDeps\n}\n\nexport type MakeRemountDepsOptionsUnion<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n> =\n  ParseRoute<TRouteTree> extends infer TRoute extends AnyRoute\n    ? TRoute extends any\n      ? RemountDepsOptions<\n          TRoute['id'],\n          TRoute['types']['fullSearchSchema'],\n          TRoute['types']['allParams'],\n          TRoute['types']['loaderDeps']\n        >\n      : never\n    : never\n\nexport interface RouteTypes<\n  in out TParentRoute extends AnyRoute,\n  in out TPath extends string,\n  in out TFullPath extends string,\n  in out TCustomId extends string,\n  in out TId extends string,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n  in out TRouteContextFn,\n  in out TBeforeLoadFn,\n  in out TLoaderDeps,\n  in out TLoaderFn,\n  in out TChildren,\n  in out TFileRouteTypes,\n> {\n  parentRoute: TParentRoute\n  path: TPath\n  to: TrimPathRight<TFullPath>\n  fullPath: TFullPath\n  customId: TCustomId\n  id: TId\n  searchSchema: ResolveValidatorOutput<TSearchValidator>\n  searchSchemaInput: ResolveSearchValidatorInput<TSearchValidator>\n  searchValidator: TSearchValidator\n  fullSearchSchema: ResolveFullSearchSchema<TParentRoute, TSearchValidator>\n  fullSearchSchemaInput: ResolveFullSearchSchemaInput<\n    TParentRoute,\n    TSearchValidator\n  >\n  params: TParams\n  allParams: ResolveAllParamsFromParent<TParentRoute, TParams>\n  routerContext: TRouterContext\n  routeContext: ResolveRouteContext<TRouteContextFn, TBeforeLoadFn>\n  routeContextFn: TRouteContextFn\n  beforeLoadFn: TBeforeLoadFn\n  allContext: ResolveAllContext<\n    TParentRoute,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >\n  children: TChildren\n  loaderData: ResolveLoaderData<TLoaderFn>\n  loaderDeps: TLoaderDeps\n  fileRouteTypes: TFileRouteTypes\n}\n\nexport type ResolveFullPath<\n  TParentRoute extends AnyRoute,\n  TPath extends string,\n  TPrefixed = RoutePrefix<TParentRoute['fullPath'], TPath>,\n> = TPrefixed extends RootRouteId ? '/' : TPrefixed\n\nexport interface RouteExtensions<TId, TFullPath> {}\n\nexport type RouteLazyFn<TRoute extends AnyRoute> = (\n  lazyFn: () => Promise<LazyRoute>,\n) => TRoute\n\nexport type RouteAddChildrenFn<\n  in out TParentRoute extends AnyRoute,\n  in out TPath extends string,\n  in out TFullPath extends string,\n  in out TCustomId extends string,\n  in out TId extends string,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n  in out TRouteContextFn,\n  in out TBeforeLoadFn,\n  in out TLoaderDeps extends Record<string, any>,\n  in out TLoaderFn,\n  in out TFileRouteTypes,\n> = <const TNewChildren>(\n  children: Constrain<\n    TNewChildren,\n    ReadonlyArray<AnyRoute> | Record<string, AnyRoute>\n  >,\n) => Route<\n  TParentRoute,\n  TPath,\n  TFullPath,\n  TCustomId,\n  TId,\n  TSearchValidator,\n  TParams,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TNewChildren,\n  TFileRouteTypes\n>\n\nexport type RouteAddFileChildrenFn<\n  in out TParentRoute extends AnyRoute,\n  in out TPath extends string,\n  in out TFullPath extends string,\n  in out TCustomId extends string,\n  in out TId extends string,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n  in out TRouteContextFn,\n  in out TBeforeLoadFn,\n  in out TLoaderDeps extends Record<string, any>,\n  in out TLoaderFn,\n  in out TFileRouteTypes,\n> = <const TNewChildren>(\n  children: TNewChildren,\n) => Route<\n  TParentRoute,\n  TPath,\n  TFullPath,\n  TCustomId,\n  TId,\n  TSearchValidator,\n  TParams,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TNewChildren,\n  TFileRouteTypes\n>\n\nexport type RouteAddFileTypesFn<\n  TParentRoute extends AnyRoute,\n  TPath extends string,\n  TFullPath extends string,\n  TCustomId extends string,\n  TId extends string,\n  TSearchValidator,\n  TParams,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps extends Record<string, any>,\n  TLoaderFn,\n  TChildren,\n> = <TNewFileRouteTypes>() => Route<\n  TParentRoute,\n  TPath,\n  TFullPath,\n  TCustomId,\n  TId,\n  TSearchValidator,\n  TParams,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TChildren,\n  TNewFileRouteTypes\n>\n\nexport interface Route<\n  in out TParentRoute extends AnyRoute,\n  in out TPath extends string,\n  in out TFullPath extends string,\n  in out TCustomId extends string,\n  in out TId extends string,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n  in out TRouteContextFn,\n  in out TBeforeLoadFn,\n  in out TLoaderDeps extends Record<string, any>,\n  in out TLoaderFn,\n  in out TChildren,\n  in out TFileRouteTypes,\n> extends RouteExtensions<TId, TFullPath> {\n  fullPath: TFullPath\n  path: TPath\n  id: TId\n  parentRoute: TParentRoute\n  children?: TChildren\n  types: RouteTypes<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TChildren,\n    TFileRouteTypes\n  >\n  options: RouteOptions<\n    TParentRoute,\n    TId,\n    TCustomId,\n    TFullPath,\n    TPath,\n    TSearchValidator,\n    TParams,\n    TLoaderDeps,\n    TLoaderFn,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >\n  isRoot: TParentRoute extends AnyRoute ? true : false\n  _componentsPromise?: Promise<Array<void>>\n  lazyFn?: () => Promise<LazyRoute>\n  _lazyPromise?: Promise<void>\n  rank: number\n  to: TrimPathRight<TFullPath>\n  init: (opts: { originalIndex: number; defaultSsr?: boolean }) => void\n  update: (\n    options: UpdatableRouteOptions<\n      TParentRoute,\n      TCustomId,\n      TFullPath,\n      TParams,\n      TSearchValidator,\n      TLoaderFn,\n      TLoaderDeps,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >,\n  ) => this\n  lazy: RouteLazyFn<this>\n  addChildren: RouteAddChildrenFn<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TFileRouteTypes\n  >\n  _addFileChildren: RouteAddFileChildrenFn<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TFileRouteTypes\n  >\n  _addFileTypes: RouteAddFileTypesFn<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TChildren\n  >\n}\n\nexport type AnyRoute = Route<\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any\n>\n\nexport type AnyRouteWithContext<TContext> = AnyRoute & {\n  types: { allContext: TContext }\n}\n\nexport type RouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TId extends string = string,\n  TCustomId extends string = string,\n  TFullPath extends string = string,\n  TPath extends string = string,\n  TSearchValidator = undefined,\n  TParams = AnyPathParams,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n> = BaseRouteOptions<\n  TParentRoute,\n  TId,\n  TCustomId,\n  TPath,\n  TSearchValidator,\n  TParams,\n  TLoaderDeps,\n  TLoaderFn,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn\n> &\n  UpdatableRouteOptions<\n    NoInfer<TParentRoute>,\n    NoInfer<TCustomId>,\n    NoInfer<TFullPath>,\n    NoInfer<TParams>,\n    NoInfer<TSearchValidator>,\n    NoInfer<TLoaderFn>,\n    NoInfer<TLoaderDeps>,\n    NoInfer<TRouterContext>,\n    NoInfer<TRouteContextFn>,\n    NoInfer<TBeforeLoadFn>\n  >\n\nexport type RouteContextFn<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n> = (\n  ctx: RouteContextOptions<\n    TParentRoute,\n    TSearchValidator,\n    TParams,\n    TRouterContext\n  >,\n) => any\n\nexport type BeforeLoadFn<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n  in out TRouteContextFn,\n> = (\n  ctx: BeforeLoadContextOptions<\n    TParentRoute,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn\n  >,\n) => any\n\nexport type FileBaseRouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TId extends string = string,\n  TPath extends string = string,\n  TSearchValidator = undefined,\n  TParams = {},\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TRemountDepsFn = AnyContext,\n> = ParamsOptions<TPath, TParams> & {\n  validateSearch?: Constrain<TSearchValidator, AnyValidator, DefaultValidator>\n\n  shouldReload?:\n    | boolean\n    | ((\n        match: LoaderFnContext<\n          TParentRoute,\n          TId,\n          TParams,\n          TLoaderDeps,\n          TRouterContext,\n          TRouteContextFn,\n          TBeforeLoadFn\n        >,\n      ) => any)\n\n  context?: Constrain<\n    TRouteContextFn,\n    (\n      ctx: RouteContextOptions<\n        TParentRoute,\n        TParams,\n        TRouterContext,\n        TLoaderDeps\n      >,\n    ) => any\n  >\n\n  // This async function is called before a route is loaded.\n  // If an error is thrown here, the route's loader will not be called.\n  // If thrown during a navigation, the navigation will be cancelled and the error will be passed to the `onError` function.\n  // If thrown during a preload event, the error will be logged to the console.\n  beforeLoad?: Constrain<\n    TBeforeLoadFn,\n    (\n      ctx: BeforeLoadContextOptions<\n        TParentRoute,\n        TSearchValidator,\n        TParams,\n        TRouterContext,\n        TRouteContextFn\n      >,\n    ) => any\n  >\n\n  loaderDeps?: (\n    opts: FullSearchSchemaOption<TParentRoute, TSearchValidator>,\n  ) => TLoaderDeps\n\n  remountDeps?: Constrain<\n    TRemountDepsFn,\n    (\n      opt: RemountDepsOptions<\n        TId,\n        FullSearchSchemaOption<TParentRoute, TSearchValidator>,\n        Expand<ResolveAllParamsFromParent<TParentRoute, TParams>>,\n        TLoaderDeps\n      >,\n    ) => any\n  >\n\n  loader?: Constrain<\n    TLoaderFn,\n    (\n      ctx: LoaderFnContext<\n        TParentRoute,\n        TId,\n        TParams,\n        TLoaderDeps,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n    ) => any\n  >\n}\n\nexport type BaseRouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TId extends string = string,\n  TCustomId extends string = string,\n  TPath extends string = string,\n  TSearchValidator = undefined,\n  TParams = {},\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n> = RoutePathOptions<TCustomId, TPath> &\n  FileBaseRouteOptions<\n    TParentRoute,\n    TId,\n    TPath,\n    TSearchValidator,\n    TParams,\n    TLoaderDeps,\n    TLoaderFn,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  > & {\n    getParentRoute: () => TParentRoute\n  }\n\nexport interface ContextOptions<\n  in out TParentRoute extends AnyRoute,\n  in out TParams,\n> {\n  abortController: AbortController\n  preload: boolean\n  params: Expand<ResolveAllParamsFromParent<TParentRoute, TParams>>\n  location: ParsedLocation\n  /**\n   * @deprecated Use `throw redirect({ to: '/somewhere' })` instead\n   **/\n  navigate: NavigateFn\n  buildLocation: BuildLocationFn\n  cause: 'preload' | 'enter' | 'stay'\n  matches: Array<MakeRouteMatchUnion>\n}\n\nexport interface RouteContextOptions<\n  in out TParentRoute extends AnyRoute,\n  in out TParams,\n  in out TRouterContext,\n  in out TLoaderDeps,\n> extends ContextOptions<TParentRoute, TParams> {\n  deps: TLoaderDeps\n  context: Expand<RouteContextParameter<TParentRoute, TRouterContext>>\n}\n\nexport interface BeforeLoadContextOptions<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n  in out TRouteContextFn,\n> extends ContextOptions<TParentRoute, TParams>,\n    FullSearchSchemaOption<TParentRoute, TSearchValidator> {\n  context: Expand<\n    BeforeLoadContextParameter<TParentRoute, TRouterContext, TRouteContextFn>\n  >\n}\n\ntype AssetFnContextOptions<\n  in out TRouteId,\n  in out TFullPath,\n  in out TParentRoute extends AnyRoute,\n  in out TParams,\n  in out TSearchValidator,\n  in out TLoaderFn,\n  in out TRouterContext,\n  in out TRouteContextFn,\n  in out TBeforeLoadFn,\n  in out TLoaderDeps,\n> = {\n  matches: Array<\n    RouteMatch<\n      TRouteId,\n      TFullPath,\n      ResolveAllParamsFromParent<TParentRoute, TParams>,\n      ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n      ResolveLoaderData<TLoaderFn>,\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      TLoaderDeps\n    >\n  >\n  match: RouteMatch<\n    TRouteId,\n    TFullPath,\n    ResolveAllParamsFromParent<TParentRoute, TParams>,\n    ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n    ResolveLoaderData<TLoaderFn>,\n    ResolveAllContext<\n      TParentRoute,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >,\n    TLoaderDeps\n  >\n  params: ResolveAllParamsFromParent<TParentRoute, TParams>\n  loaderData: ResolveLoaderData<TLoaderFn>\n}\n\nexport interface DefaultUpdatableRouteOptionsExtensions {\n  component?: unknown\n  errorComponent?: unknown\n  notFoundComponent?: unknown\n  pendingComponent?: unknown\n}\n\nexport interface UpdatableRouteOptionsExtensions\n  extends DefaultUpdatableRouteOptionsExtensions {}\n\nexport interface UpdatableRouteOptions<\n  in out TParentRoute extends AnyRoute,\n  in out TRouteId,\n  in out TFullPath,\n  in out TParams,\n  in out TSearchValidator,\n  in out TLoaderFn,\n  in out TLoaderDeps,\n  in out TRouterContext,\n  in out TRouteContextFn,\n  in out TBeforeLoadFn,\n> extends UpdatableStaticRouteOption,\n    UpdatableRouteOptionsExtensions {\n  // If true, this route will be matched as case-sensitive\n  caseSensitive?: boolean\n  // If true, this route will be forcefully wrapped in a suspense boundary\n  wrapInSuspense?: boolean\n  // The content to be rendered when the route is matched. If no component is provided, defaults to `<Outlet />`\n\n  pendingMs?: number\n  pendingMinMs?: number\n  staleTime?: number\n  gcTime?: number\n  preload?: boolean\n  preloadStaleTime?: number\n  preloadGcTime?: number\n  search?: {\n    middlewares?: Array<\n      SearchMiddleware<\n        ResolveFullSearchSchemaInput<TParentRoute, TSearchValidator>\n      >\n    >\n  }\n  /** \n  @deprecated Use search.middlewares instead\n  */\n  preSearchFilters?: Array<\n    SearchFilter<ResolveFullSearchSchema<TParentRoute, TSearchValidator>>\n  >\n  /** \n  @deprecated Use search.middlewares instead\n  */\n  postSearchFilters?: Array<\n    SearchFilter<ResolveFullSearchSchema<TParentRoute, TSearchValidator>>\n  >\n  onCatch?: (error: Error) => void\n  onError?: (err: any) => void\n  // These functions are called as route matches are loaded, stick around and leave the active\n  // matches\n  onEnter?: (\n    match: RouteMatch<\n      TRouteId,\n      TFullPath,\n      ResolveAllParamsFromParent<TParentRoute, TParams>,\n      ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n      ResolveLoaderData<TLoaderFn>,\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      TLoaderDeps\n    >,\n  ) => void\n  onStay?: (\n    match: RouteMatch<\n      TRouteId,\n      TFullPath,\n      ResolveAllParamsFromParent<TParentRoute, TParams>,\n      ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n      ResolveLoaderData<TLoaderFn>,\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      TLoaderDeps\n    >,\n  ) => void\n  onLeave?: (\n    match: RouteMatch<\n      TRouteId,\n      TFullPath,\n      ResolveAllParamsFromParent<TParentRoute, TParams>,\n      ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n      ResolveLoaderData<TLoaderFn>,\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      TLoaderDeps\n    >,\n  ) => void\n  headers?: (ctx: {\n    loaderData: ResolveLoaderData<TLoaderFn>\n  }) => Record<string, string>\n  head?: (\n    ctx: AssetFnContextOptions<\n      TRouteId,\n      TFullPath,\n      TParentRoute,\n      TParams,\n      TSearchValidator,\n      TLoaderFn,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps\n    >,\n  ) => {\n    links?: AnyRouteMatch['links']\n    scripts?: AnyRouteMatch['headScripts']\n    meta?: AnyRouteMatch['meta']\n  }\n  scripts?: (\n    ctx: AssetFnContextOptions<\n      TRouteId,\n      TFullPath,\n      TParentRoute,\n      TParams,\n      TSearchValidator,\n      TLoaderFn,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps\n    >,\n  ) => AnyRouteMatch['scripts']\n  ssr?: boolean\n  codeSplitGroupings?: Array<\n    Array<\n      | 'loader'\n      | 'component'\n      | 'pendingComponent'\n      | 'notFoundComponent'\n      | 'errorComponent'\n    >\n  >\n}\n\nexport type RouteLoaderFn<\n  in out TParentRoute extends AnyRoute = AnyRoute,\n  in out TId extends string = string,\n  in out TParams = {},\n  in out TLoaderDeps = {},\n  in out TRouterContext = {},\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n> = (\n  match: LoaderFnContext<\n    TParentRoute,\n    TId,\n    TParams,\n    TLoaderDeps,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >,\n) => any\n\nexport interface LoaderFnContext<\n  in out TParentRoute extends AnyRoute = AnyRoute,\n  in out TId extends string = string,\n  in out TParams = {},\n  in out TLoaderDeps = {},\n  in out TRouterContext = {},\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n> {\n  abortController: AbortController\n  preload: boolean\n  params: Expand<ResolveAllParamsFromParent<TParentRoute, TParams>>\n  deps: TLoaderDeps\n  context: Expand<\n    ResolveAllContext<\n      TParentRoute,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >\n  >\n  location: ParsedLocation // Do not supply search schema here so as to demotivate people from trying to shortcut loaderDeps\n  /**\n   * @deprecated Use `throw redirect({ to: '/somewhere' })` instead\n   **/\n  navigate: (opts: NavigateOptions<AnyRouter>) => Promise<void> | void\n  // root route does not have a parent match\n  parentMatchPromise: TId extends RootRouteId\n    ? never\n    : Promise<MakeRouteMatchFromRoute<TParentRoute>>\n  cause: 'preload' | 'enter' | 'stay'\n  route: AnyRoute\n}\n\nexport type RootRouteOptions<\n  TSearchValidator = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n> = Omit<\n  RouteOptions<\n    any, // TParentRoute\n    RootRouteId, // TId\n    RootRouteId, // TCustomId\n    '', // TFullPath\n    '', // TPath\n    TSearchValidator,\n    {}, // TParams\n    TLoaderDeps,\n    TLoaderFn,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >,\n  | 'path'\n  | 'id'\n  | 'getParentRoute'\n  | 'caseSensitive'\n  | 'parseParams'\n  | 'stringifyParams'\n  | 'params'\n>\n\nexport type RouteConstraints = {\n  TParentRoute: AnyRoute\n  TPath: string\n  TFullPath: string\n  TCustomId: string\n  TId: string\n  TSearchSchema: AnySchema\n  TFullSearchSchema: AnySchema\n  TParams: Record<string, any>\n  TAllParams: Record<string, any>\n  TParentContext: AnyContext\n  TRouteContext: RouteContext\n  TAllContext: AnyContext\n  TRouterContext: AnyContext\n  TChildren: unknown\n  TRouteTree: AnyRoute\n}\n\nexport type RouteTypesById<TRouter extends AnyRouter, TId> = RouteById<\n  TRouter['routeTree'],\n  TId\n>['types']\n\nexport type RouteMask<TRouteTree extends AnyRoute> = {\n  routeTree: TRouteTree\n  from: RoutePaths<TRouteTree>\n  to?: any\n  params?: any\n  search?: any\n  hash?: any\n  state?: any\n  unmaskOnReload?: boolean\n}\n\n/**\n * @deprecated Use `ErrorComponentProps` instead.\n */\nexport type ErrorRouteProps = {\n  error: unknown\n  info?: { componentStack: string }\n  reset: () => void\n}\n\nexport type ErrorComponentProps = {\n  error: Error\n  info?: { componentStack: string }\n  reset: () => void\n}\nexport type NotFoundRouteProps = {\n  // TODO: Make sure this is `| null | undefined` (this is for global not-founds)\n  data: unknown\n}\n\nexport class BaseRoute<\n  in out TParentRoute extends AnyRoute = AnyRoute,\n  in out TPath extends string = '/',\n  in out TFullPath extends string = ResolveFullPath<TParentRoute, TPath>,\n  in out TCustomId extends string = string,\n  in out TId extends string = ResolveId<TParentRoute, TCustomId, TPath>,\n  in out TSearchValidator = undefined,\n  in out TParams = ResolveParams<TPath>,\n  in out TRouterContext = AnyContext,\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n  in out TLoaderDeps extends Record<string, any> = {},\n  in out TLoaderFn = undefined,\n  in out TChildren = unknown,\n  in out TFileRouteTypes = unknown,\n> implements\n    Route<\n      TParentRoute,\n      TPath,\n      TFullPath,\n      TCustomId,\n      TId,\n      TSearchValidator,\n      TParams,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TLoaderFn,\n      TChildren,\n      TFileRouteTypes\n    >\n{\n  isRoot: TParentRoute extends AnyRoute ? true : false\n  options: RouteOptions<\n    TParentRoute,\n    TId,\n    TCustomId,\n    TFullPath,\n    TPath,\n    TSearchValidator,\n    TParams,\n    TLoaderDeps,\n    TLoaderFn,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >\n\n  // The following properties are set up in this.init()\n  parentRoute!: TParentRoute\n  private _id!: TId\n  private _path!: TPath\n  private _fullPath!: TFullPath\n  private _to!: TrimPathRight<TFullPath>\n  private _ssr!: boolean\n\n  public get to() {\n    return this._to\n  }\n\n  public get id() {\n    return this._id\n  }\n\n  public get path() {\n    return this._path\n  }\n\n  public get fullPath() {\n    return this._fullPath\n  }\n\n  public get ssr() {\n    return this._ssr\n  }\n\n  // Optional\n  children?: TChildren\n  originalIndex?: number\n  rank!: number\n  lazyFn?: () => Promise<LazyRoute>\n  _lazyPromise?: Promise<void>\n  _componentsPromise?: Promise<Array<void>>\n\n  constructor(\n    options?: RouteOptions<\n      TParentRoute,\n      TId,\n      TCustomId,\n      TFullPath,\n      TPath,\n      TSearchValidator,\n      TParams,\n      TLoaderDeps,\n      TLoaderFn,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >,\n  ) {\n    this.options = (options as any) || {}\n    this.isRoot = !options?.getParentRoute as any\n\n    if ((options as any)?.id && (options as any)?.path) {\n      throw new Error(`Route cannot have both an 'id' and a 'path' option.`)\n    }\n  }\n\n  types!: RouteTypes<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TChildren,\n    TFileRouteTypes\n  >\n\n  init = (opts: { originalIndex: number; defaultSsr?: boolean }): void => {\n    this.originalIndex = opts.originalIndex\n\n    const options = this.options as\n      | (RouteOptions<\n          TParentRoute,\n          TId,\n          TCustomId,\n          TFullPath,\n          TPath,\n          TSearchValidator,\n          TParams,\n          TLoaderDeps,\n          TLoaderFn,\n          TRouterContext,\n          TRouteContextFn,\n          TBeforeLoadFn\n        > &\n          RoutePathOptionsIntersection<TCustomId, TPath>)\n      | undefined\n\n    const isRoot = !options?.path && !options?.id\n\n    this.parentRoute = this.options.getParentRoute?.()\n\n    if (isRoot) {\n      this._path = rootRouteId as TPath\n    } else if (!this.parentRoute) {\n      throw new Error(\n        `Child Route instances must pass a 'getParentRoute: () => ParentRoute' option that returns a Route instance.`,\n      )\n    }\n\n    let path: undefined | string = isRoot ? rootRouteId : options?.path\n\n    // If the path is anything other than an index path, trim it up\n    if (path && path !== '/') {\n      path = trimPathLeft(path)\n    }\n\n    const customId = options?.id || path\n\n    // Strip the parentId prefix from the first level of children\n    let id = isRoot\n      ? rootRouteId\n      : joinPaths([\n          this.parentRoute.id === rootRouteId ? '' : this.parentRoute.id,\n          customId,\n        ])\n\n    if (path === rootRouteId) {\n      path = '/'\n    }\n\n    if (id !== rootRouteId) {\n      id = joinPaths(['/', id])\n    }\n\n    const fullPath =\n      id === rootRouteId ? '/' : joinPaths([this.parentRoute.fullPath, path])\n\n    this._path = path as TPath\n    this._id = id as TId\n    this._fullPath = fullPath as TFullPath\n    this._to = fullPath as TrimPathRight<TFullPath>\n    this._ssr = options?.ssr ?? opts.defaultSsr ?? true\n  }\n\n  addChildren: RouteAddChildrenFn<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TFileRouteTypes\n  > = (children) => {\n    return this._addFileChildren(children) as any\n  }\n\n  _addFileChildren: RouteAddFileChildrenFn<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TFileRouteTypes\n  > = (children) => {\n    if (Array.isArray(children)) {\n      this.children = children as TChildren\n    }\n\n    if (typeof children === 'object' && children !== null) {\n      this.children = Object.values(children) as TChildren\n    }\n\n    return this as any\n  }\n\n  _addFileTypes: RouteAddFileTypesFn<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TChildren\n  > = () => {\n    return this as any\n  }\n\n  updateLoader = <TNewLoaderFn>(options: {\n    loader: Constrain<\n      TNewLoaderFn,\n      RouteLoaderFn<\n        TParentRoute,\n        TCustomId,\n        TParams,\n        TLoaderDeps,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >\n    >\n  }) => {\n    Object.assign(this.options, options)\n    return this as unknown as BaseRoute<\n      TParentRoute,\n      TPath,\n      TFullPath,\n      TCustomId,\n      TId,\n      TSearchValidator,\n      TParams,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TNewLoaderFn,\n      TChildren,\n      TFileRouteTypes\n    >\n  }\n\n  update = (\n    options: UpdatableRouteOptions<\n      TParentRoute,\n      TCustomId,\n      TFullPath,\n      TParams,\n      TSearchValidator,\n      TLoaderFn,\n      TLoaderDeps,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >,\n  ): this => {\n    Object.assign(this.options, options)\n    return this\n  }\n\n  lazy: RouteLazyFn<this> = (lazyFn) => {\n    this.lazyFn = lazyFn\n    return this\n  }\n}\n\nexport class BaseRouteApi<TId, TRouter extends AnyRouter = RegisteredRouter> {\n  id: TId\n\n  constructor({ id }: { id: TId }) {\n    this.id = id as any\n  }\n\n  notFound = (opts?: NotFoundError) => {\n    return notFound({ routeId: this.id as string, ...opts })\n  }\n}\n\nexport class BaseRootRoute<\n  in out TSearchValidator = undefined,\n  in out TRouterContext = {},\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n  in out TLoaderDeps extends Record<string, any> = {},\n  in out TLoaderFn = undefined,\n  in out TChildren = unknown,\n  in out TFileRouteTypes = unknown,\n> extends BaseRoute<\n  any, // TParentRoute\n  '/', // TPath\n  '/', // TFullPath\n  string, // TCustomId\n  RootRouteId, // TId\n  TSearchValidator, // TSearchValidator\n  {}, // TParams\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TChildren, // TChildren\n  TFileRouteTypes\n> {\n  constructor(\n    options?: RootRouteOptions<\n      TSearchValidator,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TLoaderFn\n    >,\n  ) {\n    super(options as any)\n  }\n}\n\n//\n", "import { deepEqual } from './utils'\nimport type { NoInfer, PickOptional } from './utils'\nimport type { SearchMiddleware } from './route'\nimport type { IsRequiredParams } from './link'\n\nexport function retainSearchParams<TSearchSchema extends object>(\n  keys: Array<keyof TSearchSchema> | true,\n): SearchMiddleware<TSearchSchema> {\n  return ({ search, next }) => {\n    const result = next(search)\n    if (keys === true) {\n      return { ...search, ...result }\n    }\n    // add missing keys from search to result\n    keys.forEach((key) => {\n      if (!(key in result)) {\n        result[key] = search[key]\n      }\n    })\n    return result\n  }\n}\n\nexport function stripSearchParams<\n  TSearchSchema,\n  TOptionalProps = PickOptional<NoInfer<TSearchSchema>>,\n  const TValues =\n    | Partial<NoInfer<TOptionalProps>>\n    | Array<keyof TOptionalProps>,\n  const TInput = IsRequiredParams<TSearchSchema> extends never\n    ? TValues | true\n    : TValues,\n>(input: NoInfer<TInput>): SearchMiddleware<TSearchSchema> {\n  return ({ search, next }) => {\n    if (input === true) {\n      return {}\n    }\n    const result = next(search) as Record<string, unknown>\n    if (Array.isArray(input)) {\n      input.forEach((key) => {\n        delete result[key]\n      })\n    } else {\n      Object.entries(input as Record<string, unknown>).forEach(\n        ([key, value]) => {\n          if (deepEqual(result[key], value)) {\n            delete result[key]\n          }\n        },\n      )\n    }\n    return result as any\n  }\n}\n"],
  "mappings": "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",
  "names": ["stateIndexKey", "popStateEvent", "beforeUnloadEvent", "createHistory", "opts", "location", "getLocation", "subscribers", "Set", "notify", "action", "forEach", "subscriber", "handleIndexChange", "notifyOnIndexChange", "tryNavigation", "task", "navigateOpts", "actionInfo", "_a", "_b", "ignoreBlocker", "blockers", "getBlockers", "call", "isPushOrReplace", "type", "document", "length", "blocker", "nextLocation", "parseHref", "path", "state", "isBlocked", "blockerFn", "currentLocation", "onBlocked", "getLength", "subscribe", "cb", "add", "delete", "push", "currentIndex", "assignKeyAndIndex", "pushState", "replace", "replaceState", "go", "index", "back", "forward", "canGoBack", "createHref", "str", "block", "setBlockers", "_a2", "blockers2", "filter", "b", "flush", "destroy", "key", "createRandomKey", "createBrowserHistory", "win", "window", "originalPushState", "history", "originalReplaceState", "_getBlockers", "_setBlockers", "newBlockers", "parseLocation", "pathname", "search", "hash", "rollbackLocation", "nextPopIsGo", "ignoreNextPop", "skipBlockerNextPop", "ignoreNextBeforeUnload", "next", "scheduled", "_ignoreSubscribers", "isPush", "href", "queueHistoryAction", "destHref", "Promise", "resolve", "then", "onPushPop", "onPushPopEvent", "delta", "isForward", "isBack", "isGo", "onBeforeUnload", "e", "shouldBlock", "shouldHaveBeforeUnload", "enableBeforeUnload", "preventDefault", "returnValue", "n", "removeEventListener", "capture", "addEventListener", "args", "res", "apply", "createHashHistory", "hashSplit", "split", "slice", "pathPart", "searchPart", "hashEntries", "hashPart", "join", "hashHref", "createMemoryHistory", "initialEntries", "entries", "initialIndex", "Math", "min", "max", "states", "map", "_entry", "index2", "splice", "hashIndex", "indexOf", "searchIndex", "substring", "random", "toString", "last", "arr", "length", "isFunction", "d", "functionalUpdate", "updater", "previous", "pick", "parent", "keys", "reduce", "obj", "key", "replaceEqualDeep", "prev", "_next", "next", "array", "isPlainArray", "isPlainObject", "prevItems", "Object", "prevSize", "nextItems", "nextSize", "copy", "equalItems", "i", "includes", "o", "hasObjectPrototype", "ctor", "constructor", "prot", "prototype", "hasOwnProperty", "toString", "call", "value", "Array", "isArray", "getObjectKeys", "ignoreUndefined", "filter", "deepEqual", "a", "b", "opts", "aKeys", "bKeys", "partial", "every", "some", "item", "index", "createControlledPromise", "onResolve", "resolveLoadPromise", "rejectLoadPromise", "controlledPromise", "Promise", "resolve", "reject", "status", "e", "escapeJSON", "jsonString", "replace", "shallow", "objA", "objB", "is", "keysA", "hasUriEncodedChars", "inputString", "pattern", "test", "joinPaths", "paths", "cleanPath", "filter", "val", "join", "path", "replace", "trimPathLeft", "trimPathRight", "trimPath", "removeTrailingSlash", "value", "basepath", "endsWith", "slice", "exactPathTest", "pathName1", "pathName2", "resolvePath", "base", "to", "trailingSlash", "caseSensitive", "removeBasepath", "baseSegments", "parsePathname", "toSegments", "length", "_a", "last", "pop", "forEach", "toSegment", "index", "push", "_b", "type", "joined", "map", "d", "pathname", "segments", "substring", "split", "Boolean", "part", "charAt", "includes", "segment", "decodeURI", "interpolatePath", "params", "leaveWildcards", "leaveParams", "decodeCharMap", "interpolatedPathSegments", "encodeParam", "key", "isValueString", "encodeURI", "encodePathParam", "usedParams", "interpolatedPath", "_splat", "encoded", "encodeURIComponent", "encodedChar", "char", "replaceAll", "matchPathname", "currentPathname", "matchLocation", "pathParams", "matchByPath", "normalizedBasepath", "toLowerCase", "normalizedPathname", "startsWith", "from", "routeSegments", "unshift", "isMatch", "i", "Math", "max", "baseSegment", "routeSegment", "isLastBaseSegment", "isLastRouteSegment", "decodeURIComponent", "fuzzy", "notFound", "options", "isNotFound", "throw", "obj", "encode", "obj", "pfx", "normalizedObject", "Object", "entries", "flatMap", "key", "value", "Array", "isArray", "map", "v", "String", "searchParams", "URLSearchParams", "toString", "toValue", "mix", "str", "hasUriEncodedChars", "decodeURIComponent", "encodeURIComponent", "decode", "searchParamsPart", "slice", "length", "reduce", "acc", "previousValue", "defaultParseSearch", "parseSearchWith", "JSON", "parse", "defaultStringifySearch", "stringifySearchWith", "stringify", "parser", "searchStr", "substring", "query", "decode", "key", "value", "err", "stringifyValue", "val", "search", "Object", "keys", "forEach", "encode", "toString", "rootRouteId", "redirect", "opts", "isRedirect", "statusCode", "code", "headers", "reloadDocument", "URL", "href", "throw", "obj", "isResolvedRedirect", "storageKey", "sessionsStorage", "window", "sessionStorage", "throttle", "fn", "wait", "timeout", "args", "setTimeout", "scrollRestorationCache", "state", "JSON", "parse", "getItem", "set", "updater", "functionalUpdate", "setItem", "stringify", "defaultGetScrollRestorationKey", "location", "key", "href", "getCssSelector", "el", "path", "parent", "parentNode", "unshift", "tagName", "indexOf", "call", "children", "join", "toLowerCase", "ignoreScroll", "restoreScroll", "storageKey2", "behavior", "shouldScrollRestoration", "scrollToTopSelectors", "byKey", "error", "console", "resolvedKey", "_a", "history", "elementEntries", "elementSelector", "entry", "scrollTo", "top", "scrollY", "left", "scrollX", "element", "document", "querySelector", "scrollLeft", "scrollTop", "hash", "split", "hashScrollIntoViewOptions", "__hashScrollIntoViewOptions", "getElementById", "scrollIntoView", "filter", "d", "forEach", "selector", "setupScrollRestoration", "router", "force", "options", "scrollRestoration", "isScrollRestoring", "isScrollRestorationSetup", "getKey", "getScrollRestorationKey", "onScroll", "event", "target", "attrId", "getAttribute", "restoreKey", "keyEntry", "elementEntry", "addEventListener", "subscribe", "cacheKey", "toLocation", "resetNextScroll", "scrollRestorationBehavior", "defaultSerializeError", "err", "Error", "obj", "name", "message", "process", "stack", "data", "getLocationChangeInfo", "routerState", "fromLocation", "resolvedLocation", "toLocation", "location", "pathChanged", "pathname", "hrefChanged", "href", "hashChanged", "hash", "RouterCore", "constructor", "options", "tempLocationKey", "Math", "round", "random", "resetNextScroll", "shouldViewTransition", "isViewTransitionTypesSupported", "subscribers", "Set", "isScrollRestoring", "isScrollRestorationSetup", "startTransition", "fn", "update", "newOptions", "notFoundRoute", "console", "warn", "previousOptions", "isServer", "document", "pathParamsDecodeCharMap", "pathParamsAllowedCharacters", "Map", "map", "char", "encodeURIComponent", "basepath", "trimPath", "history", "createMemoryHistory", "initialEntries", "createBrowserHistory", "latestLocation", "parseLocation", "routeTree", "buildRouteTree", "__store", "Store", "getInitialRouterState", "onUpdate", "state", "cachedMatches", "filter", "d", "includes", "status", "setupScrollRestoration", "window", "_a", "CSS", "supports", "routesById", "routesByPath", "init", "originalIndex", "defaultSsr", "id", "recurseRoutes", "childRoutes", "forEach", "childRoute", "i", "existingRoute", "invariant", "String", "isRoot", "path", "trimmedFullPath", "trimPathRight", "fullPath", "endsWith", "children", "length", "scoredRoutes", "routes", "Object", "values", "trimmed", "trimPathLeft", "parsed", "parsePathname", "value", "shift", "scores", "segment", "type", "push", "child", "index", "flatRoutes", "sort", "a", "b", "minLength", "min", "rank", "subscribe", "eventType", "listener", "add", "delete", "emit", "routerEvent", "previousLocation", "locationToParse", "parse", "search", "parsedSearch", "parseSearch", "searchStr", "stringifySearch", "replaceEqualDeep", "split", "reverse", "__tempLocation", "__tempKey", "parsedTempLocation", "key", "maskedLocation", "resolvePathWithBase", "from", "resolvedPath", "resolvePath", "base", "to", "cleanPath", "trailingSlash", "caseSensitive", "matchRoutes", "pathnameOrNext", "locationSearchOrOpts", "opts", "matchRoutesInternal", "getMatchedRoutes", "next", "dest", "routeParams", "trimmedPath", "getMatchedParams", "route", "result", "matchPathname", "fuzzy", "foundRoute", "find", "matchedParams", "routeCursor", "rootRouteId", "matchedRoutes", "parentRoute", "unshift", "cancelMatch", "match", "getMatch", "abortController", "abort", "clearTimeout", "pendingTimeout", "cancelMatches", "pendingMatches", "buildLocation", "build", "matchedRoutesResult", "fromMatches", "_fromLocation", "_buildLocation", "matches", "fromMatch", "fromPath", "fromSearch", "_b", "last", "_c", "stayingMatches", "e", "routeId", "resolvePathTo", "_d", "fromRouteByFromPathRouteId", "_e", "interpolatedPath", "interpolatePath", "params", "decodeCharMap", "pathname2", "joinPaths", "prevParams", "_f", "nextParams", "functionalUpdate", "keys", "_a2", "stringify", "stringifyParams", "Boolean", "leaveWildcards", "leaveParams", "_includeValidateSearch", "_g", "strict", "validatedSearch", "validateSearch", "applyMiddlewares", "search2", "allMiddlewares", "reduce", "acc", "middlewares", "preSearchFilters", "postSearchFilters", "legacyMiddleware", "search3", "nextSearch", "prev", "next2", "validate", "concat", "final", "applyNext", "currentSearch", "middleware", "newSearch", "hashStr", "nextState", "unmaskOnReload", "buildWithMatches", "maskedDest", "maskedNext", "foundMask", "routeMasks", "_from", "maskProps", "pick", "nextMatches", "maskedMatches", "maskedFinal", "mask", "commitLocation", "viewTransition", "ignoreBlocker", "isSameState", "ignoredProps", "prop", "isEqual", "deepEqual", "isSameUrl", "previousCommitPromise", "commitLocationPromise", "createControlledPromise", "resolve", "load", "hashScrollIntoView", "nextHistory", "__hashScrollIntoViewOptions", "defaultHashScrollIntoView", "replace", "resetScroll", "size", "buildAndCommitLocation", "rest", "currentIndex", "__TSR_index", "parseHref", "slice", "navigate", "reloadDocument", "createHref", "redirect", "notFound", "loadPromise", "Promise", "prevLocation", "batch", "setState", "s", "isLoading", "loadMatches", "sync", "onReady", "startViewTransition", "exitingMatches", "enteringMatches", "previousMatches", "newMatches", "loadedAt", "Date", "now", "clearExpiredCache", "hook", "looseRoutesById", "call", "isResolvedRedirect", "isNotFound", "statusCode", "some", "latestLoadPromise", "hasNotFoundMatch", "defaultViewTransition", "startViewTransitionParams", "types", "updateMatch", "updater", "updated", "isPending", "isMatched", "isCached", "matchesKey", "matchId", "preload", "allPreload", "firstBadMatchIndex", "rendered", "triggerOnReady", "resolvePreload", "handleRedirectAndNotFound", "isRedirect", "isFetching", "error", "beforeLoadPromise", "loaderPromise", "resolveRedirect", "_handleNotFound", "serverSsr", "onMatchSettled", "router", "resolveAll", "rejectAll", "handleSerialError", "routerCode", "_b2", "onError", "errorHandlerErr", "_a3", "_b3", "updatedAt", "AbortController", "entries", "existingMatch", "parentMatchId", "pendingMs", "defaultPendingMs", "shouldPending", "loader", "beforeLoad", "Infinity", "pendingComponent", "defaultPendingComponent", "executeBeforeLoad", "setTimeout", "prevLoadPromise", "paramsError", "searchError", "getParentMatchContext", "context", "fetchCount", "__routeContext", "cause", "beforeLoadFnContext", "beforeLoadContext", "__beforeLoadContext", "validResolvedMatches", "matchPromises", "prevLoaderPromise", "loaderShouldRunAsync", "loaderIsRunningAsync", "parentMatchPromise", "getLoaderContext", "loaderDeps", "preload2", "deps", "age", "staleAge", "preloadStaleTime", "defaultPreloadStaleTime", "staleTime", "defaultStaleTime", "shouldReloadOption", "shouldReload", "runLoader", "potentialPendingMinPromise", "latestMatch", "minPendingPromise", "loadRouteChunk", "loaderData", "_lazyPromise", "assetContext", "headFnContent", "_d2", "_c2", "head", "meta", "links", "headScripts", "scripts", "headers", "_h", "_j", "_i", "onErrorError", "_k", "_componentsPromise", "invalid", "all", "invalidate", "clearCache", "m", "gcTime", "preloadGcTime", "defaultPreloadGcTime", "defaultGcTime", "lazyFn", "then", "lazyRoute", "_id", "options2", "assign", "componentTypes", "component", "preloadRoute", "throwOnError", "activeMatchIds", "loadedMatchIds", "has", "matchRoute", "matchLocation", "pending", "baseLocation", "partial", "includeSearch", "matchesByRouteId", "notFoundComponent", "defaultNotFoundComponent", "matchForRoute", "globalNotFound", "defaultPreloadDelay", "defaultPendingMinMs", "notFoundMode", "defaultStringifySearch", "defaultParseSearch", "__TSR_ROUTER__", "isGlobalNotFound", "globalNotFoundRouteId", "parseErrors", "parsedParamsError", "parseParams", "parsedParams", "PathParamError", "getParentContext", "parentMatch", "parentContext", "preMatchSearch", "strictMatchSearch", "parentSearch", "parentStrictSearch", "_strictSearch", "strictSearch", "searchParamError", "SearchParamError", "loaderDepsHash", "JSON", "usedParams", "previousMatch", "_strictParams", "routeNeedsPreload", "staticData", "contextFnContext", "opts2", "args", "imported", "isTransitioning", "validateSearch2", "input", "issues", "componentType", "TSR_DEFERRED_PROMISE", "Symbol", "for", "defer", "_promise", "options", "promise", "status", "then", "data", "catch", "error", "serializeError", "defaultSerializeError", "__isServerError", "preloadWarning", "isMatch", "match", "path", "parts", "split", "part", "value", "shift", "BaseRoute", "constructor", "options", "init", "opts", "originalIndex", "options2", "isRoot", "path", "id", "parentRoute", "_b", "_a", "getParentRoute", "call", "_path", "rootRouteId", "Error", "trimPathLeft", "customId", "joinPaths", "fullPath", "_id", "_fullPath", "_to", "_ssr", "ssr", "defaultSsr", "addChildren", "children", "_addFileChildren", "Array", "isArray", "Object", "values", "_addFileTypes", "updateLoader", "assign", "update", "lazy", "lazyFn", "to", "BaseRouteApi", "notFound", "routeId", "BaseRootRoute", "retainSearchParams", "keys", "search", "next", "result", "forEach", "key", "stripSearchParams", "input", "Array", "isArray", "Object", "entries", "value", "deepEqual"]
}
