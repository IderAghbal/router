/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import type {
  FileRoutesByPath,
  CreateServerFileRoute,
} from '@tanstack/react-start/server'
import {
  createServerRoute,
  createServerFileRoute,
} from '@tanstack/react-start/server'

import { ServerRoute as ProjectVersionDocsFrameworkFrameworkSplatDotmdRouteImport } from './../../src/routes/$project.$version.docs.framework.$framework.${$}[.]md'

// Create/Update Routes

const rootRoute = createServerRoute()

const ProjectVersionDocsFrameworkFrameworkSplatDotmdRoute =
  ProjectVersionDocsFrameworkFrameworkSplatDotmdRouteImport.update({
    id: '/$project/$version/docs/framework/$framework/${$}.md',
    path: '/$project/$version/docs/framework/$framework/${$}.md',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-start/server' {
  interface FileRoutesByPath {
    '/$project/$version/docs/framework/$framework/${$}.md': {
      id: '/$project/$version/docs/framework/$framework/${$}.md'
      path: '/$project/$version/docs/framework/$framework/${$}.md'
      fullPath: '/$project/$version/docs/framework/$framework/${$}.md'
      preLoaderRoute: typeof ProjectVersionDocsFrameworkFrameworkSplatDotmdRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module './../../src/routes/$project.$version.docs.framework.$framework.${$}[.]md' {
  const createServerFileRoute: CreateServerFileRoute<
    FileRoutesByPath['/$project/$version/docs/framework/$framework/${$}.md']['parentRoute'],
    FileRoutesByPath['/$project/$version/docs/framework/$framework/${$}.md']['id'],
    FileRoutesByPath['/$project/$version/docs/framework/$framework/${$}.md']['path'],
    FileRoutesByPath['/$project/$version/docs/framework/$framework/${$}.md']['fullPath'],
    unknown
  >
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/$project/$version/docs/framework/$framework/${$}.md': typeof ProjectVersionDocsFrameworkFrameworkSplatDotmdRoute
}

export interface FileRoutesByTo {
  '/$project/$version/docs/framework/$framework/${$}.md': typeof ProjectVersionDocsFrameworkFrameworkSplatDotmdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/$project/$version/docs/framework/$framework/${$}.md': typeof ProjectVersionDocsFrameworkFrameworkSplatDotmdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$project/$version/docs/framework/$framework/${$}.md'
  fileRoutesByTo: FileRoutesByTo
  to: '/$project/$version/docs/framework/$framework/${$}.md'
  id: '__root__' | '/$project/$version/docs/framework/$framework/${$}.md'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProjectVersionDocsFrameworkFrameworkSplatDotmdRoute: typeof ProjectVersionDocsFrameworkFrameworkSplatDotmdRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProjectVersionDocsFrameworkFrameworkSplatDotmdRoute:
    ProjectVersionDocsFrameworkFrameworkSplatDotmdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/$project/$version/docs/framework/$framework/${$}.md"
      ]
    },
    "/$project/$version/docs/framework/$framework/${$}.md": {
      "filePath": "$project.$version.docs.framework.$framework.${$}[.]md.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
